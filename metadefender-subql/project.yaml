specVersion: "1.0.0"

name: "test-acala-by-evm"
version: "0.0.1"
runner:
  node:
    name: "@subql/node-ethereum"
    version: "*"
  query:
    name: "@subql/query"
    version: "*"
description: "This project can be use as a starting point for developing your
  new Ethereum SubQuery project"
repository: "https://github.com/subquery/ethereum-subql-starter"

schema:
  file: "./schema.graphql"

network:
  # chainId is the EVM Chain ID, for Ethereum this is 1
  # https://chainlist.org/chain/1
  chainId: "787"
  # This endpoint must be a public non-pruned archive node
  # We recommend providing more than one endpoint for improved reliability, performance, and uptime
  # Public nodes may be rate limited, which can affect indexing speed
  # When developing your project we suggest getting a private API key
  # You can get them from OnFinality for free https://app.onfinality.io
  # https://documentation.onfinality.io/support/the-enhanced-api-service
  endpoint: wss://eth-rpc-acala.aca-api.network
  # Recommended to provide the HTTP endpoint of a full chain dictionary to speed up processing
  dictionary: "https://gx.api.subquery.network/sq/subquery/eth-dictionary"

dataSources:
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: MetaDefenderMarketRegistry
      address: "0x5D7D17A491426dd9579329443Dd7A5eE13a9BE77" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      MetaDefenderMarketRegistry:
        file: artifacts/contracts/periphery/MetaDefenderMarketsRegistry.sol/MetaDefenderMarketsRegistry.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleMarketAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - MarketAdded(address metaDefender,address liquidityCertificate,address policy,address epochManage,string marketName,string marketDescription,string marketPaymentToken,string marketProtectionType,string network,uint256 timestamp)
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      abi: MetaDefender
      address: "0x0BbAe9ab5d45c323D66cA910BF1647B14C980384"
    assets:
      MetaDefender:
        file: artifacts/contracts/MetaDefender.sol/MetaDefender.json
    mapping:
        file: "./dist/index.js"
        handlers:
            - handler: handleNewPolicyBuyer_MetaDefender
              kind: ethereum/LogHandler
              filter:
                topics:
                  - NewPolicyBought(uint256 policyId, address policyBuyer, uint256 amount);
            - handler: handleNewPolicyBuyer_MetaDefender
              kind: ethereum/LogHandler
              filter:
                topics:
                  - RewardsClaimed(address provider, uint256 rewards);
            - handler: handleCoverageClaimedAndTransferred
              kind: ethereum/LogHandler
              filter:
                topics:
                  - CoverageClaimedAndTransferred(uint256 id, address policyBuyer, uint256 coverage);
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      abi: MetaDefender
      address: "0x450d9D9547bFc956270df2Ab4651631cBb4c69ac"
    assets:
      MetaDefender:
        file: artifacts/contracts/MetaDefender.sol/MetaDefender.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleNewPolicyBuyer_MetaDefender
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyBought(uint256 policyId, address policyBuyer, uint256 amount);
        - handler: handleNewPolicyBuyer_MetaDefender
          kind: ethereum/LogHandler
          filter:
            topics:
              - RewardsClaimed(address provider, uint256 amount);
        - handler: handleCoverageClaimedAndTransferred
          kind: ethereum/LogHandler
          filter:
            topics:
              - CoverageClaimedAndTransferred(uint256 id, address policyBuyer, uint256 coverage);
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      abi: MetaDefender
      address: "0x0817AA283052AE164910D1335A4d7f491a441f28"
    assets:
      MetaDefender:
        file: artifacts/contracts/MetaDefender.sol/MetaDefender.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleNewPolicyBuyer_MetaDefender
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyBought(uint256 policyId, address policyBuyer, uint256 amount);
        - handler: handleNewPolicyBuyer_MetaDefender
          kind: ethereum/LogHandler
          filter:
            topics:
              - RewardsClaimed(address provider, uint256 amount);
        - handler: handleCoverageClaimedAndTransferred
          kind: ethereum/LogHandler
          filter:
            topics:
              - CoverageClaimedAndTransferred(uint256 id, address policyBuyer, uint256 coverage);
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: LiquidityCertificate
      address: "0xeECdEbeeE8c11f8e8ac09dcc3CC04469A59f67e1" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      LiquidityCertificate:
        file: artifacts/contracts/LiquidityCertificate.sol/LiquidityCertificate.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleLPTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from,address indexed to,uint256 indexed tokenId)
        - handler: handleLPExpired
          kind: ethereum/LogHandler
          filter:
            topics:
              - Expired(uint256 certificateId)
        - handler: handleNewLPMinted_glimmer
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewLPMinted(address owner,uint256 certificateId,uint256 enteredEpochIndex,uint256 liquidity,address metadefender)
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: LiquidityCertificate
      address: "0x4Eb03D4d8a1A5ed16345300E6E4f5b829FD87f4e" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      LiquidityCertificate:
        file: artifacts/contracts/LiquidityCertificate.sol/LiquidityCertificate.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleLPTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from,address indexed to,uint256 indexed tokenId)
        - handler: handleLPExpired
          kind: ethereum/LogHandler
          filter:
            topics:
              - Expired(uint256 certificateId)
        - handler: handleNewLPMinted_flame
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewLPMinted(address owner,uint256 certificateId,uint256 enteredEpochIndex,uint256 liquidity,address metadefender)
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: LiquidityCertificate
      address: "0xBC8b08Fe2A05099066807F339041778786e293c6" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      LiquidityCertificate:
        file: artifacts/contracts/LiquidityCertificate.sol/LiquidityCertificate.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleLPTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from,address indexed to,uint256 indexed tokenId)
        - handler: handleLPExpired
          kind: ethereum/LogHandler
          filter:
            topics:
              - Expired(uint256 certificateId)
        - handler: handleNewLPMinted_blaze
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewLPMinted(address owner,uint256 certificateId,uint256 enteredEpochIndex,uint256 liquidity,address metadefender)
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: Policy
      address: "0xfA467995CaDCeabac266E2BcbeC8E0eF937AbF2B" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      Policy:
        file: artifacts/contracts/Policy.sol/Policy.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handlePolicyClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - PolicyClaimed(uint256 policyId, bool status)
        - handler: handleNewPolicyMinted_glimmer
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyMinted(address beneficiary,uint256 policyId,uint256 timestamp,uint256 coverage,uint256 fee,uint256 duration,uint256 standardRisk,uint256 enteredEpochIndex,uint256 SPS,address protocol,address epochManage)
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: Policy
      address: "0xaA5a08bdf689FD14fb44114fCDC9aBf0D1174BE9" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      Policy:
        file: artifacts/contracts/Policy.sol/Policy.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handlePolicyClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - PolicyClaimed(uint256 policyId, bool status)
        - handler: handleNewPolicyMinted_flame
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyMinted(address beneficiary,uint256 policyId,uint256 timestamp,uint256 coverage,uint256 fee,uint256 duration,uint256 standardRisk,uint256 enteredEpochIndex,uint256 SPS,address protocol,address epochManage)
  - kind: ethereum/Runtime
    startBlock: 4770000
    options:
      # Must be a key of assets
      abi: Policy
      address: "0x1006a5F10063466C04a312ea4bd190EB92E8A5b7" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      Policy:
        file: artifacts/contracts/Policy.sol/Policy.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handlePolicyClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - PolicyClaimed(uint256 policyId, bool status)
        - handler: handleNewPolicyMinted_blaze
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyMinted(address beneficiary,uint256 policyId,uint256 timestamp,uint256 coverage,uint256 fee,uint256 duration,uint256 standardRisk,uint256 enteredEpochIndex,uint256 SPS,address protocol,address epochManage)