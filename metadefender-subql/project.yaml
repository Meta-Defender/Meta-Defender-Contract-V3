specVersion: "1.0.0"

name: "test-acala-by-evm"
version: "0.0.1"
runner:
  node:
    name: "@subql/node-ethereum"
    version: "*"
  query:
    name: "@subql/query"
    version: "*"
description: "This project can be use as a starting point for developing your
  new Ethereum SubQuery project"
repository: "https://github.com/subquery/ethereum-subql-starter"

schema:
  file: "./schema.graphql"

network:
  # chainId is the EVM Chain ID, for Ethereum this is 1
  # https://chainlist.org/chain/1
  chainId: "595"
  # This endpoint must be a public non-pruned archive node
  # We recommend providing more than one endpoint for improved reliability, performance, and uptime
  # Public nodes may be rate limited, which can affect indexing speed
  # When developing your project we suggest getting a private API key
  # You can get them from OnFinality for free https://app.onfinality.io
  # https://documentation.onfinality.io/support/the-enhanced-api-service
  endpoint: wss://eth-rpc-tc9.aca-staging.network
  # Recommended to provide the HTTP endpoint of a full chain dictionary to speed up processing
  dictionary: "https://gx.api.subquery.network/sq/subquery/eth-dictionary"

dataSources:
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: MetaDefenderMarketRegistry
      address: "0x3AF57aaB0aB8660a5fC142f8DFe5Df56bd8A03Ef" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      MetaDefenderMarketRegistry:
        file: artifacts/contracts/periphery/MetaDefenderMarketsRegistry.sol/MetaDefenderMarketsRegistry.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleMarketAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - MarketAdded(address metaDefender,address liquidityCertificate,address policy,address epochManage,string marketName,string marketDescription,string marketPaymentToken,string marketProtectionType,string network)
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: LiquidityCertificate
      address: "0x6cBea0dd6fA47e1285fFBA062e3566DCfD746295" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      LiquidityCertificate:
        file: artifacts/contracts/LiquidityCertificate.sol/LiquidityCertificate.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleLPTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from,address indexed to,uint256 indexed tokenId)
        - handler: handleLPExpired
          kind: ethereum/LogHandler
          filter:
            topics:
              - Expired(uint256 certificateId)
        - handler: handleNewLPMinted_glimmer
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewLPMinted(address owner,uint256 certificateId,uint256 enteredEpochIndex,uint256 liquidity,address metadefender)
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: LiquidityCertificate
      address: "0xb38dB66D5aC4A3198AF6592747F414c380247ADb" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      LiquidityCertificate:
        file: artifacts/contracts/LiquidityCertificate.sol/LiquidityCertificate.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleLPTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from,address indexed to,uint256 indexed tokenId)
        - handler: handleLPExpired
          kind: ethereum/LogHandler
          filter:
            topics:
              - Expired(uint256 certificateId)
        - handler: handleNewLPMinted_flame
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewLPMinted(address owner,uint256 certificateId,uint256 enteredEpochIndex,uint256 liquidity,address metadefender)
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: LiquidityCertificate
      address: "0xC659Abac43B6E67F91Ae5af9E8610e9DBf6fD9E3" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      LiquidityCertificate:
        file: artifacts/contracts/LiquidityCertificate.sol/LiquidityCertificate.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handleLPTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from,address indexed to,uint256 indexed tokenId)
        - handler: handleLPExpired
          kind: ethereum/LogHandler
          filter:
            topics:
              - Expired(uint256 certificateId)
        - handler: handleNewLPMinted_blaze
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewLPMinted(address owner,uint256 certificateId,uint256 enteredEpochIndex,uint256 liquidity,address metadefender)
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: Policy
      address: "0xB4e77CBB41a9c168512C8E0B417a50a867F35020" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      Policy:
        file: artifacts/contracts/Policy.sol/Policy.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handlePolicyClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - PolicyClaimed(uint256 policyId,bool status)
        - handler: handleNewPolicyMinted_glimmer
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyMinted(address beneficiary,uint256 policyId,uint256 timestamp,uint256 coverage,uint256 fee,uint256 duration,uint256 standardRisk,uint256 enteredEpochIndex,uint256 SPS,address protocol,address epochManage)
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: Policy
      address: "0x77E704Ce73209Ac0093BC9485679AeB02d5DbF03" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      Policy:
        file: artifacts/contracts/Policy.sol/Policy.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handlePolicyClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - PolicyClaimed(uint256 policyId,bool status)
        - handler: handleNewPolicyMinted_flame
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyMinted(address beneficiary,uint256 policyId,uint256 timestamp,uint256 coverage,uint256 fee,uint256 duration,uint256 standardRisk,uint256 enteredEpochIndex,uint256 SPS,address protocol,address epochManage)
  - kind: ethereum/Runtime
    startBlock: 620000
    options:
      # Must be a key of assets
      abi: Policy
      address: "0x8D0b6629EA2C1d648C13aACec35dF97fd43Bf9aE" # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
    assets:
      Policy:
        file: artifacts/contracts/Policy.sol/Policy.json
    mapping:
      file: "./dist/index.js"
      handlers:
        - handler: handlePolicyClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - PolicyClaimed(uint256 policyId,bool status)
        - handler: handleNewPolicyMinted_blaze
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewPolicyMinted(address beneficiary,uint256 policyId,uint256 timestamp,uint256 coverage,uint256 fee,uint256 duration,uint256 standardRisk,uint256 enteredEpochIndex,uint256 SPS,address protocol,address epochManage)