/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IMetaDefenderMarketsRegistry {
  export type MarketAddressesStruct = {
    liquidityCertificate: PromiseOrValue<string>;
    policy: PromiseOrValue<string>;
    epochManage: PromiseOrValue<string>;
  };

  export type MarketAddressesStructOutput = [string, string, string] & {
    liquidityCertificate: string;
    policy: string;
    epochManage: string;
  };

  export type MarketMessagesStruct = {
    marketName: PromiseOrValue<string>;
    marketDescription: PromiseOrValue<string>;
    marketPaymentToken: PromiseOrValue<string>;
    protectionType: PromiseOrValue<string>;
    network: PromiseOrValue<string>;
  };

  export type MarketMessagesStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    marketName: string;
    marketDescription: string;
    marketPaymentToken: string;
    protectionType: string;
    network: string;
  };
}

export interface MetaDefenderMarketsRegistryInterface extends utils.Interface {
  functions: {
    "addMarket(address,address,address,address,string,string,string,string,string)": FunctionFragment;
    "getInsuranceMarkets()": FunctionFragment;
    "getInsuranceMarketsAddressesAndMessages(address[])": FunctionFragment;
    "insuranceMarketsAddresses(address)": FunctionFragment;
    "insuranceMarketsMessages(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeMarket(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMarket"
      | "getInsuranceMarkets"
      | "getInsuranceMarketsAddressesAndMessages"
      | "insuranceMarketsAddresses"
      | "insuranceMarketsMessages"
      | "owner"
      | "removeMarket"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceMarketsAddressesAndMessages",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceMarketsAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceMarketsMessages",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceMarketsAddressesAndMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceMarketsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceMarketsMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "MarketAdded(address,address,address,address,string,string,string,string,string)": EventFragment;
    "MarketRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface MarketAddedEventObject {
  metaDefender: string;
  liquidityCertificate: string;
  policy: string;
  epochManage: string;
  marketName: string;
  marketDescription: string;
  marketPaymentToken: string;
  marketProtectionType: string;
  network: string;
}
export type MarketAddedEvent = TypedEvent<
  [string, string, string, string, string, string, string, string, string],
  MarketAddedEventObject
>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export interface MarketRemovedEventObject {
  metaDefender: string;
}
export type MarketRemovedEvent = TypedEvent<[string], MarketRemovedEventObject>;

export type MarketRemovedEventFilter = TypedEventFilter<MarketRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MetaDefenderMarketsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaDefenderMarketsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMarket(
      metaDefender: PromiseOrValue<string>,
      liquidityCertificate: PromiseOrValue<string>,
      policy: PromiseOrValue<string>,
      epochManage: PromiseOrValue<string>,
      marketName: PromiseOrValue<string>,
      marketDescription: PromiseOrValue<string>,
      marketPaymentToken: PromiseOrValue<string>,
      marketProtectionType: PromiseOrValue<string>,
      network: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInsuranceMarkets(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getInsuranceMarketsAddressesAndMessages(
      insuranceMarketList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        IMetaDefenderMarketsRegistry.MarketAddressesStructOutput[],
        IMetaDefenderMarketsRegistry.MarketMessagesStructOutput[]
      ]
    >;

    insuranceMarketsAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        liquidityCertificate: string;
        policy: string;
        epochManage: string;
      }
    >;

    insuranceMarketsMessages(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        marketName: string;
        marketDescription: string;
        marketPaymentToken: string;
        protectionType: string;
        network: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeMarket(
      metaDefender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMarket(
    metaDefender: PromiseOrValue<string>,
    liquidityCertificate: PromiseOrValue<string>,
    policy: PromiseOrValue<string>,
    epochManage: PromiseOrValue<string>,
    marketName: PromiseOrValue<string>,
    marketDescription: PromiseOrValue<string>,
    marketPaymentToken: PromiseOrValue<string>,
    marketProtectionType: PromiseOrValue<string>,
    network: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInsuranceMarkets(overrides?: CallOverrides): Promise<[string[], string[]]>;

  getInsuranceMarketsAddressesAndMessages(
    insuranceMarketList: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [
      IMetaDefenderMarketsRegistry.MarketAddressesStructOutput[],
      IMetaDefenderMarketsRegistry.MarketMessagesStructOutput[]
    ]
  >;

  insuranceMarketsAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      liquidityCertificate: string;
      policy: string;
      epochManage: string;
    }
  >;

  insuranceMarketsMessages(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      marketName: string;
      marketDescription: string;
      marketPaymentToken: string;
      protectionType: string;
      network: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeMarket(
    metaDefender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMarket(
      metaDefender: PromiseOrValue<string>,
      liquidityCertificate: PromiseOrValue<string>,
      policy: PromiseOrValue<string>,
      epochManage: PromiseOrValue<string>,
      marketName: PromiseOrValue<string>,
      marketDescription: PromiseOrValue<string>,
      marketPaymentToken: PromiseOrValue<string>,
      marketProtectionType: PromiseOrValue<string>,
      network: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getInsuranceMarkets(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getInsuranceMarketsAddressesAndMessages(
      insuranceMarketList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        IMetaDefenderMarketsRegistry.MarketAddressesStructOutput[],
        IMetaDefenderMarketsRegistry.MarketMessagesStructOutput[]
      ]
    >;

    insuranceMarketsAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        liquidityCertificate: string;
        policy: string;
        epochManage: string;
      }
    >;

    insuranceMarketsMessages(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        marketName: string;
        marketDescription: string;
        marketPaymentToken: string;
        protectionType: string;
        network: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeMarket(
      metaDefender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MarketAdded(address,address,address,address,string,string,string,string,string)"(
      metaDefender?: null,
      liquidityCertificate?: null,
      policy?: null,
      epochManage?: null,
      marketName?: null,
      marketDescription?: null,
      marketPaymentToken?: null,
      marketProtectionType?: null,
      network?: null
    ): MarketAddedEventFilter;
    MarketAdded(
      metaDefender?: null,
      liquidityCertificate?: null,
      policy?: null,
      epochManage?: null,
      marketName?: null,
      marketDescription?: null,
      marketPaymentToken?: null,
      marketProtectionType?: null,
      network?: null
    ): MarketAddedEventFilter;

    "MarketRemoved(address)"(metaDefender?: null): MarketRemovedEventFilter;
    MarketRemoved(metaDefender?: null): MarketRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addMarket(
      metaDefender: PromiseOrValue<string>,
      liquidityCertificate: PromiseOrValue<string>,
      policy: PromiseOrValue<string>,
      epochManage: PromiseOrValue<string>,
      marketName: PromiseOrValue<string>,
      marketDescription: PromiseOrValue<string>,
      marketPaymentToken: PromiseOrValue<string>,
      marketProtectionType: PromiseOrValue<string>,
      network: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInsuranceMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceMarketsAddressesAndMessages(
      insuranceMarketList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insuranceMarketsAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insuranceMarketsMessages(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeMarket(
      metaDefender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMarket(
      metaDefender: PromiseOrValue<string>,
      liquidityCertificate: PromiseOrValue<string>,
      policy: PromiseOrValue<string>,
      epochManage: PromiseOrValue<string>,
      marketName: PromiseOrValue<string>,
      marketDescription: PromiseOrValue<string>,
      marketPaymentToken: PromiseOrValue<string>,
      marketProtectionType: PromiseOrValue<string>,
      network: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInsuranceMarkets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInsuranceMarketsAddressesAndMessages(
      insuranceMarketList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insuranceMarketsAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insuranceMarketsMessages(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMarket(
      metaDefender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
