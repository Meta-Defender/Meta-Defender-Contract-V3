/*! For license information please see index.js.LICENSE.txt */
(() => {
    var t = {
        9494: (t, e, r) => {
            "use strict";
            const n = r(7672), i = r(4817);
            t.exports = {
                atob: n,
                btoa: i
            };
        },
        7672: t => {
            "use strict";
            const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            function r(t) {
                const r = e.indexOf(t);
                return r < 0 ? void 0 : r;
            }
            t.exports = function(t) {
                if (0 === arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                if ((t = (t = `${t}`).replace(/[ \t\n\f\r]/g, "")).length % 4 == 0 && (t = t.replace(/==?$/, "")), 
                t.length % 4 == 1 || /[^+/0-9A-Za-z]/.test(t)) return null;
                let e = "", n = 0, i = 0;
                for (let o = 0; o < t.length; o++) n <<= 6, n |= r(t[o]), i += 6, 24 === i && (e += String.fromCharCode((16711680 & n) >> 16), 
                e += String.fromCharCode((65280 & n) >> 8), e += String.fromCharCode(255 & n), n = i = 0);
                return 12 === i ? (n >>= 4, e += String.fromCharCode(n)) : 18 === i && (n >>= 2, 
                e += String.fromCharCode((65280 & n) >> 8), e += String.fromCharCode(255 & n)), 
                e;
            };
        },
        4817: t => {
            "use strict";
            const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            function r(t) {
                if (t >= 0 && t < 64) return e[t];
            }
            t.exports = function(t) {
                if (0 === arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                let e;
                for (t = `${t}`, e = 0; e < t.length; e++) if (t.charCodeAt(e) > 255) return null;
                let n = "";
                for (e = 0; e < t.length; e += 3) {
                    const i = [ void 0, void 0, void 0, void 0 ];
                    i[0] = t.charCodeAt(e) >> 2, i[1] = (3 & t.charCodeAt(e)) << 4, t.length > e + 1 && (i[1] |= t.charCodeAt(e + 1) >> 4, 
                    i[2] = (15 & t.charCodeAt(e + 1)) << 2), t.length > e + 2 && (i[2] |= t.charCodeAt(e + 2) >> 6, 
                    i[3] = 63 & t.charCodeAt(e + 2));
                    for (let t = 0; t < i.length; t++) void 0 === i[t] ? n += "=" : n += r(i[t]);
                }
                return n;
            };
        },
        8826: function(t) {
            "use strict";
            !function(e) {
                function r(t) {
                    return parseInt(t) === t;
                }
                function n(t) {
                    if (!r(t.length)) return !1;
                    for (var e = 0; e < t.length; e++) if (!r(t[e]) || t[e] < 0 || t[e] > 255) return !1;
                    return !0;
                }
                function i(t, e) {
                    if (t.buffer && ArrayBuffer.isView(t) && "Uint8Array" === t.name) return e && (t = t.slice ? t.slice() : Array.prototype.slice.call(t)), 
                    t;
                    if (Array.isArray(t)) {
                        if (!n(t)) throw new Error("Array contains invalid value: " + t);
                        return new Uint8Array(t);
                    }
                    if (r(t.length) && n(t)) return new Uint8Array(t);
                    throw new Error("unsupported array-like object");
                }
                function o(t) {
                    return new Uint8Array(t);
                }
                function s(t, e, r, n, i) {
                    null == n && null == i || (t = t.slice ? t.slice(n, i) : Array.prototype.slice.call(t, n, i)), 
                    e.set(t, r);
                }
                var a, u = {
                    toBytes: function(t) {
                        var e = [], r = 0;
                        for (t = encodeURI(t); r < t.length; ) {
                            var n = t.charCodeAt(r++);
                            37 === n ? (e.push(parseInt(t.substr(r, 2), 16)), r += 2) : e.push(n);
                        }
                        return i(e);
                    },
                    fromBytes: function(t) {
                        for (var e = [], r = 0; r < t.length; ) {
                            var n = t[r];
                            n < 128 ? (e.push(String.fromCharCode(n)), r++) : n > 191 && n < 224 ? (e.push(String.fromCharCode((31 & n) << 6 | 63 & t[r + 1])), 
                            r += 2) : (e.push(String.fromCharCode((15 & n) << 12 | (63 & t[r + 1]) << 6 | 63 & t[r + 2])), 
                            r += 3);
                        }
                        return e.join("");
                    }
                }, l = (a = "0123456789abcdef", {
                    toBytes: function(t) {
                        for (var e = [], r = 0; r < t.length; r += 2) e.push(parseInt(t.substr(r, 2), 16));
                        return e;
                    },
                    fromBytes: function(t) {
                        for (var e = [], r = 0; r < t.length; r++) {
                            var n = t[r];
                            e.push(a[(240 & n) >> 4] + a[15 & n]);
                        }
                        return e.join("");
                    }
                }), c = {
                    16: 10,
                    24: 12,
                    32: 14
                }, h = [ 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145 ], f = [ 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 ], d = [ 82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125 ], p = [ 3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986 ], m = [ 2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766 ], g = [ 1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126 ], y = [ 1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436 ], v = [ 1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890 ], b = [ 1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935 ], w = [ 2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600 ], A = [ 4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480 ], _ = [ 0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795 ], E = [ 0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855 ], M = [ 0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150 ], P = [ 0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925 ];
                function k(t) {
                    for (var e = [], r = 0; r < t.length; r += 4) e.push(t[r] << 24 | t[r + 1] << 16 | t[r + 2] << 8 | t[r + 3]);
                    return e;
                }
                var S = function(t) {
                    if (!(this instanceof S)) throw Error("AES must be instanitated with `new`");
                    Object.defineProperty(this, "key", {
                        value: i(t, !0)
                    }), this._prepare();
                };
                S.prototype._prepare = function() {
                    var t = c[this.key.length];
                    if (null == t) throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
                    this._Ke = [], this._Kd = [];
                    for (var e = 0; e <= t; e++) this._Ke.push([ 0, 0, 0, 0 ]), this._Kd.push([ 0, 0, 0, 0 ]);
                    var r, n = 4 * (t + 1), i = this.key.length / 4, o = k(this.key);
                    for (e = 0; e < i; e++) r = e >> 2, this._Ke[r][e % 4] = o[e], this._Kd[t - r][e % 4] = o[e];
                    for (var s, a = 0, u = i; u < n; ) {
                        if (s = o[i - 1], o[0] ^= f[s >> 16 & 255] << 24 ^ f[s >> 8 & 255] << 16 ^ f[255 & s] << 8 ^ f[s >> 24 & 255] ^ h[a] << 24, 
                        a += 1, 8 != i) for (e = 1; e < i; e++) o[e] ^= o[e - 1]; else {
                            for (e = 1; e < i / 2; e++) o[e] ^= o[e - 1];
                            s = o[i / 2 - 1], o[i / 2] ^= f[255 & s] ^ f[s >> 8 & 255] << 8 ^ f[s >> 16 & 255] << 16 ^ f[s >> 24 & 255] << 24;
                            for (e = i / 2 + 1; e < i; e++) o[e] ^= o[e - 1];
                        }
                        for (e = 0; e < i && u < n; ) l = u >> 2, d = u % 4, this._Ke[l][d] = o[e], this._Kd[t - l][d] = o[e++], 
                        u++;
                    }
                    for (var l = 1; l < t; l++) for (var d = 0; d < 4; d++) s = this._Kd[l][d], this._Kd[l][d] = _[s >> 24 & 255] ^ E[s >> 16 & 255] ^ M[s >> 8 & 255] ^ P[255 & s];
                }, S.prototype.encrypt = function(t) {
                    if (16 != t.length) throw new Error("invalid plaintext size (must be 16 bytes)");
                    for (var e = this._Ke.length - 1, r = [ 0, 0, 0, 0 ], n = k(t), i = 0; i < 4; i++) n[i] ^= this._Ke[0][i];
                    for (var s = 1; s < e; s++) {
                        for (i = 0; i < 4; i++) r[i] = p[n[i] >> 24 & 255] ^ m[n[(i + 1) % 4] >> 16 & 255] ^ g[n[(i + 2) % 4] >> 8 & 255] ^ y[255 & n[(i + 3) % 4]] ^ this._Ke[s][i];
                        n = r.slice();
                    }
                    var a, u = o(16);
                    for (i = 0; i < 4; i++) a = this._Ke[e][i], u[4 * i] = 255 & (f[n[i] >> 24 & 255] ^ a >> 24), 
                    u[4 * i + 1] = 255 & (f[n[(i + 1) % 4] >> 16 & 255] ^ a >> 16), u[4 * i + 2] = 255 & (f[n[(i + 2) % 4] >> 8 & 255] ^ a >> 8), 
                    u[4 * i + 3] = 255 & (f[255 & n[(i + 3) % 4]] ^ a);
                    return u;
                }, S.prototype.decrypt = function(t) {
                    if (16 != t.length) throw new Error("invalid ciphertext size (must be 16 bytes)");
                    for (var e = this._Kd.length - 1, r = [ 0, 0, 0, 0 ], n = k(t), i = 0; i < 4; i++) n[i] ^= this._Kd[0][i];
                    for (var s = 1; s < e; s++) {
                        for (i = 0; i < 4; i++) r[i] = v[n[i] >> 24 & 255] ^ b[n[(i + 3) % 4] >> 16 & 255] ^ w[n[(i + 2) % 4] >> 8 & 255] ^ A[255 & n[(i + 1) % 4]] ^ this._Kd[s][i];
                        n = r.slice();
                    }
                    var a, u = o(16);
                    for (i = 0; i < 4; i++) a = this._Kd[e][i], u[4 * i] = 255 & (d[n[i] >> 24 & 255] ^ a >> 24), 
                    u[4 * i + 1] = 255 & (d[n[(i + 3) % 4] >> 16 & 255] ^ a >> 16), u[4 * i + 2] = 255 & (d[n[(i + 2) % 4] >> 8 & 255] ^ a >> 8), 
                    u[4 * i + 3] = 255 & (d[255 & n[(i + 1) % 4]] ^ a);
                    return u;
                };
                var O = function(t) {
                    if (!(this instanceof O)) throw Error("AES must be instanitated with `new`");
                    this.description = "Electronic Code Block", this.name = "ecb", this._aes = new S(t);
                };
                O.prototype.encrypt = function(t) {
                    if ((t = i(t)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
                    for (var e = o(t.length), r = o(16), n = 0; n < t.length; n += 16) s(t, r, 0, n, n + 16), 
                    s(r = this._aes.encrypt(r), e, n);
                    return e;
                }, O.prototype.decrypt = function(t) {
                    if ((t = i(t)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
                    for (var e = o(t.length), r = o(16), n = 0; n < t.length; n += 16) s(t, r, 0, n, n + 16), 
                    s(r = this._aes.decrypt(r), e, n);
                    return e;
                };
                var N = function(t, e) {
                    if (!(this instanceof N)) throw Error("AES must be instanitated with `new`");
                    if (this.description = "Cipher Block Chaining", this.name = "cbc", e) {
                        if (16 != e.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
                    } else e = o(16);
                    this._lastCipherblock = i(e, !0), this._aes = new S(t);
                };
                N.prototype.encrypt = function(t) {
                    if ((t = i(t)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
                    for (var e = o(t.length), r = o(16), n = 0; n < t.length; n += 16) {
                        s(t, r, 0, n, n + 16);
                        for (var a = 0; a < 16; a++) r[a] ^= this._lastCipherblock[a];
                        this._lastCipherblock = this._aes.encrypt(r), s(this._lastCipherblock, e, n);
                    }
                    return e;
                }, N.prototype.decrypt = function(t) {
                    if ((t = i(t)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
                    for (var e = o(t.length), r = o(16), n = 0; n < t.length; n += 16) {
                        s(t, r, 0, n, n + 16), r = this._aes.decrypt(r);
                        for (var a = 0; a < 16; a++) e[n + a] = r[a] ^ this._lastCipherblock[a];
                        s(t, this._lastCipherblock, 0, n, n + 16);
                    }
                    return e;
                };
                var x = function(t, e, r) {
                    if (!(this instanceof x)) throw Error("AES must be instanitated with `new`");
                    if (this.description = "Cipher Feedback", this.name = "cfb", e) {
                        if (16 != e.length) throw new Error("invalid initialation vector size (must be 16 size)");
                    } else e = o(16);
                    r || (r = 1), this.segmentSize = r, this._shiftRegister = i(e, !0), this._aes = new S(t);
                };
                x.prototype.encrypt = function(t) {
                    if (t.length % this.segmentSize != 0) throw new Error("invalid plaintext size (must be segmentSize bytes)");
                    for (var e, r = i(t, !0), n = 0; n < r.length; n += this.segmentSize) {
                        e = this._aes.encrypt(this._shiftRegister);
                        for (var o = 0; o < this.segmentSize; o++) r[n + o] ^= e[o];
                        s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(r, this._shiftRegister, 16 - this.segmentSize, n, n + this.segmentSize);
                    }
                    return r;
                }, x.prototype.decrypt = function(t) {
                    if (t.length % this.segmentSize != 0) throw new Error("invalid ciphertext size (must be segmentSize bytes)");
                    for (var e, r = i(t, !0), n = 0; n < r.length; n += this.segmentSize) {
                        e = this._aes.encrypt(this._shiftRegister);
                        for (var o = 0; o < this.segmentSize; o++) r[n + o] ^= e[o];
                        s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(t, this._shiftRegister, 16 - this.segmentSize, n, n + this.segmentSize);
                    }
                    return r;
                };
                var I = function(t, e) {
                    if (!(this instanceof I)) throw Error("AES must be instanitated with `new`");
                    if (this.description = "Output Feedback", this.name = "ofb", e) {
                        if (16 != e.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
                    } else e = o(16);
                    this._lastPrecipher = i(e, !0), this._lastPrecipherIndex = 16, this._aes = new S(t);
                };
                I.prototype.encrypt = function(t) {
                    for (var e = i(t, !0), r = 0; r < e.length; r++) 16 === this._lastPrecipherIndex && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), 
                    this._lastPrecipherIndex = 0), e[r] ^= this._lastPrecipher[this._lastPrecipherIndex++];
                    return e;
                }, I.prototype.decrypt = I.prototype.encrypt;
                var T = function(t) {
                    if (!(this instanceof T)) throw Error("Counter must be instanitated with `new`");
                    0 === t || t || (t = 1), "number" == typeof t ? (this._counter = o(16), this.setValue(t)) : this.setBytes(t);
                };
                T.prototype.setValue = function(t) {
                    if ("number" != typeof t || parseInt(t) != t) throw new Error("invalid counter value (must be an integer)");
                    for (var e = 15; e >= 0; --e) this._counter[e] = t % 256, t >>= 8;
                }, T.prototype.setBytes = function(t) {
                    if (16 != (t = i(t, !0)).length) throw new Error("invalid counter bytes size (must be 16 bytes)");
                    this._counter = t;
                }, T.prototype.increment = function() {
                    for (var t = 15; t >= 0; t--) {
                        if (255 !== this._counter[t]) {
                            this._counter[t]++;
                            break;
                        }
                        this._counter[t] = 0;
                    }
                };
                var B = function(t, e) {
                    if (!(this instanceof B)) throw Error("AES must be instanitated with `new`");
                    this.description = "Counter", this.name = "ctr", e instanceof T || (e = new T(e)), 
                    this._counter = e, this._remainingCounter = null, this._remainingCounterIndex = 16, 
                    this._aes = new S(t);
                };
                B.prototype.encrypt = function(t) {
                    for (var e = i(t, !0), r = 0; r < e.length; r++) 16 === this._remainingCounterIndex && (this._remainingCounter = this._aes.encrypt(this._counter._counter), 
                    this._remainingCounterIndex = 0, this._counter.increment()), e[r] ^= this._remainingCounter[this._remainingCounterIndex++];
                    return e;
                }, B.prototype.decrypt = B.prototype.encrypt;
                var C = {
                    AES: S,
                    Counter: T,
                    ModeOfOperation: {
                        ecb: O,
                        cbc: N,
                        cfb: x,
                        ofb: I,
                        ctr: B
                    },
                    utils: {
                        hex: l,
                        utf8: u
                    },
                    padding: {
                        pkcs7: {
                            pad: function(t) {
                                var e = 16 - (t = i(t, !0)).length % 16, r = o(t.length + e);
                                s(t, r);
                                for (var n = t.length; n < r.length; n++) r[n] = e;
                                return r;
                            },
                            strip: function(t) {
                                if ((t = i(t, !0)).length < 16) throw new Error("PKCS#7 invalid length");
                                var e = t[t.length - 1];
                                if (e > 16) throw new Error("PKCS#7 padding byte out of range");
                                for (var r = t.length - e, n = 0; n < e; n++) if (t[r + n] !== e) throw new Error("PKCS#7 invalid padding byte");
                                var a = o(r);
                                return s(t, a, 0, 0, r), a;
                            }
                        }
                    },
                    _arrayTest: {
                        coerceArray: i,
                        createArray: o,
                        copyArray: s
                    }
                };
                t.exports = C;
            }();
        },
        2882: t => {
            "use strict";
            for (var e = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", r = {}, n = 0; n < 32; n++) {
                var i = e.charAt(n);
                if (void 0 !== r[i]) throw new TypeError(i + " is ambiguous");
                r[i] = n;
            }
            function o(t) {
                var e = t >> 25;
                return (33554431 & t) << 5 ^ 996825010 & -(e >> 0 & 1) ^ 642813549 & -(e >> 1 & 1) ^ 513874426 & -(e >> 2 & 1) ^ 1027748829 & -(e >> 3 & 1) ^ 705979059 & -(e >> 4 & 1);
            }
            function s(t) {
                for (var e = 1, r = 0; r < t.length; ++r) {
                    var n = t.charCodeAt(r);
                    if (n < 33 || n > 126) return "Invalid prefix (" + t + ")";
                    e = o(e) ^ n >> 5;
                }
                for (e = o(e), r = 0; r < t.length; ++r) {
                    var i = t.charCodeAt(r);
                    e = o(e) ^ 31 & i;
                }
                return e;
            }
            function a(t, e) {
                if (e = e || 90, t.length < 8) return t + " too short";
                if (t.length > e) return "Exceeds length limit";
                var n = t.toLowerCase(), i = t.toUpperCase();
                if (t !== n && t !== i) return "Mixed-case string " + t;
                var a = (t = n).lastIndexOf("1");
                if (-1 === a) return "No separator character for " + t;
                if (0 === a) return "Missing prefix for " + t;
                var u = t.slice(0, a), l = t.slice(a + 1);
                if (l.length < 6) return "Data too short";
                var c = s(u);
                if ("string" == typeof c) return c;
                for (var h = [], f = 0; f < l.length; ++f) {
                    var d = l.charAt(f), p = r[d];
                    if (void 0 === p) return "Unknown character " + d;
                    c = o(c) ^ p, f + 6 >= l.length || h.push(p);
                }
                return 1 !== c ? "Invalid checksum for " + t : {
                    prefix: u,
                    words: h
                };
            }
            function u(t, e, r, n) {
                for (var i = 0, o = 0, s = (1 << r) - 1, a = [], u = 0; u < t.length; ++u) for (i = i << e | t[u], 
                o += e; o >= r; ) o -= r, a.push(i >> o & s);
                if (n) o > 0 && a.push(i << r - o & s); else {
                    if (o >= e) return "Excess padding";
                    if (i << r - o & s) return "Non-zero padding";
                }
                return a;
            }
            t.exports = {
                decodeUnsafe: function() {
                    var t = a.apply(null, arguments);
                    if ("object" == typeof t) return t;
                },
                decode: function(t) {
                    var e = a.apply(null, arguments);
                    if ("object" == typeof e) return e;
                    throw new Error(e);
                },
                encode: function(t, r, n) {
                    if (n = n || 90, t.length + 7 + r.length > n) throw new TypeError("Exceeds length limit");
                    var i = s(t = t.toLowerCase());
                    if ("string" == typeof i) throw new Error(i);
                    for (var a = t + "1", u = 0; u < r.length; ++u) {
                        var l = r[u];
                        if (l >> 5 != 0) throw new Error("Non 5-bit word");
                        i = o(i) ^ l, a += e.charAt(l);
                    }
                    for (u = 0; u < 6; ++u) i = o(i);
                    for (i ^= 1, u = 0; u < 6; ++u) {
                        a += e.charAt(i >> 5 * (5 - u) & 31);
                    }
                    return a;
                },
                toWordsUnsafe: function(t) {
                    var e = u(t, 8, 5, !0);
                    if (Array.isArray(e)) return e;
                },
                toWords: function(t) {
                    var e = u(t, 8, 5, !0);
                    if (Array.isArray(e)) return e;
                    throw new Error(e);
                },
                fromWordsUnsafe: function(t) {
                    var e = u(t, 5, 8, !1);
                    if (Array.isArray(e)) return e;
                },
                fromWords: function(t) {
                    var e = u(t, 5, 8, !1);
                    if (Array.isArray(e)) return e;
                    throw new Error(e);
                }
            };
        },
        3550: function(t, e, r) {
            !function(t, e) {
                "use strict";
                function n(t, e) {
                    if (!t) throw new Error(e || "Assertion failed");
                }
                function i(t, e) {
                    t.super_ = e;
                    var r = function() {};
                    r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
                }
                function o(t, e, r) {
                    if (o.isBN(t)) return t;
                    this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ("le" !== e && "be" !== e || (r = e, 
                    e = 10), this._init(t || 0, e || 10, r || "be"));
                }
                var s;
                "object" == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
                try {
                    s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(4300).Buffer;
                } catch (t) {}
                function a(t, e) {
                    var r = t.charCodeAt(e);
                    return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void n(!1, "Invalid character in " + t);
                }
                function u(t, e, r) {
                    var n = a(t, r);
                    return r - 1 >= e && (n |= a(t, r - 1) << 4), n;
                }
                function l(t, e, r, i) {
                    for (var o = 0, s = 0, a = Math.min(t.length, r), u = e; u < a; u++) {
                        var l = t.charCodeAt(u) - 48;
                        o *= i, s = l >= 49 ? l - 49 + 10 : l >= 17 ? l - 17 + 10 : l, n(l >= 0 && s < i, "Invalid character"), 
                        o += s;
                    }
                    return o;
                }
                function c(t, e) {
                    t.words = e.words, t.length = e.length, t.negative = e.negative, t.red = e.red;
                }
                if (o.isBN = function(t) {
                    return t instanceof o || null !== t && "object" == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
                }, o.max = function(t, e) {
                    return t.cmp(e) > 0 ? t : e;
                }, o.min = function(t, e) {
                    return t.cmp(e) < 0 ? t : e;
                }, o.prototype._init = function(t, e, r) {
                    if ("number" == typeof t) return this._initNumber(t, e, r);
                    if ("object" == typeof t) return this._initArray(t, e, r);
                    "hex" === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
                    var i = 0;
                    "-" === (t = t.toString().replace(/\s+/g, ""))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
                    "le" === r && this._initArray(this.toArray(), e, r)));
                }, o.prototype._initNumber = function(t, e, r) {
                    t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], 
                    this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
                    this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], 
                    this.length = 3), "le" === r && this._initArray(this.toArray(), e, r);
                }, o.prototype._initArray = function(t, e, r) {
                    if (n("number" == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, 
                    this;
                    this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
                    for (var i = 0; i < this.length; i++) this.words[i] = 0;
                    var o, s, a = 0;
                    if ("be" === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) s = t[i] | t[i - 1] << 8 | t[i - 2] << 16, 
                    this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, 
                    (a += 24) >= 26 && (a -= 26, o++); else if ("le" === r) for (i = 0, o = 0; i < t.length; i += 3) s = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
                    this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, 
                    (a += 24) >= 26 && (a -= 26, o++);
                    return this._strip();
                }, o.prototype._parseHex = function(t, e, r) {
                    this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
                    for (var n = 0; n < this.length; n++) this.words[n] = 0;
                    var i, o = 0, s = 0;
                    if ("be" === r) for (n = t.length - 1; n >= e; n -= 2) i = u(t, e, n) << o, this.words[s] |= 67108863 & i, 
                    o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) i = u(t, e, n) << o, 
                    this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8;
                    this._strip();
                }, o.prototype._parseBase = function(t, e, r) {
                    this.words = [ 0 ], this.length = 1;
                    for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
                    n--, i = i / e | 0;
                    for (var o = t.length - r, s = o % n, a = Math.min(o, o - s) + r, u = 0, c = r; c < a; c += n) u = l(t, c, c + n, e), 
                    this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                    if (0 !== s) {
                        var h = 1;
                        for (u = l(t, c, t.length, e), c = 0; c < s; c++) h *= e;
                        this.imuln(h), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                    }
                    this._strip();
                }, o.prototype.copy = function(t) {
                    t.words = new Array(this.length);
                    for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
                    t.length = this.length, t.negative = this.negative, t.red = this.red;
                }, o.prototype._move = function(t) {
                    c(t, this);
                }, o.prototype.clone = function() {
                    var t = new o(null);
                    return this.copy(t), t;
                }, o.prototype._expand = function(t) {
                    for (;this.length < t; ) this.words[this.length++] = 0;
                    return this;
                }, o.prototype._strip = function() {
                    for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
                    return this._normSign();
                }, o.prototype._normSign = function() {
                    return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
                }, "undefined" != typeof Symbol && "function" == typeof Symbol.for) try {
                    o.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
                } catch (t) {
                    o.prototype.inspect = h;
                } else o.prototype.inspect = h;
                function h() {
                    return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                }
                var f = [ "", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000" ], d = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ], p = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
                o.prototype.toString = function(t, e) {
                    var r;
                    if (e = 0 | e || 1, 16 === (t = t || 10) || "hex" === t) {
                        r = "";
                        for (var i = 0, o = 0, s = 0; s < this.length; s++) {
                            var a = this.words[s], u = (16777215 & (a << i | o)).toString(16);
                            o = a >>> 24 - i & 16777215, (i += 2) >= 26 && (i -= 26, s--), r = 0 !== o || s !== this.length - 1 ? f[6 - u.length] + u + r : u + r;
                        }
                        for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = "0" + r;
                        return 0 !== this.negative && (r = "-" + r), r;
                    }
                    if (t === (0 | t) && t >= 2 && t <= 36) {
                        var l = d[t], c = p[t];
                        r = "";
                        var h = this.clone();
                        for (h.negative = 0; !h.isZero(); ) {
                            var m = h.modrn(c).toString(t);
                            r = (h = h.idivn(c)).isZero() ? m + r : f[l - m.length] + m + r;
                        }
                        for (this.isZero() && (r = "0" + r); r.length % e != 0; ) r = "0" + r;
                        return 0 !== this.negative && (r = "-" + r), r;
                    }
                    n(!1, "Base should be between 2 and 36");
                }, o.prototype.toNumber = function() {
                    var t = this.words[0];
                    return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), 
                    0 !== this.negative ? -t : t;
                }, o.prototype.toJSON = function() {
                    return this.toString(16, 2);
                }, s && (o.prototype.toBuffer = function(t, e) {
                    return this.toArrayLike(s, t, e);
                }), o.prototype.toArray = function(t, e) {
                    return this.toArrayLike(Array, t, e);
                };
                function m(t, e, r) {
                    r.negative = e.negative ^ t.negative;
                    var n = t.length + e.length | 0;
                    r.length = n, n = n - 1 | 0;
                    var i = 0 | t.words[0], o = 0 | e.words[0], s = i * o, a = 67108863 & s, u = s / 67108864 | 0;
                    r.words[0] = a;
                    for (var l = 1; l < n; l++) {
                        for (var c = u >>> 26, h = 67108863 & u, f = Math.min(l, e.length - 1), d = Math.max(0, l - t.length + 1); d <= f; d++) {
                            var p = l - d | 0;
                            c += (s = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + h) / 67108864 | 0, h = 67108863 & s;
                        }
                        r.words[l] = 0 | h, u = 0 | c;
                    }
                    return 0 !== u ? r.words[l] = 0 | u : r.length--, r._strip();
                }
                o.prototype.toArrayLike = function(t, e, r) {
                    this._strip();
                    var i = this.byteLength(), o = r || Math.max(1, i);
                    n(i <= o, "byte array longer than desired length"), n(o > 0, "Requested array length <= 0");
                    var s = function(t, e) {
                        return t.allocUnsafe ? t.allocUnsafe(e) : new t(e);
                    }(t, o);
                    return this["_toArrayLike" + ("le" === e ? "LE" : "BE")](s, i), s;
                }, o.prototype._toArrayLikeLE = function(t, e) {
                    for (var r = 0, n = 0, i = 0, o = 0; i < this.length; i++) {
                        var s = this.words[i] << o | n;
                        t[r++] = 255 & s, r < t.length && (t[r++] = s >> 8 & 255), r < t.length && (t[r++] = s >> 16 & 255), 
                        6 === o ? (r < t.length && (t[r++] = s >> 24 & 255), n = 0, o = 0) : (n = s >>> 24, 
                        o += 2);
                    }
                    if (r < t.length) for (t[r++] = n; r < t.length; ) t[r++] = 0;
                }, o.prototype._toArrayLikeBE = function(t, e) {
                    for (var r = t.length - 1, n = 0, i = 0, o = 0; i < this.length; i++) {
                        var s = this.words[i] << o | n;
                        t[r--] = 255 & s, r >= 0 && (t[r--] = s >> 8 & 255), r >= 0 && (t[r--] = s >> 16 & 255), 
                        6 === o ? (r >= 0 && (t[r--] = s >> 24 & 255), n = 0, o = 0) : (n = s >>> 24, o += 2);
                    }
                    if (r >= 0) for (t[r--] = n; r >= 0; ) t[r--] = 0;
                }, Math.clz32 ? o.prototype._countBits = function(t) {
                    return 32 - Math.clz32(t);
                } : o.prototype._countBits = function(t) {
                    var e = t, r = 0;
                    return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, 
                    e >>>= 4), e >= 2 && (r += 2, e >>>= 2), r + e;
                }, o.prototype._zeroBits = function(t) {
                    if (0 === t) return 26;
                    var e = t, r = 0;
                    return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 
                    0 == (15 & e) && (r += 4, e >>>= 4), 0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, 
                    r;
                }, o.prototype.bitLength = function() {
                    var t = this.words[this.length - 1], e = this._countBits(t);
                    return 26 * (this.length - 1) + e;
                }, o.prototype.zeroBits = function() {
                    if (this.isZero()) return 0;
                    for (var t = 0, e = 0; e < this.length; e++) {
                        var r = this._zeroBits(this.words[e]);
                        if (t += r, 26 !== r) break;
                    }
                    return t;
                }, o.prototype.byteLength = function() {
                    return Math.ceil(this.bitLength() / 8);
                }, o.prototype.toTwos = function(t) {
                    return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
                }, o.prototype.fromTwos = function(t) {
                    return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
                }, o.prototype.isNeg = function() {
                    return 0 !== this.negative;
                }, o.prototype.neg = function() {
                    return this.clone().ineg();
                }, o.prototype.ineg = function() {
                    return this.isZero() || (this.negative ^= 1), this;
                }, o.prototype.iuor = function(t) {
                    for (;this.length < t.length; ) this.words[this.length++] = 0;
                    for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
                    return this._strip();
                }, o.prototype.ior = function(t) {
                    return n(0 == (this.negative | t.negative)), this.iuor(t);
                }, o.prototype.or = function(t) {
                    return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
                }, o.prototype.uor = function(t) {
                    return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
                }, o.prototype.iuand = function(t) {
                    var e;
                    e = this.length > t.length ? t : this;
                    for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
                    return this.length = e.length, this._strip();
                }, o.prototype.iand = function(t) {
                    return n(0 == (this.negative | t.negative)), this.iuand(t);
                }, o.prototype.and = function(t) {
                    return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
                }, o.prototype.uand = function(t) {
                    return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
                }, o.prototype.iuxor = function(t) {
                    var e, r;
                    this.length > t.length ? (e = this, r = t) : (e = t, r = this);
                    for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
                    if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
                    return this.length = e.length, this._strip();
                }, o.prototype.ixor = function(t) {
                    return n(0 == (this.negative | t.negative)), this.iuxor(t);
                }, o.prototype.xor = function(t) {
                    return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
                }, o.prototype.uxor = function(t) {
                    return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
                }, o.prototype.inotn = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e = 0 | Math.ceil(t / 26), r = t % 26;
                    this._expand(e), r > 0 && e--;
                    for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
                    return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this._strip();
                }, o.prototype.notn = function(t) {
                    return this.clone().inotn(t);
                }, o.prototype.setn = function(t, e) {
                    n("number" == typeof t && t >= 0);
                    var r = t / 26 | 0, i = t % 26;
                    return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), 
                    this._strip();
                }, o.prototype.iadd = function(t) {
                    var e, r, n;
                    if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), 
                    this.negative ^= 1, this._normSign();
                    if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), 
                    t.negative = 1, e._normSign();
                    this.length > t.length ? (r = this, n = t) : (r = t, n = this);
                    for (var i = 0, o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, 
                    this.words[o] = 67108863 & e, i = e >>> 26;
                    for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, 
                    i = e >>> 26;
                    if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
                    return this;
                }, o.prototype.add = function(t) {
                    var e;
                    return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), 
                    t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
                    e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
                }, o.prototype.isub = function(t) {
                    if (0 !== t.negative) {
                        t.negative = 0;
                        var e = this.iadd(t);
                        return t.negative = 1, e._normSign();
                    }
                    if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, 
                    this._normSign();
                    var r, n, i = this.cmp(t);
                    if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
                    i > 0 ? (r = this, n = t) : (r = t, n = this);
                    for (var o = 0, s = 0; s < n.length; s++) o = (e = (0 | r.words[s]) - (0 | n.words[s]) + o) >> 26, 
                    this.words[s] = 67108863 & e;
                    for (;0 !== o && s < r.length; s++) o = (e = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & e;
                    if (0 === o && s < r.length && r !== this) for (;s < r.length; s++) this.words[s] = r.words[s];
                    return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), 
                    this._strip();
                }, o.prototype.sub = function(t) {
                    return this.clone().isub(t);
                };
                var g = function(t, e, r) {
                    var n, i, o, s = t.words, a = e.words, u = r.words, l = 0, c = 0 | s[0], h = 8191 & c, f = c >>> 13, d = 0 | s[1], p = 8191 & d, m = d >>> 13, g = 0 | s[2], y = 8191 & g, v = g >>> 13, b = 0 | s[3], w = 8191 & b, A = b >>> 13, _ = 0 | s[4], E = 8191 & _, M = _ >>> 13, P = 0 | s[5], k = 8191 & P, S = P >>> 13, O = 0 | s[6], N = 8191 & O, x = O >>> 13, I = 0 | s[7], T = 8191 & I, B = I >>> 13, C = 0 | s[8], R = 8191 & C, j = C >>> 13, F = 0 | s[9], U = 8191 & F, L = F >>> 13, D = 0 | a[0], G = 8191 & D, q = D >>> 13, z = 0 | a[1], H = 8191 & z, K = z >>> 13, W = 0 | a[2], V = 8191 & W, J = W >>> 13, Q = 0 | a[3], X = 8191 & Q, Y = Q >>> 13, Z = 0 | a[4], $ = 8191 & Z, tt = Z >>> 13, et = 0 | a[5], rt = 8191 & et, nt = et >>> 13, it = 0 | a[6], ot = 8191 & it, st = it >>> 13, at = 0 | a[7], ut = 8191 & at, lt = at >>> 13, ct = 0 | a[8], ht = 8191 & ct, ft = ct >>> 13, dt = 0 | a[9], pt = 8191 & dt, mt = dt >>> 13;
                    r.negative = t.negative ^ e.negative, r.length = 19;
                    var gt = (l + (n = Math.imul(h, G)) | 0) + ((8191 & (i = (i = Math.imul(h, q)) + Math.imul(f, G) | 0)) << 13) | 0;
                    l = ((o = Math.imul(f, q)) + (i >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, 
                    n = Math.imul(p, G), i = (i = Math.imul(p, q)) + Math.imul(m, G) | 0, o = Math.imul(m, q);
                    var yt = (l + (n = n + Math.imul(h, H) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, K) | 0) + Math.imul(f, H) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, K) | 0) + (i >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, 
                    n = Math.imul(y, G), i = (i = Math.imul(y, q)) + Math.imul(v, G) | 0, o = Math.imul(v, q), 
                    n = n + Math.imul(p, H) | 0, i = (i = i + Math.imul(p, K) | 0) + Math.imul(m, H) | 0, 
                    o = o + Math.imul(m, K) | 0;
                    var vt = (l + (n = n + Math.imul(h, V) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, J) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, J) | 0) + (i >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, 
                    n = Math.imul(w, G), i = (i = Math.imul(w, q)) + Math.imul(A, G) | 0, o = Math.imul(A, q), 
                    n = n + Math.imul(y, H) | 0, i = (i = i + Math.imul(y, K) | 0) + Math.imul(v, H) | 0, 
                    o = o + Math.imul(v, K) | 0, n = n + Math.imul(p, V) | 0, i = (i = i + Math.imul(p, J) | 0) + Math.imul(m, V) | 0, 
                    o = o + Math.imul(m, J) | 0;
                    var bt = (l + (n = n + Math.imul(h, X) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, Y) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, Y) | 0) + (i >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, 
                    n = Math.imul(E, G), i = (i = Math.imul(E, q)) + Math.imul(M, G) | 0, o = Math.imul(M, q), 
                    n = n + Math.imul(w, H) | 0, i = (i = i + Math.imul(w, K) | 0) + Math.imul(A, H) | 0, 
                    o = o + Math.imul(A, K) | 0, n = n + Math.imul(y, V) | 0, i = (i = i + Math.imul(y, J) | 0) + Math.imul(v, V) | 0, 
                    o = o + Math.imul(v, J) | 0, n = n + Math.imul(p, X) | 0, i = (i = i + Math.imul(p, Y) | 0) + Math.imul(m, X) | 0, 
                    o = o + Math.imul(m, Y) | 0;
                    var wt = (l + (n = n + Math.imul(h, $) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, tt) | 0) + Math.imul(f, $) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, tt) | 0) + (i >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, 
                    n = Math.imul(k, G), i = (i = Math.imul(k, q)) + Math.imul(S, G) | 0, o = Math.imul(S, q), 
                    n = n + Math.imul(E, H) | 0, i = (i = i + Math.imul(E, K) | 0) + Math.imul(M, H) | 0, 
                    o = o + Math.imul(M, K) | 0, n = n + Math.imul(w, V) | 0, i = (i = i + Math.imul(w, J) | 0) + Math.imul(A, V) | 0, 
                    o = o + Math.imul(A, J) | 0, n = n + Math.imul(y, X) | 0, i = (i = i + Math.imul(y, Y) | 0) + Math.imul(v, X) | 0, 
                    o = o + Math.imul(v, Y) | 0, n = n + Math.imul(p, $) | 0, i = (i = i + Math.imul(p, tt) | 0) + Math.imul(m, $) | 0, 
                    o = o + Math.imul(m, tt) | 0;
                    var At = (l + (n = n + Math.imul(h, rt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, nt) | 0) + (i >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, 
                    n = Math.imul(N, G), i = (i = Math.imul(N, q)) + Math.imul(x, G) | 0, o = Math.imul(x, q), 
                    n = n + Math.imul(k, H) | 0, i = (i = i + Math.imul(k, K) | 0) + Math.imul(S, H) | 0, 
                    o = o + Math.imul(S, K) | 0, n = n + Math.imul(E, V) | 0, i = (i = i + Math.imul(E, J) | 0) + Math.imul(M, V) | 0, 
                    o = o + Math.imul(M, J) | 0, n = n + Math.imul(w, X) | 0, i = (i = i + Math.imul(w, Y) | 0) + Math.imul(A, X) | 0, 
                    o = o + Math.imul(A, Y) | 0, n = n + Math.imul(y, $) | 0, i = (i = i + Math.imul(y, tt) | 0) + Math.imul(v, $) | 0, 
                    o = o + Math.imul(v, tt) | 0, n = n + Math.imul(p, rt) | 0, i = (i = i + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, 
                    o = o + Math.imul(m, nt) | 0;
                    var _t = (l + (n = n + Math.imul(h, ot) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, st) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, st) | 0) + (i >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, 
                    n = Math.imul(T, G), i = (i = Math.imul(T, q)) + Math.imul(B, G) | 0, o = Math.imul(B, q), 
                    n = n + Math.imul(N, H) | 0, i = (i = i + Math.imul(N, K) | 0) + Math.imul(x, H) | 0, 
                    o = o + Math.imul(x, K) | 0, n = n + Math.imul(k, V) | 0, i = (i = i + Math.imul(k, J) | 0) + Math.imul(S, V) | 0, 
                    o = o + Math.imul(S, J) | 0, n = n + Math.imul(E, X) | 0, i = (i = i + Math.imul(E, Y) | 0) + Math.imul(M, X) | 0, 
                    o = o + Math.imul(M, Y) | 0, n = n + Math.imul(w, $) | 0, i = (i = i + Math.imul(w, tt) | 0) + Math.imul(A, $) | 0, 
                    o = o + Math.imul(A, tt) | 0, n = n + Math.imul(y, rt) | 0, i = (i = i + Math.imul(y, nt) | 0) + Math.imul(v, rt) | 0, 
                    o = o + Math.imul(v, nt) | 0, n = n + Math.imul(p, ot) | 0, i = (i = i + Math.imul(p, st) | 0) + Math.imul(m, ot) | 0, 
                    o = o + Math.imul(m, st) | 0;
                    var Et = (l + (n = n + Math.imul(h, ut) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, lt) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, lt) | 0) + (i >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, 
                    n = Math.imul(R, G), i = (i = Math.imul(R, q)) + Math.imul(j, G) | 0, o = Math.imul(j, q), 
                    n = n + Math.imul(T, H) | 0, i = (i = i + Math.imul(T, K) | 0) + Math.imul(B, H) | 0, 
                    o = o + Math.imul(B, K) | 0, n = n + Math.imul(N, V) | 0, i = (i = i + Math.imul(N, J) | 0) + Math.imul(x, V) | 0, 
                    o = o + Math.imul(x, J) | 0, n = n + Math.imul(k, X) | 0, i = (i = i + Math.imul(k, Y) | 0) + Math.imul(S, X) | 0, 
                    o = o + Math.imul(S, Y) | 0, n = n + Math.imul(E, $) | 0, i = (i = i + Math.imul(E, tt) | 0) + Math.imul(M, $) | 0, 
                    o = o + Math.imul(M, tt) | 0, n = n + Math.imul(w, rt) | 0, i = (i = i + Math.imul(w, nt) | 0) + Math.imul(A, rt) | 0, 
                    o = o + Math.imul(A, nt) | 0, n = n + Math.imul(y, ot) | 0, i = (i = i + Math.imul(y, st) | 0) + Math.imul(v, ot) | 0, 
                    o = o + Math.imul(v, st) | 0, n = n + Math.imul(p, ut) | 0, i = (i = i + Math.imul(p, lt) | 0) + Math.imul(m, ut) | 0, 
                    o = o + Math.imul(m, lt) | 0;
                    var Mt = (l + (n = n + Math.imul(h, ht) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ft) | 0) + Math.imul(f, ht) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, ft) | 0) + (i >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, 
                    n = Math.imul(U, G), i = (i = Math.imul(U, q)) + Math.imul(L, G) | 0, o = Math.imul(L, q), 
                    n = n + Math.imul(R, H) | 0, i = (i = i + Math.imul(R, K) | 0) + Math.imul(j, H) | 0, 
                    o = o + Math.imul(j, K) | 0, n = n + Math.imul(T, V) | 0, i = (i = i + Math.imul(T, J) | 0) + Math.imul(B, V) | 0, 
                    o = o + Math.imul(B, J) | 0, n = n + Math.imul(N, X) | 0, i = (i = i + Math.imul(N, Y) | 0) + Math.imul(x, X) | 0, 
                    o = o + Math.imul(x, Y) | 0, n = n + Math.imul(k, $) | 0, i = (i = i + Math.imul(k, tt) | 0) + Math.imul(S, $) | 0, 
                    o = o + Math.imul(S, tt) | 0, n = n + Math.imul(E, rt) | 0, i = (i = i + Math.imul(E, nt) | 0) + Math.imul(M, rt) | 0, 
                    o = o + Math.imul(M, nt) | 0, n = n + Math.imul(w, ot) | 0, i = (i = i + Math.imul(w, st) | 0) + Math.imul(A, ot) | 0, 
                    o = o + Math.imul(A, st) | 0, n = n + Math.imul(y, ut) | 0, i = (i = i + Math.imul(y, lt) | 0) + Math.imul(v, ut) | 0, 
                    o = o + Math.imul(v, lt) | 0, n = n + Math.imul(p, ht) | 0, i = (i = i + Math.imul(p, ft) | 0) + Math.imul(m, ht) | 0, 
                    o = o + Math.imul(m, ft) | 0;
                    var Pt = (l + (n = n + Math.imul(h, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, mt) | 0) + (i >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, 
                    n = Math.imul(U, H), i = (i = Math.imul(U, K)) + Math.imul(L, H) | 0, o = Math.imul(L, K), 
                    n = n + Math.imul(R, V) | 0, i = (i = i + Math.imul(R, J) | 0) + Math.imul(j, V) | 0, 
                    o = o + Math.imul(j, J) | 0, n = n + Math.imul(T, X) | 0, i = (i = i + Math.imul(T, Y) | 0) + Math.imul(B, X) | 0, 
                    o = o + Math.imul(B, Y) | 0, n = n + Math.imul(N, $) | 0, i = (i = i + Math.imul(N, tt) | 0) + Math.imul(x, $) | 0, 
                    o = o + Math.imul(x, tt) | 0, n = n + Math.imul(k, rt) | 0, i = (i = i + Math.imul(k, nt) | 0) + Math.imul(S, rt) | 0, 
                    o = o + Math.imul(S, nt) | 0, n = n + Math.imul(E, ot) | 0, i = (i = i + Math.imul(E, st) | 0) + Math.imul(M, ot) | 0, 
                    o = o + Math.imul(M, st) | 0, n = n + Math.imul(w, ut) | 0, i = (i = i + Math.imul(w, lt) | 0) + Math.imul(A, ut) | 0, 
                    o = o + Math.imul(A, lt) | 0, n = n + Math.imul(y, ht) | 0, i = (i = i + Math.imul(y, ft) | 0) + Math.imul(v, ht) | 0, 
                    o = o + Math.imul(v, ft) | 0;
                    var kt = (l + (n = n + Math.imul(p, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(m, mt) | 0) + (i >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, 
                    n = Math.imul(U, V), i = (i = Math.imul(U, J)) + Math.imul(L, V) | 0, o = Math.imul(L, J), 
                    n = n + Math.imul(R, X) | 0, i = (i = i + Math.imul(R, Y) | 0) + Math.imul(j, X) | 0, 
                    o = o + Math.imul(j, Y) | 0, n = n + Math.imul(T, $) | 0, i = (i = i + Math.imul(T, tt) | 0) + Math.imul(B, $) | 0, 
                    o = o + Math.imul(B, tt) | 0, n = n + Math.imul(N, rt) | 0, i = (i = i + Math.imul(N, nt) | 0) + Math.imul(x, rt) | 0, 
                    o = o + Math.imul(x, nt) | 0, n = n + Math.imul(k, ot) | 0, i = (i = i + Math.imul(k, st) | 0) + Math.imul(S, ot) | 0, 
                    o = o + Math.imul(S, st) | 0, n = n + Math.imul(E, ut) | 0, i = (i = i + Math.imul(E, lt) | 0) + Math.imul(M, ut) | 0, 
                    o = o + Math.imul(M, lt) | 0, n = n + Math.imul(w, ht) | 0, i = (i = i + Math.imul(w, ft) | 0) + Math.imul(A, ht) | 0, 
                    o = o + Math.imul(A, ft) | 0;
                    var St = (l + (n = n + Math.imul(y, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(y, mt) | 0) + Math.imul(v, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(v, mt) | 0) + (i >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, 
                    n = Math.imul(U, X), i = (i = Math.imul(U, Y)) + Math.imul(L, X) | 0, o = Math.imul(L, Y), 
                    n = n + Math.imul(R, $) | 0, i = (i = i + Math.imul(R, tt) | 0) + Math.imul(j, $) | 0, 
                    o = o + Math.imul(j, tt) | 0, n = n + Math.imul(T, rt) | 0, i = (i = i + Math.imul(T, nt) | 0) + Math.imul(B, rt) | 0, 
                    o = o + Math.imul(B, nt) | 0, n = n + Math.imul(N, ot) | 0, i = (i = i + Math.imul(N, st) | 0) + Math.imul(x, ot) | 0, 
                    o = o + Math.imul(x, st) | 0, n = n + Math.imul(k, ut) | 0, i = (i = i + Math.imul(k, lt) | 0) + Math.imul(S, ut) | 0, 
                    o = o + Math.imul(S, lt) | 0, n = n + Math.imul(E, ht) | 0, i = (i = i + Math.imul(E, ft) | 0) + Math.imul(M, ht) | 0, 
                    o = o + Math.imul(M, ft) | 0;
                    var Ot = (l + (n = n + Math.imul(w, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, mt) | 0) + Math.imul(A, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(A, mt) | 0) + (i >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, 
                    n = Math.imul(U, $), i = (i = Math.imul(U, tt)) + Math.imul(L, $) | 0, o = Math.imul(L, tt), 
                    n = n + Math.imul(R, rt) | 0, i = (i = i + Math.imul(R, nt) | 0) + Math.imul(j, rt) | 0, 
                    o = o + Math.imul(j, nt) | 0, n = n + Math.imul(T, ot) | 0, i = (i = i + Math.imul(T, st) | 0) + Math.imul(B, ot) | 0, 
                    o = o + Math.imul(B, st) | 0, n = n + Math.imul(N, ut) | 0, i = (i = i + Math.imul(N, lt) | 0) + Math.imul(x, ut) | 0, 
                    o = o + Math.imul(x, lt) | 0, n = n + Math.imul(k, ht) | 0, i = (i = i + Math.imul(k, ft) | 0) + Math.imul(S, ht) | 0, 
                    o = o + Math.imul(S, ft) | 0;
                    var Nt = (l + (n = n + Math.imul(E, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(M, mt) | 0) + (i >>> 13) | 0) + (Nt >>> 26) | 0, Nt &= 67108863, 
                    n = Math.imul(U, rt), i = (i = Math.imul(U, nt)) + Math.imul(L, rt) | 0, o = Math.imul(L, nt), 
                    n = n + Math.imul(R, ot) | 0, i = (i = i + Math.imul(R, st) | 0) + Math.imul(j, ot) | 0, 
                    o = o + Math.imul(j, st) | 0, n = n + Math.imul(T, ut) | 0, i = (i = i + Math.imul(T, lt) | 0) + Math.imul(B, ut) | 0, 
                    o = o + Math.imul(B, lt) | 0, n = n + Math.imul(N, ht) | 0, i = (i = i + Math.imul(N, ft) | 0) + Math.imul(x, ht) | 0, 
                    o = o + Math.imul(x, ft) | 0;
                    var xt = (l + (n = n + Math.imul(k, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(k, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(S, mt) | 0) + (i >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, 
                    n = Math.imul(U, ot), i = (i = Math.imul(U, st)) + Math.imul(L, ot) | 0, o = Math.imul(L, st), 
                    n = n + Math.imul(R, ut) | 0, i = (i = i + Math.imul(R, lt) | 0) + Math.imul(j, ut) | 0, 
                    o = o + Math.imul(j, lt) | 0, n = n + Math.imul(T, ht) | 0, i = (i = i + Math.imul(T, ft) | 0) + Math.imul(B, ht) | 0, 
                    o = o + Math.imul(B, ft) | 0;
                    var It = (l + (n = n + Math.imul(N, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(N, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(x, mt) | 0) + (i >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, 
                    n = Math.imul(U, ut), i = (i = Math.imul(U, lt)) + Math.imul(L, ut) | 0, o = Math.imul(L, lt), 
                    n = n + Math.imul(R, ht) | 0, i = (i = i + Math.imul(R, ft) | 0) + Math.imul(j, ht) | 0, 
                    o = o + Math.imul(j, ft) | 0;
                    var Tt = (l + (n = n + Math.imul(T, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(T, mt) | 0) + Math.imul(B, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(B, mt) | 0) + (i >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, 
                    n = Math.imul(U, ht), i = (i = Math.imul(U, ft)) + Math.imul(L, ht) | 0, o = Math.imul(L, ft);
                    var Bt = (l + (n = n + Math.imul(R, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, mt) | 0) + Math.imul(j, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(j, mt) | 0) + (i >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863;
                    var Ct = (l + (n = Math.imul(U, pt)) | 0) + ((8191 & (i = (i = Math.imul(U, mt)) + Math.imul(L, pt) | 0)) << 13) | 0;
                    return l = ((o = Math.imul(L, mt)) + (i >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, 
                    u[0] = gt, u[1] = yt, u[2] = vt, u[3] = bt, u[4] = wt, u[5] = At, u[6] = _t, u[7] = Et, 
                    u[8] = Mt, u[9] = Pt, u[10] = kt, u[11] = St, u[12] = Ot, u[13] = Nt, u[14] = xt, 
                    u[15] = It, u[16] = Tt, u[17] = Bt, u[18] = Ct, 0 !== l && (u[19] = l, r.length++), 
                    r;
                };
                function y(t, e, r) {
                    r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
                    for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                        var s = i;
                        i = 0;
                        for (var a = 67108863 & n, u = Math.min(o, e.length - 1), l = Math.max(0, o - t.length + 1); l <= u; l++) {
                            var c = o - l, h = (0 | t.words[c]) * (0 | e.words[l]), f = 67108863 & h;
                            a = 67108863 & (f = f + a | 0), i += (s = (s = s + (h / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, 
                            s &= 67108863;
                        }
                        r.words[o] = a, n = s, s = i;
                    }
                    return 0 !== n ? r.words[o] = n : r.length--, r._strip();
                }
                function v(t, e, r) {
                    return y(t, e, r);
                }
                function b(t, e) {
                    this.x = t, this.y = e;
                }
                Math.imul || (g = m), o.prototype.mulTo = function(t, e) {
                    var r = this.length + t.length;
                    return 10 === this.length && 10 === t.length ? g(this, t, e) : r < 63 ? m(this, t, e) : r < 1024 ? y(this, t, e) : v(this, t, e);
                }, b.prototype.makeRBT = function(t) {
                    for (var e = new Array(t), r = o.prototype._countBits(t) - 1, n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
                    return e;
                }, b.prototype.revBin = function(t, e, r) {
                    if (0 === t || t === r - 1) return t;
                    for (var n = 0, i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
                    return n;
                }, b.prototype.permute = function(t, e, r, n, i, o) {
                    for (var s = 0; s < o; s++) n[s] = e[t[s]], i[s] = r[t[s]];
                }, b.prototype.transform = function(t, e, r, n, i, o) {
                    this.permute(o, t, e, r, n, i);
                    for (var s = 1; s < i; s <<= 1) for (var a = s << 1, u = Math.cos(2 * Math.PI / a), l = Math.sin(2 * Math.PI / a), c = 0; c < i; c += a) for (var h = u, f = l, d = 0; d < s; d++) {
                        var p = r[c + d], m = n[c + d], g = r[c + d + s], y = n[c + d + s], v = h * g - f * y;
                        y = h * y + f * g, g = v, r[c + d] = p + g, n[c + d] = m + y, r[c + d + s] = p - g, 
                        n[c + d + s] = m - y, d !== a && (v = u * h - l * f, f = u * f + l * h, h = v);
                    }
                }, b.prototype.guessLen13b = function(t, e) {
                    var r = 1 | Math.max(e, t), n = 1 & r, i = 0;
                    for (r = r / 2 | 0; r; r >>>= 1) i++;
                    return 1 << i + 1 + n;
                }, b.prototype.conjugate = function(t, e, r) {
                    if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
                        var i = t[n];
                        t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
                    }
                }, b.prototype.normalize13b = function(t, e) {
                    for (var r = 0, n = 0; n < e / 2; n++) {
                        var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
                        t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
                    }
                    return t;
                }, b.prototype.convert13b = function(t, e, r, i) {
                    for (var o = 0, s = 0; s < e; s++) o += 0 | t[s], r[2 * s] = 8191 & o, o >>>= 13, 
                    r[2 * s + 1] = 8191 & o, o >>>= 13;
                    for (s = 2 * e; s < i; ++s) r[s] = 0;
                    n(0 === o), n(0 == (-8192 & o));
                }, b.prototype.stub = function(t) {
                    for (var e = new Array(t), r = 0; r < t; r++) e[r] = 0;
                    return e;
                }, b.prototype.mulp = function(t, e, r) {
                    var n = 2 * this.guessLen13b(t.length, e.length), i = this.makeRBT(n), o = this.stub(n), s = new Array(n), a = new Array(n), u = new Array(n), l = new Array(n), c = new Array(n), h = new Array(n), f = r.words;
                    f.length = n, this.convert13b(t.words, t.length, s, n), this.convert13b(e.words, e.length, l, n), 
                    this.transform(s, o, a, u, n, i), this.transform(l, o, c, h, n, i);
                    for (var d = 0; d < n; d++) {
                        var p = a[d] * c[d] - u[d] * h[d];
                        u[d] = a[d] * h[d] + u[d] * c[d], a[d] = p;
                    }
                    return this.conjugate(a, u, n), this.transform(a, u, f, o, n, i), this.conjugate(f, o, n), 
                    this.normalize13b(f, n), r.negative = t.negative ^ e.negative, r.length = t.length + e.length, 
                    r._strip();
                }, o.prototype.mul = function(t) {
                    var e = new o(null);
                    return e.words = new Array(this.length + t.length), this.mulTo(t, e);
                }, o.prototype.mulf = function(t) {
                    var e = new o(null);
                    return e.words = new Array(this.length + t.length), v(this, t, e);
                }, o.prototype.imul = function(t) {
                    return this.clone().mulTo(t, this);
                }, o.prototype.imuln = function(t) {
                    var e = t < 0;
                    e && (t = -t), n("number" == typeof t), n(t < 67108864);
                    for (var r = 0, i = 0; i < this.length; i++) {
                        var o = (0 | this.words[i]) * t, s = (67108863 & o) + (67108863 & r);
                        r >>= 26, r += o / 67108864 | 0, r += s >>> 26, this.words[i] = 67108863 & s;
                    }
                    return 0 !== r && (this.words[i] = r, this.length++), e ? this.ineg() : this;
                }, o.prototype.muln = function(t) {
                    return this.clone().imuln(t);
                }, o.prototype.sqr = function() {
                    return this.mul(this);
                }, o.prototype.isqr = function() {
                    return this.imul(this.clone());
                }, o.prototype.pow = function(t) {
                    var e = function(t) {
                        for (var e = new Array(t.bitLength()), r = 0; r < e.length; r++) {
                            var n = r / 26 | 0, i = r % 26;
                            e[r] = t.words[n] >>> i & 1;
                        }
                        return e;
                    }(t);
                    if (0 === e.length) return new o(1);
                    for (var r = this, n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
                    if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
                    return r;
                }, o.prototype.iushln = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e, r = t % 26, i = (t - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                    if (0 !== r) {
                        var s = 0;
                        for (e = 0; e < this.length; e++) {
                            var a = this.words[e] & o, u = (0 | this.words[e]) - a << r;
                            this.words[e] = u | s, s = a >>> 26 - r;
                        }
                        s && (this.words[e] = s, this.length++);
                    }
                    if (0 !== i) {
                        for (e = this.length - 1; e >= 0; e--) this.words[e + i] = this.words[e];
                        for (e = 0; e < i; e++) this.words[e] = 0;
                        this.length += i;
                    }
                    return this._strip();
                }, o.prototype.ishln = function(t) {
                    return n(0 === this.negative), this.iushln(t);
                }, o.prototype.iushrn = function(t, e, r) {
                    var i;
                    n("number" == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
                    var o = t % 26, s = Math.min((t - o) / 26, this.length), a = 67108863 ^ 67108863 >>> o << o, u = r;
                    if (i -= s, i = Math.max(0, i), u) {
                        for (var l = 0; l < s; l++) u.words[l] = this.words[l];
                        u.length = s;
                    }
                    if (0 === s) ; else if (this.length > s) for (this.length -= s, l = 0; l < this.length; l++) this.words[l] = this.words[l + s]; else this.words[0] = 0, 
                    this.length = 1;
                    var c = 0;
                    for (l = this.length - 1; l >= 0 && (0 !== c || l >= i); l--) {
                        var h = 0 | this.words[l];
                        this.words[l] = c << 26 - o | h >>> o, c = h & a;
                    }
                    return u && 0 !== c && (u.words[u.length++] = c), 0 === this.length && (this.words[0] = 0, 
                    this.length = 1), this._strip();
                }, o.prototype.ishrn = function(t, e, r) {
                    return n(0 === this.negative), this.iushrn(t, e, r);
                }, o.prototype.shln = function(t) {
                    return this.clone().ishln(t);
                }, o.prototype.ushln = function(t) {
                    return this.clone().iushln(t);
                }, o.prototype.shrn = function(t) {
                    return this.clone().ishrn(t);
                }, o.prototype.ushrn = function(t) {
                    return this.clone().iushrn(t);
                }, o.prototype.testn = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e = t % 26, r = (t - e) / 26, i = 1 << e;
                    return !(this.length <= r) && !!(this.words[r] & i);
                }, o.prototype.imaskn = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e = t % 26, r = (t - e) / 26;
                    if (n(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
                    if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
                        var i = 67108863 ^ 67108863 >>> e << e;
                        this.words[this.length - 1] &= i;
                    }
                    return this._strip();
                }, o.prototype.maskn = function(t) {
                    return this.clone().imaskn(t);
                }, o.prototype.iaddn = function(t) {
                    return n("number" == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t ? (this.words[0] = t - (0 | this.words[0]), 
                    this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, 
                    this) : this._iaddn(t);
                }, o.prototype._iaddn = function(t) {
                    this.words[0] += t;
                    for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, 
                    e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
                    return this.length = Math.max(this.length, e + 1), this;
                }, o.prototype.isubn = function(t) {
                    if (n("number" == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
                    if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, 
                    this;
                    if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], 
                    this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
                    this.words[e + 1] -= 1;
                    return this._strip();
                }, o.prototype.addn = function(t) {
                    return this.clone().iaddn(t);
                }, o.prototype.subn = function(t) {
                    return this.clone().isubn(t);
                }, o.prototype.iabs = function() {
                    return this.negative = 0, this;
                }, o.prototype.abs = function() {
                    return this.clone().iabs();
                }, o.prototype._ishlnsubmul = function(t, e, r) {
                    var i, o, s = t.length + r;
                    this._expand(s);
                    var a = 0;
                    for (i = 0; i < t.length; i++) {
                        o = (0 | this.words[i + r]) + a;
                        var u = (0 | t.words[i]) * e;
                        a = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[i + r] = 67108863 & o;
                    }
                    for (;i < this.length - r; i++) a = (o = (0 | this.words[i + r]) + a) >> 26, this.words[i + r] = 67108863 & o;
                    if (0 === a) return this._strip();
                    for (n(-1 === a), a = 0, i = 0; i < this.length; i++) a = (o = -(0 | this.words[i]) + a) >> 26, 
                    this.words[i] = 67108863 & o;
                    return this.negative = 1, this._strip();
                }, o.prototype._wordDiv = function(t, e) {
                    var r = (this.length, t.length), n = this.clone(), i = t, s = 0 | i.words[i.length - 1];
                    0 !== (r = 26 - this._countBits(s)) && (i = i.ushln(r), n.iushln(r), s = 0 | i.words[i.length - 1]);
                    var a, u = n.length - i.length;
                    if ("mod" !== e) {
                        (a = new o(null)).length = u + 1, a.words = new Array(a.length);
                        for (var l = 0; l < a.length; l++) a.words[l] = 0;
                    }
                    var c = n.clone()._ishlnsubmul(i, 1, u);
                    0 === c.negative && (n = c, a && (a.words[u] = 1));
                    for (var h = u - 1; h >= 0; h--) {
                        var f = 67108864 * (0 | n.words[i.length + h]) + (0 | n.words[i.length + h - 1]);
                        for (f = Math.min(f / s | 0, 67108863), n._ishlnsubmul(i, f, h); 0 !== n.negative; ) f--, 
                        n.negative = 0, n._ishlnsubmul(i, 1, h), n.isZero() || (n.negative ^= 1);
                        a && (a.words[h] = f);
                    }
                    return a && a._strip(), n._strip(), "div" !== e && 0 !== r && n.iushrn(r), {
                        div: a || null,
                        mod: n
                    };
                }, o.prototype.divmod = function(t, e, r) {
                    return n(!t.isZero()), this.isZero() ? {
                        div: new o(0),
                        mod: new o(0)
                    } : 0 !== this.negative && 0 === t.negative ? (a = this.neg().divmod(t, e), "mod" !== e && (i = a.div.neg()), 
                    "div" !== e && (s = a.mod.neg(), r && 0 !== s.negative && s.iadd(t)), {
                        div: i,
                        mod: s
                    }) : 0 === this.negative && 0 !== t.negative ? (a = this.divmod(t.neg(), e), "mod" !== e && (i = a.div.neg()), 
                    {
                        div: i,
                        mod: a.mod
                    }) : 0 != (this.negative & t.negative) ? (a = this.neg().divmod(t.neg(), e), "div" !== e && (s = a.mod.neg(), 
                    r && 0 !== s.negative && s.isub(t)), {
                        div: a.div,
                        mod: s
                    }) : t.length > this.length || this.cmp(t) < 0 ? {
                        div: new o(0),
                        mod: this
                    } : 1 === t.length ? "div" === e ? {
                        div: this.divn(t.words[0]),
                        mod: null
                    } : "mod" === e ? {
                        div: null,
                        mod: new o(this.modrn(t.words[0]))
                    } : {
                        div: this.divn(t.words[0]),
                        mod: new o(this.modrn(t.words[0]))
                    } : this._wordDiv(t, e);
                    var i, s, a;
                }, o.prototype.div = function(t) {
                    return this.divmod(t, "div", !1).div;
                }, o.prototype.mod = function(t) {
                    return this.divmod(t, "mod", !1).mod;
                }, o.prototype.umod = function(t) {
                    return this.divmod(t, "mod", !0).mod;
                }, o.prototype.divRound = function(t) {
                    var e = this.divmod(t);
                    if (e.mod.isZero()) return e.div;
                    var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod, n = t.ushrn(1), i = t.andln(1), o = r.cmp(n);
                    return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
                }, o.prototype.modrn = function(t) {
                    var e = t < 0;
                    e && (t = -t), n(t <= 67108863);
                    for (var r = (1 << 26) % t, i = 0, o = this.length - 1; o >= 0; o--) i = (r * i + (0 | this.words[o])) % t;
                    return e ? -i : i;
                }, o.prototype.modn = function(t) {
                    return this.modrn(t);
                }, o.prototype.idivn = function(t) {
                    var e = t < 0;
                    e && (t = -t), n(t <= 67108863);
                    for (var r = 0, i = this.length - 1; i >= 0; i--) {
                        var o = (0 | this.words[i]) + 67108864 * r;
                        this.words[i] = o / t | 0, r = o % t;
                    }
                    return this._strip(), e ? this.ineg() : this;
                }, o.prototype.divn = function(t) {
                    return this.clone().idivn(t);
                }, o.prototype.egcd = function(t) {
                    n(0 === t.negative), n(!t.isZero());
                    var e = this, r = t.clone();
                    e = 0 !== e.negative ? e.umod(t) : e.clone();
                    for (var i = new o(1), s = new o(0), a = new o(0), u = new o(1), l = 0; e.isEven() && r.isEven(); ) e.iushrn(1), 
                    r.iushrn(1), ++l;
                    for (var c = r.clone(), h = e.clone(); !e.isZero(); ) {
                        for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
                        if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || s.isOdd()) && (i.iadd(c), 
                        s.isub(h)), i.iushrn(1), s.iushrn(1);
                        for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
                        if (p > 0) for (r.iushrn(p); p-- > 0; ) (a.isOdd() || u.isOdd()) && (a.iadd(c), 
                        u.isub(h)), a.iushrn(1), u.iushrn(1);
                        e.cmp(r) >= 0 ? (e.isub(r), i.isub(a), s.isub(u)) : (r.isub(e), a.isub(i), u.isub(s));
                    }
                    return {
                        a,
                        b: u,
                        gcd: r.iushln(l)
                    };
                }, o.prototype._invmp = function(t) {
                    n(0 === t.negative), n(!t.isZero());
                    var e = this, r = t.clone();
                    e = 0 !== e.negative ? e.umod(t) : e.clone();
                    for (var i, s = new o(1), a = new o(0), u = r.clone(); e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                        for (var l = 0, c = 1; 0 == (e.words[0] & c) && l < 26; ++l, c <<= 1) ;
                        if (l > 0) for (e.iushrn(l); l-- > 0; ) s.isOdd() && s.iadd(u), s.iushrn(1);
                        for (var h = 0, f = 1; 0 == (r.words[0] & f) && h < 26; ++h, f <<= 1) ;
                        if (h > 0) for (r.iushrn(h); h-- > 0; ) a.isOdd() && a.iadd(u), a.iushrn(1);
                        e.cmp(r) >= 0 ? (e.isub(r), s.isub(a)) : (r.isub(e), a.isub(s));
                    }
                    return (i = 0 === e.cmpn(1) ? s : a).cmpn(0) < 0 && i.iadd(t), i;
                }, o.prototype.gcd = function(t) {
                    if (this.isZero()) return t.abs();
                    if (t.isZero()) return this.abs();
                    var e = this.clone(), r = t.clone();
                    e.negative = 0, r.negative = 0;
                    for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
                    for (;;) {
                        for (;e.isEven(); ) e.iushrn(1);
                        for (;r.isEven(); ) r.iushrn(1);
                        var i = e.cmp(r);
                        if (i < 0) {
                            var o = e;
                            e = r, r = o;
                        } else if (0 === i || 0 === r.cmpn(1)) break;
                        e.isub(r);
                    }
                    return r.iushln(n);
                }, o.prototype.invm = function(t) {
                    return this.egcd(t).a.umod(t);
                }, o.prototype.isEven = function() {
                    return 0 == (1 & this.words[0]);
                }, o.prototype.isOdd = function() {
                    return 1 == (1 & this.words[0]);
                }, o.prototype.andln = function(t) {
                    return this.words[0] & t;
                }, o.prototype.bincn = function(t) {
                    n("number" == typeof t);
                    var e = t % 26, r = (t - e) / 26, i = 1 << e;
                    if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
                    for (var o = i, s = r; 0 !== o && s < this.length; s++) {
                        var a = 0 | this.words[s];
                        o = (a += o) >>> 26, a &= 67108863, this.words[s] = a;
                    }
                    return 0 !== o && (this.words[s] = o, this.length++), this;
                }, o.prototype.isZero = function() {
                    return 1 === this.length && 0 === this.words[0];
                }, o.prototype.cmpn = function(t) {
                    var e, r = t < 0;
                    if (0 !== this.negative && !r) return -1;
                    if (0 === this.negative && r) return 1;
                    if (this._strip(), this.length > 1) e = 1; else {
                        r && (t = -t), n(t <= 67108863, "Number is too big");
                        var i = 0 | this.words[0];
                        e = i === t ? 0 : i < t ? -1 : 1;
                    }
                    return 0 !== this.negative ? 0 | -e : e;
                }, o.prototype.cmp = function(t) {
                    if (0 !== this.negative && 0 === t.negative) return -1;
                    if (0 === this.negative && 0 !== t.negative) return 1;
                    var e = this.ucmp(t);
                    return 0 !== this.negative ? 0 | -e : e;
                }, o.prototype.ucmp = function(t) {
                    if (this.length > t.length) return 1;
                    if (this.length < t.length) return -1;
                    for (var e = 0, r = this.length - 1; r >= 0; r--) {
                        var n = 0 | this.words[r], i = 0 | t.words[r];
                        if (n !== i) {
                            n < i ? e = -1 : n > i && (e = 1);
                            break;
                        }
                    }
                    return e;
                }, o.prototype.gtn = function(t) {
                    return 1 === this.cmpn(t);
                }, o.prototype.gt = function(t) {
                    return 1 === this.cmp(t);
                }, o.prototype.gten = function(t) {
                    return this.cmpn(t) >= 0;
                }, o.prototype.gte = function(t) {
                    return this.cmp(t) >= 0;
                }, o.prototype.ltn = function(t) {
                    return -1 === this.cmpn(t);
                }, o.prototype.lt = function(t) {
                    return -1 === this.cmp(t);
                }, o.prototype.lten = function(t) {
                    return this.cmpn(t) <= 0;
                }, o.prototype.lte = function(t) {
                    return this.cmp(t) <= 0;
                }, o.prototype.eqn = function(t) {
                    return 0 === this.cmpn(t);
                }, o.prototype.eq = function(t) {
                    return 0 === this.cmp(t);
                }, o.red = function(t) {
                    return new k(t);
                }, o.prototype.toRed = function(t) {
                    return n(!this.red, "Already a number in reduction context"), n(0 === this.negative, "red works only with positives"), 
                    t.convertTo(this)._forceRed(t);
                }, o.prototype.fromRed = function() {
                    return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
                }, o.prototype._forceRed = function(t) {
                    return this.red = t, this;
                }, o.prototype.forceRed = function(t) {
                    return n(!this.red, "Already a number in reduction context"), this._forceRed(t);
                }, o.prototype.redAdd = function(t) {
                    return n(this.red, "redAdd works only with red numbers"), this.red.add(this, t);
                }, o.prototype.redIAdd = function(t) {
                    return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, t);
                }, o.prototype.redSub = function(t) {
                    return n(this.red, "redSub works only with red numbers"), this.red.sub(this, t);
                }, o.prototype.redISub = function(t) {
                    return n(this.red, "redISub works only with red numbers"), this.red.isub(this, t);
                }, o.prototype.redShl = function(t) {
                    return n(this.red, "redShl works only with red numbers"), this.red.shl(this, t);
                }, o.prototype.redMul = function(t) {
                    return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), 
                    this.red.mul(this, t);
                }, o.prototype.redIMul = function(t) {
                    return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), 
                    this.red.imul(this, t);
                }, o.prototype.redSqr = function() {
                    return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), 
                    this.red.sqr(this);
                }, o.prototype.redISqr = function() {
                    return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), 
                    this.red.isqr(this);
                }, o.prototype.redSqrt = function() {
                    return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), 
                    this.red.sqrt(this);
                }, o.prototype.redInvm = function() {
                    return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), 
                    this.red.invm(this);
                }, o.prototype.redNeg = function() {
                    return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), 
                    this.red.neg(this);
                }, o.prototype.redPow = function(t) {
                    return n(this.red && !t.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, t);
                };
                var w = {
                    k256: null,
                    p224: null,
                    p192: null,
                    p25519: null
                };
                function A(t, e) {
                    this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), 
                    this.tmp = this._tmp();
                }
                function _() {
                    A.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                }
                function E() {
                    A.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                }
                function M() {
                    A.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                }
                function P() {
                    A.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                }
                function k(t) {
                    if ("string" == typeof t) {
                        var e = o._prime(t);
                        this.m = e.p, this.prime = e;
                    } else n(t.gtn(1), "modulus must be greater than 1"), this.m = t, this.prime = null;
                }
                function S(t) {
                    k.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), 
                    this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), 
                    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), 
                    this.minv = this.r.sub(this.minv);
                }
                A.prototype._tmp = function() {
                    var t = new o(null);
                    return t.words = new Array(Math.ceil(this.n / 13)), t;
                }, A.prototype.ireduce = function(t) {
                    var e, r = t;
                    do {
                        this.split(r, this.tmp), e = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
                    } while (e > this.n);
                    var n = e < this.n ? -1 : r.ucmp(this.p);
                    return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), 
                    r;
                }, A.prototype.split = function(t, e) {
                    t.iushrn(this.n, 0, e);
                }, A.prototype.imulK = function(t) {
                    return t.imul(this.k);
                }, i(_, A), _.prototype.split = function(t, e) {
                    for (var r = 4194303, n = Math.min(t.length, 9), i = 0; i < n; i++) e.words[i] = t.words[i];
                    if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
                    var o = t.words[9];
                    for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
                        var s = 0 | t.words[i];
                        t.words[i - 10] = (s & r) << 4 | o >>> 22, o = s;
                    }
                    o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
                }, _.prototype.imulK = function(t) {
                    t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
                    for (var e = 0, r = 0; r < t.length; r++) {
                        var n = 0 | t.words[r];
                        e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
                    }
                    return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), 
                    t;
                }, i(E, A), i(M, A), i(P, A), P.prototype.imulK = function(t) {
                    for (var e = 0, r = 0; r < t.length; r++) {
                        var n = 19 * (0 | t.words[r]) + e, i = 67108863 & n;
                        n >>>= 26, t.words[r] = i, e = n;
                    }
                    return 0 !== e && (t.words[t.length++] = e), t;
                }, o._prime = function(t) {
                    if (w[t]) return w[t];
                    var e;
                    if ("k256" === t) e = new _; else if ("p224" === t) e = new E; else if ("p192" === t) e = new M; else {
                        if ("p25519" !== t) throw new Error("Unknown prime " + t);
                        e = new P;
                    }
                    return w[t] = e, e;
                }, k.prototype._verify1 = function(t) {
                    n(0 === t.negative, "red works only with positives"), n(t.red, "red works only with red numbers");
                }, k.prototype._verify2 = function(t, e) {
                    n(0 == (t.negative | e.negative), "red works only with positives"), n(t.red && t.red === e.red, "red works only with red numbers");
                }, k.prototype.imod = function(t) {
                    return this.prime ? this.prime.ireduce(t)._forceRed(this) : (c(t, t.umod(this.m)._forceRed(this)), 
                    t);
                }, k.prototype.neg = function(t) {
                    return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
                }, k.prototype.add = function(t, e) {
                    this._verify2(t, e);
                    var r = t.add(e);
                    return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                }, k.prototype.iadd = function(t, e) {
                    this._verify2(t, e);
                    var r = t.iadd(e);
                    return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                }, k.prototype.sub = function(t, e) {
                    this._verify2(t, e);
                    var r = t.sub(e);
                    return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                }, k.prototype.isub = function(t, e) {
                    this._verify2(t, e);
                    var r = t.isub(e);
                    return r.cmpn(0) < 0 && r.iadd(this.m), r;
                }, k.prototype.shl = function(t, e) {
                    return this._verify1(t), this.imod(t.ushln(e));
                }, k.prototype.imul = function(t, e) {
                    return this._verify2(t, e), this.imod(t.imul(e));
                }, k.prototype.mul = function(t, e) {
                    return this._verify2(t, e), this.imod(t.mul(e));
                }, k.prototype.isqr = function(t) {
                    return this.imul(t, t.clone());
                }, k.prototype.sqr = function(t) {
                    return this.mul(t, t);
                }, k.prototype.sqrt = function(t) {
                    if (t.isZero()) return t.clone();
                    var e = this.m.andln(3);
                    if (n(e % 2 == 1), 3 === e) {
                        var r = this.m.add(new o(1)).iushrn(2);
                        return this.pow(t, r);
                    }
                    for (var i = this.m.subn(1), s = 0; !i.isZero() && 0 === i.andln(1); ) s++, i.iushrn(1);
                    n(!i.isZero());
                    var a = new o(1).toRed(this), u = a.redNeg(), l = this.m.subn(1).iushrn(1), c = this.m.bitLength();
                    for (c = new o(2 * c * c).toRed(this); 0 !== this.pow(c, l).cmp(u); ) c.redIAdd(u);
                    for (var h = this.pow(c, i), f = this.pow(t, i.addn(1).iushrn(1)), d = this.pow(t, i), p = s; 0 !== d.cmp(a); ) {
                        for (var m = d, g = 0; 0 !== m.cmp(a); g++) m = m.redSqr();
                        n(g < p);
                        var y = this.pow(h, new o(1).iushln(p - g - 1));
                        f = f.redMul(y), h = y.redSqr(), d = d.redMul(h), p = g;
                    }
                    return f;
                }, k.prototype.invm = function(t) {
                    var e = t._invmp(this.m);
                    return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
                }, k.prototype.pow = function(t, e) {
                    if (e.isZero()) return new o(1).toRed(this);
                    if (0 === e.cmpn(1)) return t.clone();
                    var r = new Array(16);
                    r[0] = new o(1).toRed(this), r[1] = t;
                    for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
                    var i = r[0], s = 0, a = 0, u = e.bitLength() % 26;
                    for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
                        for (var l = e.words[n], c = u - 1; c >= 0; c--) {
                            var h = l >> c & 1;
                            i !== r[0] && (i = this.sqr(i)), 0 !== h || 0 !== s ? (s <<= 1, s |= h, (4 === ++a || 0 === n && 0 === c) && (i = this.mul(i, r[s]), 
                            a = 0, s = 0)) : a = 0;
                        }
                        u = 26;
                    }
                    return i;
                }, k.prototype.convertTo = function(t) {
                    var e = t.umod(this.m);
                    return e === t ? e.clone() : e;
                }, k.prototype.convertFrom = function(t) {
                    var e = t.clone();
                    return e.red = null, e;
                }, o.mont = function(t) {
                    return new S(t);
                }, i(S, k), S.prototype.convertTo = function(t) {
                    return this.imod(t.ushln(this.shift));
                }, S.prototype.convertFrom = function(t) {
                    var e = this.imod(t.mul(this.rinv));
                    return e.red = null, e;
                }, S.prototype.imul = function(t, e) {
                    if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
                    var r = t.imul(e), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
                    return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), 
                    o._forceRed(this);
                }, S.prototype.mul = function(t, e) {
                    if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
                    var r = t.mul(e), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), s = i;
                    return i.cmp(this.m) >= 0 ? s = i.isub(this.m) : i.cmpn(0) < 0 && (s = i.iadd(this.m)), 
                    s._forceRed(this);
                }, S.prototype.invm = function(t) {
                    return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
                };
            }(t = r.nmd(t), this);
        },
        8903: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, {
                BaseContract: () => Cn,
                BigNumber: () => J,
                Contract: () => Rn,
                ContractFactory: () => jn,
                FixedNumber: () => Vn,
                Signer: () => cr,
                VoidSigner: () => hr,
                Wallet: () => Po,
                Wordlist: () => Pi,
                constants: () => i,
                errors: () => g,
                ethers: () => u,
                getDefaultProvider: () => _u,
                logger: () => $u,
                providers: () => o,
                utils: () => a,
                version: () => Zu,
                wordlists: () => Ni
            });
            var n = {};
            r.r(n), r.d(n, {
                decode: () => St,
                encode: () => Mt
            });
            var i = {};
            r.r(i), r.d(i, {
                AddressZero: () => Oo,
                EtherSymbol: () => xo,
                HashZero: () => No,
                MaxInt256: () => ge,
                MaxUint256: () => pe,
                MinInt256: () => me,
                NegativeOne: () => le,
                One: () => he,
                Two: () => fe,
                WeiPerEther: () => de,
                Zero: () => ce
            });
            var o = {};
            r.r(o), r.d(o, {
                AlchemyProvider: () => Oa,
                AlchemyWebSocketProvider: () => Sa,
                AnkrProvider: () => Ta,
                BaseProvider: () => ra,
                CloudflareProvider: () => Ra,
                EtherscanProvider: () => za,
                FallbackProvider: () => ou,
                Formatter: () => Os,
                InfuraProvider: () => cu,
                InfuraWebSocketProvider: () => lu,
                IpcProvider: () => su,
                JsonRpcBatchProvider: () => hu,
                JsonRpcProvider: () => ma,
                JsonRpcSigner: () => fa,
                NodesmithProvider: () => du,
                PocketProvider: () => gu,
                Provider: () => or,
                Resolver: () => $s,
                StaticJsonRpcProvider: () => Ea,
                UrlJsonRpcProvider: () => Ma,
                Web3Provider: () => wu,
                WebSocketProvider: () => wa,
                getDefaultProvider: () => _u,
                getNetwork: () => Uo,
                isCommunityResourcable: () => Ns,
                isCommunityResource: () => xs,
                showThrottleMessage: () => Ts
            });
            var s = {};
            r.r(s), r.d(s, {
                decode: () => Lo,
                encode: () => Do
            });
            var a = {};
            r.r(a), r.d(a, {
                AbiCoder: () => We,
                ConstructorFragment: () => Re,
                ErrorFragment: () => Ue,
                EventFragment: () => Ie,
                FormatTypes: () => ke,
                Fragment: () => xe,
                FunctionFragment: () => je,
                HDNode: () => Di,
                Indexed: () => Ze,
                Interface: () => er,
                LogDescription: () => Qe,
                Logger: () => v,
                ParamType: () => Oe,
                RLP: () => n,
                SigningKey: () => $r,
                SupportedAlgorithm: () => yi,
                TransactionDescription: () => Xe,
                TransactionTypes: () => nn,
                UnicodeNormalizationForm: () => Dt,
                Utf8ErrorFuncs: () => zt,
                Utf8ErrorReason: () => Gt,
                _TypedDataEncoder: () => pi,
                _fetchData: () => As,
                _toEscapedUtf8String: () => Vt,
                accessListify: () => dn,
                arrayify: () => P,
                base58: () => gi,
                base64: () => s,
                checkProperties: () => it,
                checkResultErrors: () => dt,
                commify: () => Vu,
                computeAddress: () => ln,
                computeHmac: () => _i,
                computePublicKey: () => en,
                concat: () => k,
                deepCopy: () => lt,
                defaultAbiCoder: () => Ve,
                defaultPath: () => Li,
                defineReadOnly: () => et,
                dnsEncode: () => ps,
                entropyToMnemonic: () => zi,
                fetchJson: () => _s,
                formatBytes32String: () => zu,
                formatEther: () => Xu,
                formatUnits: () => Ju,
                getAccountPath: () => Ki,
                getAddress: () => Ct,
                getContractAddress: () => Ft,
                getCreate2Address: () => Ut,
                getIcapAddress: () => jt,
                getJsonWalletAddress: () => wo,
                getStatic: () => rt,
                hashMessage: () => Yn,
                hexConcat: () => C,
                hexDataLength: () => T,
                hexDataSlice: () => B,
                hexStripZeros: () => j,
                hexValue: () => R,
                hexZeroPad: () => F,
                hexlify: () => I,
                id: () => Yt,
                isAddress: () => Rt,
                isBytes: () => M,
                isBytesLike: () => _,
                isHexString: () => N,
                isValidMnemonic: () => Hi,
                isValidName: () => fs,
                joinSignature: () => L,
                keccak256: () => bt,
                mnemonicToEntropy: () => qi,
                mnemonicToSeed: () => Gi,
                namehash: () => ds,
                nameprep: () => qu,
                parseBytes32String: () => Hu,
                parseEther: () => Yu,
                parseTransaction: () => bn,
                parseUnits: () => Qu,
                poll: () => Es,
                randomBytes: () => Qi,
                recoverAddress: () => cn,
                recoverPublicKey: () => tn,
                resolveProperties: () => nt,
                ripemd160: () => bi,
                serializeTransaction: () => yn,
                sha256: () => wi,
                sha512: () => Ai,
                shallowCopy: () => ot,
                shuffled: () => Ha,
                solidityKeccak256: () => xu,
                solidityPack: () => Nu,
                soliditySha256: () => Iu,
                splitSignature: () => U,
                stripZeros: () => S,
                toUtf8Bytes: () => Kt,
                toUtf8CodePoints: () => Xt,
                toUtf8String: () => Qt,
                verifyMessage: () => ko,
                verifyTypedData: () => So,
                zeroPad: () => O
            });
            var u = {};
            r.r(u), r.d(u, {
                BaseContract: () => Cn,
                BigNumber: () => J,
                Contract: () => Rn,
                ContractFactory: () => jn,
                FixedNumber: () => Vn,
                Signer: () => cr,
                VoidSigner: () => hr,
                Wallet: () => Po,
                Wordlist: () => Pi,
                constants: () => i,
                errors: () => g,
                getDefaultProvider: () => _u,
                logger: () => $u,
                providers: () => o,
                utils: () => a,
                version: () => Zu,
                wordlists: () => Ni
            });
            let l = !1, c = !1;
            const h = {
                debug: 1,
                default: 2,
                info: 2,
                warning: 3,
                error: 4,
                off: 5
            };
            let f = h.default, d = null;
            const p = function() {
                try {
                    const t = [];
                    if ([ "NFD", "NFC", "NFKD", "NFKC" ].forEach((e => {
                        try {
                            if ("test" !== "test".normalize(e)) throw new Error("bad normalize");
                        } catch (r) {
                            t.push(e);
                        }
                    })), t.length) throw new Error("missing " + t.join(", "));
                    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
                } catch (t) {
                    return t.message;
                }
                return null;
            }();
            var m, g;
            !function(t) {
                t.DEBUG = "DEBUG", t.INFO = "INFO", t.WARNING = "WARNING", t.ERROR = "ERROR", t.OFF = "OFF";
            }(m || (m = {})), function(t) {
                t.UNKNOWN_ERROR = "UNKNOWN_ERROR", t.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", t.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", 
                t.NETWORK_ERROR = "NETWORK_ERROR", t.SERVER_ERROR = "SERVER_ERROR", t.TIMEOUT = "TIMEOUT", 
                t.BUFFER_OVERRUN = "BUFFER_OVERRUN", t.NUMERIC_FAULT = "NUMERIC_FAULT", t.MISSING_NEW = "MISSING_NEW", 
                t.INVALID_ARGUMENT = "INVALID_ARGUMENT", t.MISSING_ARGUMENT = "MISSING_ARGUMENT", 
                t.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", t.CALL_EXCEPTION = "CALL_EXCEPTION", 
                t.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", t.NONCE_EXPIRED = "NONCE_EXPIRED", 
                t.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", t.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", 
                t.TRANSACTION_REPLACED = "TRANSACTION_REPLACED", t.ACTION_REJECTED = "ACTION_REJECTED";
            }(g || (g = {}));
            const y = "0123456789abcdef";
            class v {
                constructor(t) {
                    Object.defineProperty(this, "version", {
                        enumerable: !0,
                        value: t,
                        writable: !1
                    });
                }
                _log(t, e) {
                    const r = t.toLowerCase();
                    null == h[r] && this.throwArgumentError("invalid log level name", "logLevel", t), 
                    f > h[r] || console.log.apply(console, e);
                }
                debug(...t) {
                    this._log(v.levels.DEBUG, t);
                }
                info(...t) {
                    this._log(v.levels.INFO, t);
                }
                warn(...t) {
                    this._log(v.levels.WARNING, t);
                }
                makeError(t, e, r) {
                    if (c) return this.makeError("censored error", e, {});
                    e || (e = v.errors.UNKNOWN_ERROR), r || (r = {});
                    const n = [];
                    Object.keys(r).forEach((t => {
                        const e = r[t];
                        try {
                            if (e instanceof Uint8Array) {
                                let r = "";
                                for (let t = 0; t < e.length; t++) r += y[e[t] >> 4], r += y[15 & e[t]];
                                n.push(t + "=Uint8Array(0x" + r + ")");
                            } else n.push(t + "=" + JSON.stringify(e));
                        } catch (e) {
                            n.push(t + "=" + JSON.stringify(r[t].toString()));
                        }
                    })), n.push(`code=${e}`), n.push(`version=${this.version}`);
                    const i = t;
                    let o = "";
                    switch (e) {
                      case g.NUMERIC_FAULT:
                        {
                            o = "NUMERIC_FAULT";
                            const e = t;
                            switch (e) {
                              case "overflow":
                              case "underflow":
                              case "division-by-zero":
                                o += "-" + e;
                                break;

                              case "negative-power":
                              case "negative-width":
                                o += "-unsupported";
                                break;

                              case "unbound-bitwise-result":
                                o += "-unbound-result";
                            }
                            break;
                        }

                      case g.CALL_EXCEPTION:
                      case g.INSUFFICIENT_FUNDS:
                      case g.MISSING_NEW:
                      case g.NONCE_EXPIRED:
                      case g.REPLACEMENT_UNDERPRICED:
                      case g.TRANSACTION_REPLACED:
                      case g.UNPREDICTABLE_GAS_LIMIT:
                        o = e;
                    }
                    o && (t += " [ See: https://links.ethers.org/v5-errors-" + o + " ]"), n.length && (t += " (" + n.join(", ") + ")");
                    const s = new Error(t);
                    return s.reason = i, s.code = e, Object.keys(r).forEach((function(t) {
                        s[t] = r[t];
                    })), s;
                }
                throwError(t, e, r) {
                    throw this.makeError(t, e, r);
                }
                throwArgumentError(t, e, r) {
                    return this.throwError(t, v.errors.INVALID_ARGUMENT, {
                        argument: e,
                        value: r
                    });
                }
                assert(t, e, r, n) {
                    t || this.throwError(e, r, n);
                }
                assertArgument(t, e, r, n) {
                    t || this.throwArgumentError(e, r, n);
                }
                checkNormalize(t) {
                    null == t && (t = "platform missing String.prototype.normalize"), p && this.throwError("platform missing String.prototype.normalize", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "String.prototype.normalize",
                        form: p
                    });
                }
                checkSafeUint53(t, e) {
                    "number" == typeof t && (null == e && (e = "value not safe"), (t < 0 || t >= 9007199254740991) && this.throwError(e, v.errors.NUMERIC_FAULT, {
                        operation: "checkSafeInteger",
                        fault: "out-of-safe-range",
                        value: t
                    }), t % 1 && this.throwError(e, v.errors.NUMERIC_FAULT, {
                        operation: "checkSafeInteger",
                        fault: "non-integer",
                        value: t
                    }));
                }
                checkArgumentCount(t, e, r) {
                    r = r ? ": " + r : "", t < e && this.throwError("missing argument" + r, v.errors.MISSING_ARGUMENT, {
                        count: t,
                        expectedCount: e
                    }), t > e && this.throwError("too many arguments" + r, v.errors.UNEXPECTED_ARGUMENT, {
                        count: t,
                        expectedCount: e
                    });
                }
                checkNew(t, e) {
                    t !== Object && null != t || this.throwError("missing new", v.errors.MISSING_NEW, {
                        name: e.name
                    });
                }
                checkAbstract(t, e) {
                    t === e ? this.throwError("cannot instantiate abstract class " + JSON.stringify(e.name) + " directly; use a sub-class", v.errors.UNSUPPORTED_OPERATION, {
                        name: t.name,
                        operation: "new"
                    }) : t !== Object && null != t || this.throwError("missing new", v.errors.MISSING_NEW, {
                        name: e.name
                    });
                }
                static globalLogger() {
                    return d || (d = new v("logger/5.7.0")), d;
                }
                static setCensorship(t, e) {
                    if (!t && e && this.globalLogger().throwError("cannot permanently disable censorship", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "setCensorship"
                    }), l) {
                        if (!t) return;
                        this.globalLogger().throwError("error censorship permanent", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "setCensorship"
                        });
                    }
                    c = !!t, l = !!e;
                }
                static setLogLevel(t) {
                    const e = h[t.toLowerCase()];
                    null != e ? f = e : v.globalLogger().warn("invalid log level - " + t);
                }
                static from(t) {
                    return new v(t);
                }
            }
            v.errors = g, v.levels = m;
            const b = new v("bytes/5.7.0");
            function w(t) {
                return !!t.toHexString;
            }
            function A(t) {
                return t.slice || (t.slice = function() {
                    const e = Array.prototype.slice.call(arguments);
                    return A(new Uint8Array(Array.prototype.slice.apply(t, e)));
                }), t;
            }
            function _(t) {
                return N(t) && !(t.length % 2) || M(t);
            }
            function E(t) {
                return "number" == typeof t && t == t && t % 1 == 0;
            }
            function M(t) {
                if (null == t) return !1;
                if (t.constructor === Uint8Array) return !0;
                if ("string" == typeof t) return !1;
                if (!E(t.length) || t.length < 0) return !1;
                for (let e = 0; e < t.length; e++) {
                    const r = t[e];
                    if (!E(r) || r < 0 || r >= 256) return !1;
                }
                return !0;
            }
            function P(t, e) {
                if (e || (e = {}), "number" == typeof t) {
                    b.checkSafeUint53(t, "invalid arrayify value");
                    const e = [];
                    for (;t; ) e.unshift(255 & t), t = parseInt(String(t / 256));
                    return 0 === e.length && e.push(0), A(new Uint8Array(e));
                }
                if (e.allowMissingPrefix && "string" == typeof t && "0x" !== t.substring(0, 2) && (t = "0x" + t), 
                w(t) && (t = t.toHexString()), N(t)) {
                    let r = t.substring(2);
                    r.length % 2 && ("left" === e.hexPad ? r = "0" + r : "right" === e.hexPad ? r += "0" : b.throwArgumentError("hex data is odd-length", "value", t));
                    const n = [];
                    for (let t = 0; t < r.length; t += 2) n.push(parseInt(r.substring(t, t + 2), 16));
                    return A(new Uint8Array(n));
                }
                return M(t) ? A(new Uint8Array(t)) : b.throwArgumentError("invalid arrayify value", "value", t);
            }
            function k(t) {
                const e = t.map((t => P(t))), r = e.reduce(((t, e) => t + e.length), 0), n = new Uint8Array(r);
                return e.reduce(((t, e) => (n.set(e, t), t + e.length)), 0), A(n);
            }
            function S(t) {
                let e = P(t);
                if (0 === e.length) return e;
                let r = 0;
                for (;r < e.length && 0 === e[r]; ) r++;
                return r && (e = e.slice(r)), e;
            }
            function O(t, e) {
                (t = P(t)).length > e && b.throwArgumentError("value out of range", "value", arguments[0]);
                const r = new Uint8Array(e);
                return r.set(t, e - t.length), A(r);
            }
            function N(t, e) {
                return !("string" != typeof t || !t.match(/^0x[0-9A-Fa-f]*$/)) && (!e || t.length === 2 + 2 * e);
            }
            const x = "0123456789abcdef";
            function I(t, e) {
                if (e || (e = {}), "number" == typeof t) {
                    b.checkSafeUint53(t, "invalid hexlify value");
                    let e = "";
                    for (;t; ) e = x[15 & t] + e, t = Math.floor(t / 16);
                    return e.length ? (e.length % 2 && (e = "0" + e), "0x" + e) : "0x00";
                }
                if ("bigint" == typeof t) return (t = t.toString(16)).length % 2 ? "0x0" + t : "0x" + t;
                if (e.allowMissingPrefix && "string" == typeof t && "0x" !== t.substring(0, 2) && (t = "0x" + t), 
                w(t)) return t.toHexString();
                if (N(t)) return t.length % 2 && ("left" === e.hexPad ? t = "0x0" + t.substring(2) : "right" === e.hexPad ? t += "0" : b.throwArgumentError("hex data is odd-length", "value", t)), 
                t.toLowerCase();
                if (M(t)) {
                    let e = "0x";
                    for (let r = 0; r < t.length; r++) {
                        let n = t[r];
                        e += x[(240 & n) >> 4] + x[15 & n];
                    }
                    return e;
                }
                return b.throwArgumentError("invalid hexlify value", "value", t);
            }
            function T(t) {
                if ("string" != typeof t) t = I(t); else if (!N(t) || t.length % 2) return null;
                return (t.length - 2) / 2;
            }
            function B(t, e, r) {
                return "string" != typeof t ? t = I(t) : (!N(t) || t.length % 2) && b.throwArgumentError("invalid hexData", "value", t), 
                e = 2 + 2 * e, null != r ? "0x" + t.substring(e, 2 + 2 * r) : "0x" + t.substring(e);
            }
            function C(t) {
                let e = "0x";
                return t.forEach((t => {
                    e += I(t).substring(2);
                })), e;
            }
            function R(t) {
                const e = j(I(t, {
                    hexPad: "left"
                }));
                return "0x" === e ? "0x0" : e;
            }
            function j(t) {
                "string" != typeof t && (t = I(t)), N(t) || b.throwArgumentError("invalid hex string", "value", t), 
                t = t.substring(2);
                let e = 0;
                for (;e < t.length && "0" === t[e]; ) e++;
                return "0x" + t.substring(e);
            }
            function F(t, e) {
                for ("string" != typeof t ? t = I(t) : N(t) || b.throwArgumentError("invalid hex string", "value", t), 
                t.length > 2 * e + 2 && b.throwArgumentError("value out of range", "value", arguments[1]); t.length < 2 * e + 2; ) t = "0x0" + t.substring(2);
                return t;
            }
            function U(t) {
                const e = {
                    r: "0x",
                    s: "0x",
                    _vs: "0x",
                    recoveryParam: 0,
                    v: 0,
                    yParityAndS: "0x",
                    compact: "0x"
                };
                if (_(t)) {
                    let r = P(t);
                    64 === r.length ? (e.v = 27 + (r[32] >> 7), r[32] &= 127, e.r = I(r.slice(0, 32)), 
                    e.s = I(r.slice(32, 64))) : 65 === r.length ? (e.r = I(r.slice(0, 32)), e.s = I(r.slice(32, 64)), 
                    e.v = r[64]) : b.throwArgumentError("invalid signature string", "signature", t), 
                    e.v < 27 && (0 === e.v || 1 === e.v ? e.v += 27 : b.throwArgumentError("signature invalid v byte", "signature", t)), 
                    e.recoveryParam = 1 - e.v % 2, e.recoveryParam && (r[32] |= 128), e._vs = I(r.slice(32, 64));
                } else {
                    if (e.r = t.r, e.s = t.s, e.v = t.v, e.recoveryParam = t.recoveryParam, e._vs = t._vs, 
                    null != e._vs) {
                        const r = O(P(e._vs), 32);
                        e._vs = I(r);
                        const n = r[0] >= 128 ? 1 : 0;
                        null == e.recoveryParam ? e.recoveryParam = n : e.recoveryParam !== n && b.throwArgumentError("signature recoveryParam mismatch _vs", "signature", t), 
                        r[0] &= 127;
                        const i = I(r);
                        null == e.s ? e.s = i : e.s !== i && b.throwArgumentError("signature v mismatch _vs", "signature", t);
                    }
                    if (null == e.recoveryParam) null == e.v ? b.throwArgumentError("signature missing v and recoveryParam", "signature", t) : 0 === e.v || 1 === e.v ? e.recoveryParam = e.v : e.recoveryParam = 1 - e.v % 2; else if (null == e.v) e.v = 27 + e.recoveryParam; else {
                        const r = 0 === e.v || 1 === e.v ? e.v : 1 - e.v % 2;
                        e.recoveryParam !== r && b.throwArgumentError("signature recoveryParam mismatch v", "signature", t);
                    }
                    null != e.r && N(e.r) ? e.r = F(e.r, 32) : b.throwArgumentError("signature missing or invalid r", "signature", t), 
                    null != e.s && N(e.s) ? e.s = F(e.s, 32) : b.throwArgumentError("signature missing or invalid s", "signature", t);
                    const r = P(e.s);
                    r[0] >= 128 && b.throwArgumentError("signature s out of range", "signature", t), 
                    e.recoveryParam && (r[0] |= 128);
                    const n = I(r);
                    e._vs && (N(e._vs) || b.throwArgumentError("signature invalid _vs", "signature", t), 
                    e._vs = F(e._vs, 32)), null == e._vs ? e._vs = n : e._vs !== n && b.throwArgumentError("signature _vs mismatch v and s", "signature", t);
                }
                return e.yParityAndS = e._vs, e.compact = e.r + e.yParityAndS.substring(2), e;
            }
            function L(t) {
                return I(k([ (t = U(t)).r, t.s, t.recoveryParam ? "0x1c" : "0x1b" ]));
            }
            var D = r(3550), G = r.n(D);
            const q = "bignumber/5.7.0";
            var z = G().BN;
            const H = new v(q), K = {}, W = 9007199254740991;
            let V = !1;
            class J {
                constructor(t, e) {
                    t !== K && H.throwError("cannot call constructor directly; use BigNumber.from", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "new (BigNumber)"
                    }), this._hex = e, this._isBigNumber = !0, Object.freeze(this);
                }
                fromTwos(t) {
                    return X(Y(this).fromTwos(t));
                }
                toTwos(t) {
                    return X(Y(this).toTwos(t));
                }
                abs() {
                    return "-" === this._hex[0] ? J.from(this._hex.substring(1)) : this;
                }
                add(t) {
                    return X(Y(this).add(Y(t)));
                }
                sub(t) {
                    return X(Y(this).sub(Y(t)));
                }
                div(t) {
                    return J.from(t).isZero() && Z("division-by-zero", "div"), X(Y(this).div(Y(t)));
                }
                mul(t) {
                    return X(Y(this).mul(Y(t)));
                }
                mod(t) {
                    const e = Y(t);
                    return e.isNeg() && Z("division-by-zero", "mod"), X(Y(this).umod(e));
                }
                pow(t) {
                    const e = Y(t);
                    return e.isNeg() && Z("negative-power", "pow"), X(Y(this).pow(e));
                }
                and(t) {
                    const e = Y(t);
                    return (this.isNegative() || e.isNeg()) && Z("unbound-bitwise-result", "and"), X(Y(this).and(e));
                }
                or(t) {
                    const e = Y(t);
                    return (this.isNegative() || e.isNeg()) && Z("unbound-bitwise-result", "or"), X(Y(this).or(e));
                }
                xor(t) {
                    const e = Y(t);
                    return (this.isNegative() || e.isNeg()) && Z("unbound-bitwise-result", "xor"), X(Y(this).xor(e));
                }
                mask(t) {
                    return (this.isNegative() || t < 0) && Z("negative-width", "mask"), X(Y(this).maskn(t));
                }
                shl(t) {
                    return (this.isNegative() || t < 0) && Z("negative-width", "shl"), X(Y(this).shln(t));
                }
                shr(t) {
                    return (this.isNegative() || t < 0) && Z("negative-width", "shr"), X(Y(this).shrn(t));
                }
                eq(t) {
                    return Y(this).eq(Y(t));
                }
                lt(t) {
                    return Y(this).lt(Y(t));
                }
                lte(t) {
                    return Y(this).lte(Y(t));
                }
                gt(t) {
                    return Y(this).gt(Y(t));
                }
                gte(t) {
                    return Y(this).gte(Y(t));
                }
                isNegative() {
                    return "-" === this._hex[0];
                }
                isZero() {
                    return Y(this).isZero();
                }
                toNumber() {
                    try {
                        return Y(this).toNumber();
                    } catch (t) {
                        Z("overflow", "toNumber", this.toString());
                    }
                    return null;
                }
                toBigInt() {
                    try {
                        return BigInt(this.toString());
                    } catch (t) {}
                    return H.throwError("this platform does not support BigInt", v.errors.UNSUPPORTED_OPERATION, {
                        value: this.toString()
                    });
                }
                toString() {
                    return arguments.length > 0 && (10 === arguments[0] ? V || (V = !0, H.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? H.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", v.errors.UNEXPECTED_ARGUMENT, {}) : H.throwError("BigNumber.toString does not accept parameters", v.errors.UNEXPECTED_ARGUMENT, {})), 
                    Y(this).toString(10);
                }
                toHexString() {
                    return this._hex;
                }
                toJSON(t) {
                    return {
                        type: "BigNumber",
                        hex: this.toHexString()
                    };
                }
                static from(t) {
                    if (t instanceof J) return t;
                    if ("string" == typeof t) return t.match(/^-?0x[0-9a-f]+$/i) ? new J(K, Q(t)) : t.match(/^-?[0-9]+$/) ? new J(K, Q(new z(t))) : H.throwArgumentError("invalid BigNumber string", "value", t);
                    if ("number" == typeof t) return t % 1 && Z("underflow", "BigNumber.from", t), (t >= W || t <= -W) && Z("overflow", "BigNumber.from", t), 
                    J.from(String(t));
                    const e = t;
                    if ("bigint" == typeof e) return J.from(e.toString());
                    if (M(e)) return J.from(I(e));
                    if (e) if (e.toHexString) {
                        const t = e.toHexString();
                        if ("string" == typeof t) return J.from(t);
                    } else {
                        let t = e._hex;
                        if (null == t && "BigNumber" === e.type && (t = e.hex), "string" == typeof t && (N(t) || "-" === t[0] && N(t.substring(1)))) return J.from(t);
                    }
                    return H.throwArgumentError("invalid BigNumber value", "value", t);
                }
                static isBigNumber(t) {
                    return !(!t || !t._isBigNumber);
                }
            }
            function Q(t) {
                if ("string" != typeof t) return Q(t.toString(16));
                if ("-" === t[0]) return "-" === (t = t.substring(1))[0] && H.throwArgumentError("invalid hex", "value", t), 
                "0x00" === (t = Q(t)) ? t : "-" + t;
                if ("0x" !== t.substring(0, 2) && (t = "0x" + t), "0x" === t) return "0x00";
                for (t.length % 2 && (t = "0x0" + t.substring(2)); t.length > 4 && "0x00" === t.substring(0, 4); ) t = "0x" + t.substring(4);
                return t;
            }
            function X(t) {
                return J.from(Q(t));
            }
            function Y(t) {
                const e = J.from(t).toHexString();
                return "-" === e[0] ? new z("-" + e.substring(3), 16) : new z(e.substring(2), 16);
            }
            function Z(t, e, r) {
                const n = {
                    fault: t,
                    operation: e
                };
                return null != r && (n.value = r), H.throwError(t, v.errors.NUMERIC_FAULT, n);
            }
            var $ = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const tt = new v("properties/5.7.0");
            function et(t, e, r) {
                Object.defineProperty(t, e, {
                    enumerable: !0,
                    value: r,
                    writable: !1
                });
            }
            function rt(t, e) {
                for (let r = 0; r < 32; r++) {
                    if (t[e]) return t[e];
                    if (!t.prototype || "object" != typeof t.prototype) break;
                    t = Object.getPrototypeOf(t.prototype).constructor;
                }
                return null;
            }
            function nt(t) {
                return $(this, void 0, void 0, (function*() {
                    const e = Object.keys(t).map((e => {
                        const r = t[e];
                        return Promise.resolve(r).then((t => ({
                            key: e,
                            value: t
                        })));
                    }));
                    return (yield Promise.all(e)).reduce(((t, e) => (t[e.key] = e.value, t)), {});
                }));
            }
            function it(t, e) {
                t && "object" == typeof t || tt.throwArgumentError("invalid object", "object", t), 
                Object.keys(t).forEach((r => {
                    e[r] || tt.throwArgumentError("invalid object key - " + r, "transaction:" + r, t);
                }));
            }
            function ot(t) {
                const e = {};
                for (const r in t) e[r] = t[r];
                return e;
            }
            const st = {
                bigint: !0,
                boolean: !0,
                function: !0,
                number: !0,
                string: !0
            };
            function at(t) {
                if (null == t || st[typeof t]) return !0;
                if (Array.isArray(t) || "object" == typeof t) {
                    if (!Object.isFrozen(t)) return !1;
                    const e = Object.keys(t);
                    for (let r = 0; r < e.length; r++) {
                        let n = null;
                        try {
                            n = t[e[r]];
                        } catch (t) {
                            continue;
                        }
                        if (!at(n)) return !1;
                    }
                    return !0;
                }
                return tt.throwArgumentError("Cannot deepCopy " + typeof t, "object", t);
            }
            function ut(t) {
                if (at(t)) return t;
                if (Array.isArray(t)) return Object.freeze(t.map((t => lt(t))));
                if ("object" == typeof t) {
                    const e = {};
                    for (const r in t) {
                        const n = t[r];
                        void 0 !== n && et(e, r, lt(n));
                    }
                    return e;
                }
                return tt.throwArgumentError("Cannot deepCopy " + typeof t, "object", t);
            }
            function lt(t) {
                return ut(t);
            }
            class ct {
                constructor(t) {
                    for (const e in t) this[e] = lt(t[e]);
                }
            }
            const ht = "abi/5.7.0", ft = new v(ht);
            function dt(t) {
                const e = [], r = function(t, n) {
                    if (Array.isArray(n)) for (let i in n) {
                        const o = t.slice();
                        o.push(i);
                        try {
                            r(o, n[i]);
                        } catch (t) {
                            e.push({
                                path: o,
                                error: t
                            });
                        }
                    }
                };
                return r([], t), e;
            }
            class pt {
                constructor(t, e, r, n) {
                    this.name = t, this.type = e, this.localName = r, this.dynamic = n;
                }
                _throwError(t, e) {
                    ft.throwArgumentError(t, this.localName, e);
                }
            }
            class mt {
                constructor(t) {
                    et(this, "wordSize", t || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(t);
                }
                get data() {
                    return C(this._data);
                }
                get length() {
                    return this._dataLength;
                }
                _writeData(t) {
                    return this._data.push(t), this._dataLength += t.length, t.length;
                }
                appendWriter(t) {
                    return this._writeData(k(t._data));
                }
                writeBytes(t) {
                    let e = P(t);
                    const r = e.length % this.wordSize;
                    return r && (e = k([ e, this._padding.slice(r) ])), this._writeData(e);
                }
                _getValue(t) {
                    let e = P(J.from(t));
                    return e.length > this.wordSize && ft.throwError("value out-of-bounds", v.errors.BUFFER_OVERRUN, {
                        length: this.wordSize,
                        offset: e.length
                    }), e.length % this.wordSize && (e = k([ this._padding.slice(e.length % this.wordSize), e ])), 
                    e;
                }
                writeValue(t) {
                    return this._writeData(this._getValue(t));
                }
                writeUpdatableValue() {
                    const t = this._data.length;
                    return this._data.push(this._padding), this._dataLength += this.wordSize, e => {
                        this._data[t] = this._getValue(e);
                    };
                }
            }
            class gt {
                constructor(t, e, r, n) {
                    et(this, "_data", P(t)), et(this, "wordSize", e || 32), et(this, "_coerceFunc", r), 
                    et(this, "allowLoose", n), this._offset = 0;
                }
                get data() {
                    return I(this._data);
                }
                get consumed() {
                    return this._offset;
                }
                static coerce(t, e) {
                    let r = t.match("^u?int([0-9]+)$");
                    return r && parseInt(r[1]) <= 48 && (e = e.toNumber()), e;
                }
                coerce(t, e) {
                    return this._coerceFunc ? this._coerceFunc(t, e) : gt.coerce(t, e);
                }
                _peekBytes(t, e, r) {
                    let n = Math.ceil(e / this.wordSize) * this.wordSize;
                    return this._offset + n > this._data.length && (this.allowLoose && r && this._offset + e <= this._data.length ? n = e : ft.throwError("data out-of-bounds", v.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + n
                    })), this._data.slice(this._offset, this._offset + n);
                }
                subReader(t) {
                    return new gt(this._data.slice(this._offset + t), this.wordSize, this._coerceFunc, this.allowLoose);
                }
                readBytes(t, e) {
                    let r = this._peekBytes(0, t, !!e);
                    return this._offset += r.length, r.slice(0, t);
                }
                readValue() {
                    return J.from(this.readBytes(this.wordSize));
                }
            }
            var yt = r(1094), vt = r.n(yt);
            function bt(t) {
                return "0x" + vt().keccak_256(P(t));
            }
            const wt = new v("rlp/5.7.0");
            function At(t) {
                const e = [];
                for (;t; ) e.unshift(255 & t), t >>= 8;
                return e;
            }
            function _t(t, e, r) {
                let n = 0;
                for (let i = 0; i < r; i++) n = 256 * n + t[e + i];
                return n;
            }
            function Et(t) {
                if (Array.isArray(t)) {
                    let e = [];
                    if (t.forEach((function(t) {
                        e = e.concat(Et(t));
                    })), e.length <= 55) return e.unshift(192 + e.length), e;
                    const r = At(e.length);
                    return r.unshift(247 + r.length), r.concat(e);
                }
                _(t) || wt.throwArgumentError("RLP object must be BytesLike", "object", t);
                const e = Array.prototype.slice.call(P(t));
                if (1 === e.length && e[0] <= 127) return e;
                if (e.length <= 55) return e.unshift(128 + e.length), e;
                const r = At(e.length);
                return r.unshift(183 + r.length), r.concat(e);
            }
            function Mt(t) {
                return I(Et(t));
            }
            function Pt(t, e, r, n) {
                const i = [];
                for (;r < e + 1 + n; ) {
                    const o = kt(t, r);
                    i.push(o.result), (r += o.consumed) > e + 1 + n && wt.throwError("child data too short", v.errors.BUFFER_OVERRUN, {});
                }
                return {
                    consumed: 1 + n,
                    result: i
                };
            }
            function kt(t, e) {
                if (0 === t.length && wt.throwError("data too short", v.errors.BUFFER_OVERRUN, {}), 
                t[e] >= 248) {
                    const r = t[e] - 247;
                    e + 1 + r > t.length && wt.throwError("data short segment too short", v.errors.BUFFER_OVERRUN, {});
                    const n = _t(t, e + 1, r);
                    return e + 1 + r + n > t.length && wt.throwError("data long segment too short", v.errors.BUFFER_OVERRUN, {}), 
                    Pt(t, e, e + 1 + r, r + n);
                }
                if (t[e] >= 192) {
                    const r = t[e] - 192;
                    return e + 1 + r > t.length && wt.throwError("data array too short", v.errors.BUFFER_OVERRUN, {}), 
                    Pt(t, e, e + 1, r);
                }
                if (t[e] >= 184) {
                    const r = t[e] - 183;
                    e + 1 + r > t.length && wt.throwError("data array too short", v.errors.BUFFER_OVERRUN, {});
                    const n = _t(t, e + 1, r);
                    e + 1 + r + n > t.length && wt.throwError("data array too short", v.errors.BUFFER_OVERRUN, {});
                    return {
                        consumed: 1 + r + n,
                        result: I(t.slice(e + 1 + r, e + 1 + r + n))
                    };
                }
                if (t[e] >= 128) {
                    const r = t[e] - 128;
                    e + 1 + r > t.length && wt.throwError("data too short", v.errors.BUFFER_OVERRUN, {});
                    return {
                        consumed: 1 + r,
                        result: I(t.slice(e + 1, e + 1 + r))
                    };
                }
                return {
                    consumed: 1,
                    result: I(t[e])
                };
            }
            function St(t) {
                const e = P(t), r = kt(e, 0);
                return r.consumed !== e.length && wt.throwArgumentError("invalid rlp data", "data", t), 
                r.result;
            }
            const Ot = new v("address/5.7.0");
            function Nt(t) {
                N(t, 20) || Ot.throwArgumentError("invalid address", "address", t);
                const e = (t = t.toLowerCase()).substring(2).split(""), r = new Uint8Array(40);
                for (let t = 0; t < 40; t++) r[t] = e[t].charCodeAt(0);
                const n = P(bt(r));
                for (let t = 0; t < 40; t += 2) n[t >> 1] >> 4 >= 8 && (e[t] = e[t].toUpperCase()), 
                (15 & n[t >> 1]) >= 8 && (e[t + 1] = e[t + 1].toUpperCase());
                return "0x" + e.join("");
            }
            const xt = {};
            for (let t = 0; t < 10; t++) xt[String(t)] = String(t);
            for (let t = 0; t < 26; t++) xt[String.fromCharCode(65 + t)] = String(10 + t);
            const It = Math.floor((Tt = 9007199254740991, Math.log10 ? Math.log10(Tt) : Math.log(Tt) / Math.LN10));
            var Tt;
            function Bt(t) {
                let e = (t = (t = t.toUpperCase()).substring(4) + t.substring(0, 2) + "00").split("").map((t => xt[t])).join("");
                for (;e.length >= It; ) {
                    let t = e.substring(0, It);
                    e = parseInt(t, 10) % 97 + e.substring(t.length);
                }
                let r = String(98 - parseInt(e, 10) % 97);
                for (;r.length < 2; ) r = "0" + r;
                return r;
            }
            function Ct(t) {
                let e = null;
                if ("string" != typeof t && Ot.throwArgumentError("invalid address", "address", t), 
                t.match(/^(0x)?[0-9a-fA-F]{40}$/)) "0x" !== t.substring(0, 2) && (t = "0x" + t), 
                e = Nt(t), t.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && e !== t && Ot.throwArgumentError("bad address checksum", "address", t); else if (t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                    for (t.substring(2, 4) !== Bt(t) && Ot.throwArgumentError("bad icap checksum", "address", t), 
                    r = t.substring(4), e = new z(r, 36).toString(16); e.length < 40; ) e = "0" + e;
                    e = Nt("0x" + e);
                } else Ot.throwArgumentError("invalid address", "address", t);
                var r;
                return e;
            }
            function Rt(t) {
                try {
                    return Ct(t), !0;
                } catch (t) {}
                return !1;
            }
            function jt(t) {
                let e = (r = Ct(t).substring(2), new z(r, 16).toString(36)).toUpperCase();
                for (var r; e.length < 30; ) e = "0" + e;
                return "XE" + Bt("XE00" + e) + e;
            }
            function Ft(t) {
                let e = null;
                try {
                    e = Ct(t.from);
                } catch (e) {
                    Ot.throwArgumentError("missing from address", "transaction", t);
                }
                return Ct(B(bt(Mt([ e, S(P(J.from(t.nonce).toHexString())) ])), 12));
            }
            function Ut(t, e, r) {
                return 32 !== T(e) && Ot.throwArgumentError("salt must be 32 bytes", "salt", e), 
                32 !== T(r) && Ot.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", r), 
                Ct(B(bt(k([ "0xff", Ct(t), e, r ])), 12));
            }
            const Lt = new v("strings/5.7.0");
            var Dt, Gt;
            function qt(t, e, r, n, i) {
                if (t === Gt.BAD_PREFIX || t === Gt.UNEXPECTED_CONTINUE) {
                    let t = 0;
                    for (let n = e + 1; n < r.length && r[n] >> 6 == 2; n++) t++;
                    return t;
                }
                return t === Gt.OVERRUN ? r.length - e - 1 : 0;
            }
            !function(t) {
                t.current = "", t.NFC = "NFC", t.NFD = "NFD", t.NFKC = "NFKC", t.NFKD = "NFKD";
            }(Dt || (Dt = {})), function(t) {
                t.UNEXPECTED_CONTINUE = "unexpected continuation byte", t.BAD_PREFIX = "bad codepoint prefix", 
                t.OVERRUN = "string overrun", t.MISSING_CONTINUE = "missing continuation byte", 
                t.OUT_OF_RANGE = "out of UTF-8 range", t.UTF16_SURROGATE = "UTF-16 surrogate", t.OVERLONG = "overlong representation";
            }(Gt || (Gt = {}));
            const zt = Object.freeze({
                error: function(t, e, r, n, i) {
                    return Lt.throwArgumentError(`invalid codepoint at offset ${e}; ${t}`, "bytes", r);
                },
                ignore: qt,
                replace: function(t, e, r, n, i) {
                    return t === Gt.OVERLONG ? (n.push(i), 0) : (n.push(65533), qt(t, e, r));
                }
            });
            function Ht(t, e) {
                null == e && (e = zt.error), t = P(t);
                const r = [];
                let n = 0;
                for (;n < t.length; ) {
                    const i = t[n++];
                    if (i >> 7 == 0) {
                        r.push(i);
                        continue;
                    }
                    let o = null, s = null;
                    if (192 == (224 & i)) o = 1, s = 127; else if (224 == (240 & i)) o = 2, s = 2047; else {
                        if (240 != (248 & i)) {
                            n += e(128 == (192 & i) ? Gt.UNEXPECTED_CONTINUE : Gt.BAD_PREFIX, n - 1, t, r);
                            continue;
                        }
                        o = 3, s = 65535;
                    }
                    if (n - 1 + o >= t.length) {
                        n += e(Gt.OVERRUN, n - 1, t, r);
                        continue;
                    }
                    let a = i & (1 << 8 - o - 1) - 1;
                    for (let i = 0; i < o; i++) {
                        let i = t[n];
                        if (128 != (192 & i)) {
                            n += e(Gt.MISSING_CONTINUE, n, t, r), a = null;
                            break;
                        }
                        a = a << 6 | 63 & i, n++;
                    }
                    null !== a && (a > 1114111 ? n += e(Gt.OUT_OF_RANGE, n - 1 - o, t, r, a) : a >= 55296 && a <= 57343 ? n += e(Gt.UTF16_SURROGATE, n - 1 - o, t, r, a) : a <= s ? n += e(Gt.OVERLONG, n - 1 - o, t, r, a) : r.push(a));
                }
                return r;
            }
            function Kt(t, e = Dt.current) {
                e != Dt.current && (Lt.checkNormalize(), t = t.normalize(e));
                let r = [];
                for (let e = 0; e < t.length; e++) {
                    const n = t.charCodeAt(e);
                    if (n < 128) r.push(n); else if (n < 2048) r.push(n >> 6 | 192), r.push(63 & n | 128); else if (55296 == (64512 & n)) {
                        e++;
                        const i = t.charCodeAt(e);
                        if (e >= t.length || 56320 != (64512 & i)) throw new Error("invalid utf-8 string");
                        const o = 65536 + ((1023 & n) << 10) + (1023 & i);
                        r.push(o >> 18 | 240), r.push(o >> 12 & 63 | 128), r.push(o >> 6 & 63 | 128), r.push(63 & o | 128);
                    } else r.push(n >> 12 | 224), r.push(n >> 6 & 63 | 128), r.push(63 & n | 128);
                }
                return P(r);
            }
            function Wt(t) {
                const e = "0000" + t.toString(16);
                return "\\u" + e.substring(e.length - 4);
            }
            function Vt(t, e) {
                return '"' + Ht(t, e).map((t => {
                    if (t < 256) {
                        switch (t) {
                          case 8:
                            return "\\b";

                          case 9:
                            return "\\t";

                          case 10:
                            return "\\n";

                          case 13:
                            return "\\r";

                          case 34:
                            return '\\"';

                          case 92:
                            return "\\\\";
                        }
                        if (t >= 32 && t < 127) return String.fromCharCode(t);
                    }
                    return t <= 65535 ? Wt(t) : Wt(55296 + ((t -= 65536) >> 10 & 1023)) + Wt(56320 + (1023 & t));
                })).join("") + '"';
            }
            function Jt(t) {
                return t.map((t => t <= 65535 ? String.fromCharCode(t) : (t -= 65536, String.fromCharCode(55296 + (t >> 10 & 1023), 56320 + (1023 & t))))).join("");
            }
            function Qt(t, e) {
                return Jt(Ht(t, e));
            }
            function Xt(t, e = Dt.current) {
                return Ht(Kt(t, e));
            }
            function Yt(t) {
                return bt(Kt(t));
            }
            class Zt extends pt {
                constructor(t) {
                    super("address", "address", t, !1);
                }
                defaultValue() {
                    return "0x0000000000000000000000000000000000000000";
                }
                encode(t, e) {
                    try {
                        e = Ct(e);
                    } catch (t) {
                        this._throwError(t.message, e);
                    }
                    return t.writeValue(e);
                }
                decode(t) {
                    return Ct(F(t.readValue().toHexString(), 20));
                }
            }
            class $t extends pt {
                constructor(t) {
                    super(t.name, t.type, void 0, t.dynamic), this.coder = t;
                }
                defaultValue() {
                    return this.coder.defaultValue();
                }
                encode(t, e) {
                    return this.coder.encode(t, e);
                }
                decode(t) {
                    return this.coder.decode(t);
                }
            }
            const te = new v(ht);
            function ee(t, e, r) {
                let n = null;
                if (Array.isArray(r)) n = r; else if (r && "object" == typeof r) {
                    let t = {};
                    n = e.map((e => {
                        const n = e.localName;
                        return n || te.throwError("cannot encode object for signature with missing names", v.errors.INVALID_ARGUMENT, {
                            argument: "values",
                            coder: e,
                            value: r
                        }), t[n] && te.throwError("cannot encode object for signature with duplicate names", v.errors.INVALID_ARGUMENT, {
                            argument: "values",
                            coder: e,
                            value: r
                        }), t[n] = !0, r[n];
                    }));
                } else te.throwArgumentError("invalid tuple value", "tuple", r);
                e.length !== n.length && te.throwArgumentError("types/value length mismatch", "tuple", r);
                let i = new mt(t.wordSize), o = new mt(t.wordSize), s = [];
                e.forEach(((t, e) => {
                    let r = n[e];
                    if (t.dynamic) {
                        let e = o.length;
                        t.encode(o, r);
                        let n = i.writeUpdatableValue();
                        s.push((t => {
                            n(t + e);
                        }));
                    } else t.encode(i, r);
                })), s.forEach((t => {
                    t(i.length);
                }));
                let a = t.appendWriter(i);
                return a += t.appendWriter(o), a;
            }
            function re(t, e) {
                let r = [], n = t.subReader(0);
                e.forEach((e => {
                    let i = null;
                    if (e.dynamic) {
                        let r = t.readValue(), o = n.subReader(r.toNumber());
                        try {
                            i = e.decode(o);
                        } catch (t) {
                            if (t.code === v.errors.BUFFER_OVERRUN) throw t;
                            i = t, i.baseType = e.name, i.name = e.localName, i.type = e.type;
                        }
                    } else try {
                        i = e.decode(t);
                    } catch (t) {
                        if (t.code === v.errors.BUFFER_OVERRUN) throw t;
                        i = t, i.baseType = e.name, i.name = e.localName, i.type = e.type;
                    }
                    null != i && r.push(i);
                }));
                const i = e.reduce(((t, e) => {
                    const r = e.localName;
                    return r && (t[r] || (t[r] = 0), t[r]++), t;
                }), {});
                e.forEach(((t, e) => {
                    let n = t.localName;
                    if (!n || 1 !== i[n]) return;
                    if ("length" === n && (n = "_length"), null != r[n]) return;
                    const o = r[e];
                    o instanceof Error ? Object.defineProperty(r, n, {
                        enumerable: !0,
                        get: () => {
                            throw o;
                        }
                    }) : r[n] = o;
                }));
                for (let t = 0; t < r.length; t++) {
                    const e = r[t];
                    e instanceof Error && Object.defineProperty(r, t, {
                        enumerable: !0,
                        get: () => {
                            throw e;
                        }
                    });
                }
                return Object.freeze(r);
            }
            class ne extends pt {
                constructor(t, e, r) {
                    super("array", t.type + "[" + (e >= 0 ? e : "") + "]", r, -1 === e || t.dynamic), 
                    this.coder = t, this.length = e;
                }
                defaultValue() {
                    const t = this.coder.defaultValue(), e = [];
                    for (let r = 0; r < this.length; r++) e.push(t);
                    return e;
                }
                encode(t, e) {
                    Array.isArray(e) || this._throwError("expected array value", e);
                    let r = this.length;
                    -1 === r && (r = e.length, t.writeValue(e.length)), te.checkArgumentCount(e.length, r, "coder array" + (this.localName ? " " + this.localName : ""));
                    let n = [];
                    for (let t = 0; t < e.length; t++) n.push(this.coder);
                    return ee(t, n, e);
                }
                decode(t) {
                    let e = this.length;
                    -1 === e && (e = t.readValue().toNumber(), 32 * e > t._data.length && te.throwError("insufficient data length", v.errors.BUFFER_OVERRUN, {
                        length: t._data.length,
                        count: e
                    }));
                    let r = [];
                    for (let t = 0; t < e; t++) r.push(new $t(this.coder));
                    return t.coerce(this.name, re(t, r));
                }
            }
            class ie extends pt {
                constructor(t) {
                    super("bool", "bool", t, !1);
                }
                defaultValue() {
                    return !1;
                }
                encode(t, e) {
                    return t.writeValue(e ? 1 : 0);
                }
                decode(t) {
                    return t.coerce(this.type, !t.readValue().isZero());
                }
            }
            class oe extends pt {
                constructor(t, e) {
                    super(t, t, e, !0);
                }
                defaultValue() {
                    return "0x";
                }
                encode(t, e) {
                    e = P(e);
                    let r = t.writeValue(e.length);
                    return r += t.writeBytes(e), r;
                }
                decode(t) {
                    return t.readBytes(t.readValue().toNumber(), !0);
                }
            }
            class se extends oe {
                constructor(t) {
                    super("bytes", t);
                }
                decode(t) {
                    return t.coerce(this.name, I(super.decode(t)));
                }
            }
            class ae extends pt {
                constructor(t, e) {
                    let r = "bytes" + String(t);
                    super(r, r, e, !1), this.size = t;
                }
                defaultValue() {
                    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
                }
                encode(t, e) {
                    let r = P(e);
                    return r.length !== this.size && this._throwError("incorrect data length", e), t.writeBytes(r);
                }
                decode(t) {
                    return t.coerce(this.name, I(t.readBytes(this.size)));
                }
            }
            class ue extends pt {
                constructor(t) {
                    super("null", "", t, !1);
                }
                defaultValue() {
                    return null;
                }
                encode(t, e) {
                    return null != e && this._throwError("not null", e), t.writeBytes([]);
                }
                decode(t) {
                    return t.readBytes(0), t.coerce(this.name, null);
                }
            }
            const le = J.from(-1), ce = J.from(0), he = J.from(1), fe = J.from(2), de = J.from("1000000000000000000"), pe = J.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), me = J.from("-0x8000000000000000000000000000000000000000000000000000000000000000"), ge = J.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
            class ye extends pt {
                constructor(t, e, r) {
                    const n = (e ? "int" : "uint") + 8 * t;
                    super(n, n, r, !1), this.size = t, this.signed = e;
                }
                defaultValue() {
                    return 0;
                }
                encode(t, e) {
                    let r = J.from(e), n = pe.mask(8 * t.wordSize);
                    if (this.signed) {
                        let t = n.mask(8 * this.size - 1);
                        (r.gt(t) || r.lt(t.add(he).mul(le))) && this._throwError("value out-of-bounds", e);
                    } else (r.lt(ce) || r.gt(n.mask(8 * this.size))) && this._throwError("value out-of-bounds", e);
                    return r = r.toTwos(8 * this.size).mask(8 * this.size), this.signed && (r = r.fromTwos(8 * this.size).toTwos(8 * t.wordSize)), 
                    t.writeValue(r);
                }
                decode(t) {
                    let e = t.readValue().mask(8 * this.size);
                    return this.signed && (e = e.fromTwos(8 * this.size)), t.coerce(this.name, e);
                }
            }
            class ve extends oe {
                constructor(t) {
                    super("string", t);
                }
                defaultValue() {
                    return "";
                }
                encode(t, e) {
                    return super.encode(t, Kt(e));
                }
                decode(t) {
                    return Qt(super.decode(t));
                }
            }
            class be extends pt {
                constructor(t, e) {
                    let r = !1;
                    const n = [];
                    t.forEach((t => {
                        t.dynamic && (r = !0), n.push(t.type);
                    }));
                    super("tuple", "tuple(" + n.join(",") + ")", e, r), this.coders = t;
                }
                defaultValue() {
                    const t = [];
                    this.coders.forEach((e => {
                        t.push(e.defaultValue());
                    }));
                    const e = this.coders.reduce(((t, e) => {
                        const r = e.localName;
                        return r && (t[r] || (t[r] = 0), t[r]++), t;
                    }), {});
                    return this.coders.forEach(((r, n) => {
                        let i = r.localName;
                        i && 1 === e[i] && ("length" === i && (i = "_length"), null == t[i] && (t[i] = t[n]));
                    })), Object.freeze(t);
                }
                encode(t, e) {
                    return ee(t, this.coders, e);
                }
                decode(t) {
                    return t.coerce(this.name, re(t, this.coders));
                }
            }
            const we = new v(ht), Ae = {};
            let _e = {
                calldata: !0,
                memory: !0,
                storage: !0
            }, Ee = {
                calldata: !0,
                memory: !0
            };
            function Me(t, e) {
                if ("bytes" === t || "string" === t) {
                    if (_e[e]) return !0;
                } else if ("address" === t) {
                    if ("payable" === e) return !0;
                } else if ((t.indexOf("[") >= 0 || "tuple" === t) && Ee[e]) return !0;
                return (_e[e] || "payable" === e) && we.throwArgumentError("invalid modifier", "name", e), 
                !1;
            }
            function Pe(t, e) {
                for (let r in e) et(t, r, e[r]);
            }
            const ke = Object.freeze({
                sighash: "sighash",
                minimal: "minimal",
                full: "full",
                json: "json"
            }), Se = new RegExp(/^(.*)\[([0-9]*)\]$/);
            class Oe {
                constructor(t, e) {
                    t !== Ae && we.throwError("use fromString", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "new ParamType()"
                    }), Pe(this, e);
                    let r = this.type.match(Se);
                    Pe(this, r ? {
                        arrayLength: parseInt(r[2] || "-1"),
                        arrayChildren: Oe.fromObject({
                            type: r[1],
                            components: this.components
                        }),
                        baseType: "array"
                    } : {
                        arrayLength: null,
                        arrayChildren: null,
                        baseType: null != this.components ? "tuple" : this.type
                    }), this._isParamType = !0, Object.freeze(this);
                }
                format(t) {
                    if (t || (t = ke.sighash), ke[t] || we.throwArgumentError("invalid format type", "format", t), 
                    t === ke.json) {
                        let e = {
                            type: "tuple" === this.baseType ? "tuple" : this.type,
                            name: this.name || void 0
                        };
                        return "boolean" == typeof this.indexed && (e.indexed = this.indexed), this.components && (e.components = this.components.map((e => JSON.parse(e.format(t))))), 
                        JSON.stringify(e);
                    }
                    let e = "";
                    return "array" === this.baseType ? (e += this.arrayChildren.format(t), e += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : "tuple" === this.baseType ? (t !== ke.sighash && (e += this.type), 
                    e += "(" + this.components.map((e => e.format(t))).join(t === ke.full ? ", " : ",") + ")") : e += this.type, 
                    t !== ke.sighash && (!0 === this.indexed && (e += " indexed"), t === ke.full && this.name && (e += " " + this.name)), 
                    e;
                }
                static from(t, e) {
                    return "string" == typeof t ? Oe.fromString(t, e) : Oe.fromObject(t);
                }
                static fromObject(t) {
                    return Oe.isParamType(t) ? t : new Oe(Ae, {
                        name: t.name || null,
                        type: Le(t.type),
                        indexed: null == t.indexed ? null : !!t.indexed,
                        components: t.components ? t.components.map(Oe.fromObject) : null
                    });
                }
                static fromString(t, e) {
                    return r = function(t, e) {
                        let r = t;
                        function n(e) {
                            we.throwArgumentError(`unexpected character at position ${e}`, "param", t);
                        }
                        function i(t) {
                            let r = {
                                type: "",
                                name: "",
                                parent: t,
                                state: {
                                    allowType: !0
                                }
                            };
                            return e && (r.indexed = !1), r;
                        }
                        t = t.replace(/\s/g, " ");
                        let o = {
                            type: "",
                            name: "",
                            state: {
                                allowType: !0
                            }
                        }, s = o;
                        for (let r = 0; r < t.length; r++) {
                            let o = t[r];
                            switch (o) {
                              case "(":
                                s.state.allowType && "" === s.type ? s.type = "tuple" : s.state.allowParams || n(r), 
                                s.state.allowType = !1, s.type = Le(s.type), s.components = [ i(s) ], s = s.components[0];
                                break;

                              case ")":
                                delete s.state, "indexed" === s.name && (e || n(r), s.indexed = !0, s.name = ""), 
                                Me(s.type, s.name) && (s.name = ""), s.type = Le(s.type);
                                let t = s;
                                s = s.parent, s || n(r), delete t.parent, s.state.allowParams = !1, s.state.allowName = !0, 
                                s.state.allowArray = !0;
                                break;

                              case ",":
                                delete s.state, "indexed" === s.name && (e || n(r), s.indexed = !0, s.name = ""), 
                                Me(s.type, s.name) && (s.name = ""), s.type = Le(s.type);
                                let a = i(s.parent);
                                s.parent.components.push(a), delete s.parent, s = a;
                                break;

                              case " ":
                                s.state.allowType && "" !== s.type && (s.type = Le(s.type), delete s.state.allowType, 
                                s.state.allowName = !0, s.state.allowParams = !0), s.state.allowName && "" !== s.name && ("indexed" === s.name ? (e || n(r), 
                                s.indexed && n(r), s.indexed = !0, s.name = "") : Me(s.type, s.name) ? s.name = "" : s.state.allowName = !1);
                                break;

                              case "[":
                                s.state.allowArray || n(r), s.type += o, s.state.allowArray = !1, s.state.allowName = !1, 
                                s.state.readArray = !0;
                                break;

                              case "]":
                                s.state.readArray || n(r), s.type += o, s.state.readArray = !1, s.state.allowArray = !0, 
                                s.state.allowName = !0;
                                break;

                              default:
                                s.state.allowType ? (s.type += o, s.state.allowParams = !0, s.state.allowArray = !0) : s.state.allowName ? (s.name += o, 
                                delete s.state.allowArray) : s.state.readArray ? s.type += o : n(r);
                            }
                        }
                        return s.parent && we.throwArgumentError("unexpected eof", "param", t), delete o.state, 
                        "indexed" === s.name ? (e || n(r.length - 7), s.indexed && n(r.length - 7), s.indexed = !0, 
                        s.name = "") : Me(s.type, s.name) && (s.name = ""), o.type = Le(o.type), o;
                    }(t, !!e), Oe.fromObject({
                        name: r.name,
                        type: r.type,
                        indexed: r.indexed,
                        components: r.components
                    });
                    var r;
                }
                static isParamType(t) {
                    return !(null == t || !t._isParamType);
                }
            }
            function Ne(t, e) {
                return function(t) {
                    t = t.trim();
                    let e = [], r = "", n = 0;
                    for (let i = 0; i < t.length; i++) {
                        let o = t[i];
                        "," === o && 0 === n ? (e.push(r), r = "") : (r += o, "(" === o ? n++ : ")" === o && (n--, 
                        -1 === n && we.throwArgumentError("unbalanced parenthesis", "value", t)));
                    }
                    r && e.push(r);
                    return e;
                }(t).map((t => Oe.fromString(t, e)));
            }
            class xe {
                constructor(t, e) {
                    t !== Ae && we.throwError("use a static from method", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Fragment()"
                    }), Pe(this, e), this._isFragment = !0, Object.freeze(this);
                }
                static from(t) {
                    return xe.isFragment(t) ? t : "string" == typeof t ? xe.fromString(t) : xe.fromObject(t);
                }
                static fromObject(t) {
                    if (xe.isFragment(t)) return t;
                    switch (t.type) {
                      case "function":
                        return je.fromObject(t);

                      case "event":
                        return Ie.fromObject(t);

                      case "constructor":
                        return Re.fromObject(t);

                      case "error":
                        return Ue.fromObject(t);

                      case "fallback":
                      case "receive":
                        return null;
                    }
                    return we.throwArgumentError("invalid fragment object", "value", t);
                }
                static fromString(t) {
                    return "event" === (t = (t = (t = t.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).split(" ")[0] ? Ie.fromString(t.substring(5).trim()) : "function" === t.split(" ")[0] ? je.fromString(t.substring(8).trim()) : "constructor" === t.split("(")[0].trim() ? Re.fromString(t.trim()) : "error" === t.split(" ")[0] ? Ue.fromString(t.substring(5).trim()) : we.throwArgumentError("unsupported fragment", "value", t);
                }
                static isFragment(t) {
                    return !(!t || !t._isFragment);
                }
            }
            class Ie extends xe {
                format(t) {
                    if (t || (t = ke.sighash), ke[t] || we.throwArgumentError("invalid format type", "format", t), 
                    t === ke.json) return JSON.stringify({
                        type: "event",
                        anonymous: this.anonymous,
                        name: this.name,
                        inputs: this.inputs.map((e => JSON.parse(e.format(t))))
                    });
                    let e = "";
                    return t !== ke.sighash && (e += "event "), e += this.name + "(" + this.inputs.map((e => e.format(t))).join(t === ke.full ? ", " : ",") + ") ", 
                    t !== ke.sighash && this.anonymous && (e += "anonymous "), e.trim();
                }
                static from(t) {
                    return "string" == typeof t ? Ie.fromString(t) : Ie.fromObject(t);
                }
                static fromObject(t) {
                    if (Ie.isEventFragment(t)) return t;
                    "event" !== t.type && we.throwArgumentError("invalid event object", "value", t);
                    const e = {
                        name: Ge(t.name),
                        anonymous: t.anonymous,
                        inputs: t.inputs ? t.inputs.map(Oe.fromObject) : [],
                        type: "event"
                    };
                    return new Ie(Ae, e);
                }
                static fromString(t) {
                    let e = t.match(qe);
                    e || we.throwArgumentError("invalid event string", "value", t);
                    let r = !1;
                    return e[3].split(" ").forEach((t => {
                        switch (t.trim()) {
                          case "anonymous":
                            r = !0;
                            break;

                          case "":
                            break;

                          default:
                            we.warn("unknown modifier: " + t);
                        }
                    })), Ie.fromObject({
                        name: e[1].trim(),
                        anonymous: r,
                        inputs: Ne(e[2], !0),
                        type: "event"
                    });
                }
                static isEventFragment(t) {
                    return t && t._isFragment && "event" === t.type;
                }
            }
            function Te(t, e) {
                e.gas = null;
                let r = t.split("@");
                return 1 !== r.length ? (r.length > 2 && we.throwArgumentError("invalid human-readable ABI signature", "value", t), 
                r[1].match(/^[0-9]+$/) || we.throwArgumentError("invalid human-readable ABI signature gas", "value", t), 
                e.gas = J.from(r[1]), r[0]) : t;
            }
            function Be(t, e) {
                e.constant = !1, e.payable = !1, e.stateMutability = "nonpayable", t.split(" ").forEach((t => {
                    switch (t.trim()) {
                      case "constant":
                        e.constant = !0;
                        break;

                      case "payable":
                        e.payable = !0, e.stateMutability = "payable";
                        break;

                      case "nonpayable":
                        e.payable = !1, e.stateMutability = "nonpayable";
                        break;

                      case "pure":
                        e.constant = !0, e.stateMutability = "pure";
                        break;

                      case "view":
                        e.constant = !0, e.stateMutability = "view";
                        break;

                      case "external":
                      case "public":
                      case "":
                        break;

                      default:
                        console.log("unknown modifier: " + t);
                    }
                }));
            }
            function Ce(t) {
                let e = {
                    constant: !1,
                    payable: !0,
                    stateMutability: "payable"
                };
                return null != t.stateMutability ? (e.stateMutability = t.stateMutability, e.constant = "view" === e.stateMutability || "pure" === e.stateMutability, 
                null != t.constant && !!t.constant !== e.constant && we.throwArgumentError("cannot have constant function with mutability " + e.stateMutability, "value", t), 
                e.payable = "payable" === e.stateMutability, null != t.payable && !!t.payable !== e.payable && we.throwArgumentError("cannot have payable function with mutability " + e.stateMutability, "value", t)) : null != t.payable ? (e.payable = !!t.payable, 
                null != t.constant || e.payable || "constructor" === t.type || we.throwArgumentError("unable to determine stateMutability", "value", t), 
                e.constant = !!t.constant, e.constant ? e.stateMutability = "view" : e.stateMutability = e.payable ? "payable" : "nonpayable", 
                e.payable && e.constant && we.throwArgumentError("cannot have constant payable function", "value", t)) : null != t.constant ? (e.constant = !!t.constant, 
                e.payable = !e.constant, e.stateMutability = e.constant ? "view" : "payable") : "constructor" !== t.type && we.throwArgumentError("unable to determine stateMutability", "value", t), 
                e;
            }
            class Re extends xe {
                format(t) {
                    if (t || (t = ke.sighash), ke[t] || we.throwArgumentError("invalid format type", "format", t), 
                    t === ke.json) return JSON.stringify({
                        type: "constructor",
                        stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                        payable: this.payable,
                        gas: this.gas ? this.gas.toNumber() : void 0,
                        inputs: this.inputs.map((e => JSON.parse(e.format(t))))
                    });
                    t === ke.sighash && we.throwError("cannot format a constructor for sighash", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "format(sighash)"
                    });
                    let e = "constructor(" + this.inputs.map((e => e.format(t))).join(t === ke.full ? ", " : ",") + ") ";
                    return this.stateMutability && "nonpayable" !== this.stateMutability && (e += this.stateMutability + " "), 
                    e.trim();
                }
                static from(t) {
                    return "string" == typeof t ? Re.fromString(t) : Re.fromObject(t);
                }
                static fromObject(t) {
                    if (Re.isConstructorFragment(t)) return t;
                    "constructor" !== t.type && we.throwArgumentError("invalid constructor object", "value", t);
                    let e = Ce(t);
                    e.constant && we.throwArgumentError("constructor cannot be constant", "value", t);
                    const r = {
                        name: null,
                        type: t.type,
                        inputs: t.inputs ? t.inputs.map(Oe.fromObject) : [],
                        payable: e.payable,
                        stateMutability: e.stateMutability,
                        gas: t.gas ? J.from(t.gas) : null
                    };
                    return new Re(Ae, r);
                }
                static fromString(t) {
                    let e = {
                        type: "constructor"
                    }, r = (t = Te(t, e)).match(qe);
                    return r && "constructor" === r[1].trim() || we.throwArgumentError("invalid constructor string", "value", t), 
                    e.inputs = Ne(r[2].trim(), !1), Be(r[3].trim(), e), Re.fromObject(e);
                }
                static isConstructorFragment(t) {
                    return t && t._isFragment && "constructor" === t.type;
                }
            }
            class je extends Re {
                format(t) {
                    if (t || (t = ke.sighash), ke[t] || we.throwArgumentError("invalid format type", "format", t), 
                    t === ke.json) return JSON.stringify({
                        type: "function",
                        name: this.name,
                        constant: this.constant,
                        stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                        payable: this.payable,
                        gas: this.gas ? this.gas.toNumber() : void 0,
                        inputs: this.inputs.map((e => JSON.parse(e.format(t)))),
                        outputs: this.outputs.map((e => JSON.parse(e.format(t))))
                    });
                    let e = "";
                    return t !== ke.sighash && (e += "function "), e += this.name + "(" + this.inputs.map((e => e.format(t))).join(t === ke.full ? ", " : ",") + ") ", 
                    t !== ke.sighash && (this.stateMutability ? "nonpayable" !== this.stateMutability && (e += this.stateMutability + " ") : this.constant && (e += "view "), 
                    this.outputs && this.outputs.length && (e += "returns (" + this.outputs.map((e => e.format(t))).join(", ") + ") "), 
                    null != this.gas && (e += "@" + this.gas.toString() + " ")), e.trim();
                }
                static from(t) {
                    return "string" == typeof t ? je.fromString(t) : je.fromObject(t);
                }
                static fromObject(t) {
                    if (je.isFunctionFragment(t)) return t;
                    "function" !== t.type && we.throwArgumentError("invalid function object", "value", t);
                    let e = Ce(t);
                    const r = {
                        type: t.type,
                        name: Ge(t.name),
                        constant: e.constant,
                        inputs: t.inputs ? t.inputs.map(Oe.fromObject) : [],
                        outputs: t.outputs ? t.outputs.map(Oe.fromObject) : [],
                        payable: e.payable,
                        stateMutability: e.stateMutability,
                        gas: t.gas ? J.from(t.gas) : null
                    };
                    return new je(Ae, r);
                }
                static fromString(t) {
                    let e = {
                        type: "function"
                    }, r = (t = Te(t, e)).split(" returns ");
                    r.length > 2 && we.throwArgumentError("invalid function string", "value", t);
                    let n = r[0].match(qe);
                    if (n || we.throwArgumentError("invalid function signature", "value", t), e.name = n[1].trim(), 
                    e.name && Ge(e.name), e.inputs = Ne(n[2], !1), Be(n[3].trim(), e), r.length > 1) {
                        let n = r[1].match(qe);
                        "" == n[1].trim() && "" == n[3].trim() || we.throwArgumentError("unexpected tokens", "value", t), 
                        e.outputs = Ne(n[2], !1);
                    } else e.outputs = [];
                    return je.fromObject(e);
                }
                static isFunctionFragment(t) {
                    return t && t._isFragment && "function" === t.type;
                }
            }
            function Fe(t) {
                const e = t.format();
                return "Error(string)" !== e && "Panic(uint256)" !== e || we.throwArgumentError(`cannot specify user defined ${e} error`, "fragment", t), 
                t;
            }
            class Ue extends xe {
                format(t) {
                    if (t || (t = ke.sighash), ke[t] || we.throwArgumentError("invalid format type", "format", t), 
                    t === ke.json) return JSON.stringify({
                        type: "error",
                        name: this.name,
                        inputs: this.inputs.map((e => JSON.parse(e.format(t))))
                    });
                    let e = "";
                    return t !== ke.sighash && (e += "error "), e += this.name + "(" + this.inputs.map((e => e.format(t))).join(t === ke.full ? ", " : ",") + ") ", 
                    e.trim();
                }
                static from(t) {
                    return "string" == typeof t ? Ue.fromString(t) : Ue.fromObject(t);
                }
                static fromObject(t) {
                    if (Ue.isErrorFragment(t)) return t;
                    "error" !== t.type && we.throwArgumentError("invalid error object", "value", t);
                    const e = {
                        type: t.type,
                        name: Ge(t.name),
                        inputs: t.inputs ? t.inputs.map(Oe.fromObject) : []
                    };
                    return Fe(new Ue(Ae, e));
                }
                static fromString(t) {
                    let e = {
                        type: "error"
                    }, r = t.match(qe);
                    return r || we.throwArgumentError("invalid error signature", "value", t), e.name = r[1].trim(), 
                    e.name && Ge(e.name), e.inputs = Ne(r[2], !1), Fe(Ue.fromObject(e));
                }
                static isErrorFragment(t) {
                    return t && t._isFragment && "error" === t.type;
                }
            }
            function Le(t) {
                return t.match(/^uint($|[^1-9])/) ? t = "uint256" + t.substring(4) : t.match(/^int($|[^1-9])/) && (t = "int256" + t.substring(3)), 
                t;
            }
            const De = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
            function Ge(t) {
                return t && t.match(De) || we.throwArgumentError(`invalid identifier "${t}"`, "value", t), 
                t;
            }
            const qe = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
            const ze = new v(ht), He = new RegExp(/^bytes([0-9]*)$/), Ke = new RegExp(/^(u?int)([0-9]*)$/);
            class We {
                constructor(t) {
                    et(this, "coerceFunc", t || null);
                }
                _getCoder(t) {
                    switch (t.baseType) {
                      case "address":
                        return new Zt(t.name);

                      case "bool":
                        return new ie(t.name);

                      case "string":
                        return new ve(t.name);

                      case "bytes":
                        return new se(t.name);

                      case "array":
                        return new ne(this._getCoder(t.arrayChildren), t.arrayLength, t.name);

                      case "tuple":
                        return new be((t.components || []).map((t => this._getCoder(t))), t.name);

                      case "":
                        return new ue(t.name);
                    }
                    let e = t.type.match(Ke);
                    if (e) {
                        let r = parseInt(e[2] || "256");
                        return (0 === r || r > 256 || r % 8 != 0) && ze.throwArgumentError("invalid " + e[1] + " bit length", "param", t), 
                        new ye(r / 8, "int" === e[1], t.name);
                    }
                    if (e = t.type.match(He), e) {
                        let r = parseInt(e[1]);
                        return (0 === r || r > 32) && ze.throwArgumentError("invalid bytes length", "param", t), 
                        new ae(r, t.name);
                    }
                    return ze.throwArgumentError("invalid type", "type", t.type);
                }
                _getWordSize() {
                    return 32;
                }
                _getReader(t, e) {
                    return new gt(t, this._getWordSize(), this.coerceFunc, e);
                }
                _getWriter() {
                    return new mt(this._getWordSize());
                }
                getDefaultValue(t) {
                    const e = t.map((t => this._getCoder(Oe.from(t))));
                    return new be(e, "_").defaultValue();
                }
                encode(t, e) {
                    t.length !== e.length && ze.throwError("types/values length mismatch", v.errors.INVALID_ARGUMENT, {
                        count: {
                            types: t.length,
                            values: e.length
                        },
                        value: {
                            types: t,
                            values: e
                        }
                    });
                    const r = t.map((t => this._getCoder(Oe.from(t)))), n = new be(r, "_"), i = this._getWriter();
                    return n.encode(i, e), i.data;
                }
                decode(t, e, r) {
                    const n = t.map((t => this._getCoder(Oe.from(t))));
                    return new be(n, "_").decode(this._getReader(P(e), r));
                }
            }
            const Ve = new We, Je = new v(ht);
            class Qe extends ct {}
            class Xe extends ct {}
            class Ye extends ct {}
            class Ze extends ct {
                static isIndexed(t) {
                    return !(!t || !t._isIndexed);
                }
            }
            const $e = {
                "0x08c379a0": {
                    signature: "Error(string)",
                    name: "Error",
                    inputs: [ "string" ],
                    reason: !0
                },
                "0x4e487b71": {
                    signature: "Panic(uint256)",
                    name: "Panic",
                    inputs: [ "uint256" ]
                }
            };
            function tr(t, e) {
                const r = new Error(`deferred error during ABI decoding triggered accessing ${t}`);
                return r.error = e, r;
            }
            class er {
                constructor(t) {
                    let e = [];
                    e = "string" == typeof t ? JSON.parse(t) : t, et(this, "fragments", e.map((t => xe.from(t))).filter((t => null != t))), 
                    et(this, "_abiCoder", rt(new.target, "getAbiCoder")()), et(this, "functions", {}), 
                    et(this, "errors", {}), et(this, "events", {}), et(this, "structs", {}), this.fragments.forEach((t => {
                        let e = null;
                        switch (t.type) {
                          case "constructor":
                            return this.deploy ? void Je.warn("duplicate definition - constructor") : void et(this, "deploy", t);

                          case "function":
                            e = this.functions;
                            break;

                          case "event":
                            e = this.events;
                            break;

                          case "error":
                            e = this.errors;
                            break;

                          default:
                            return;
                        }
                        let r = t.format();
                        e[r] ? Je.warn("duplicate definition - " + r) : e[r] = t;
                    })), this.deploy || et(this, "deploy", Re.from({
                        payable: !1,
                        type: "constructor"
                    })), et(this, "_isInterface", !0);
                }
                format(t) {
                    t || (t = ke.full), t === ke.sighash && Je.throwArgumentError("interface does not support formatting sighash", "format", t);
                    const e = this.fragments.map((e => e.format(t)));
                    return t === ke.json ? JSON.stringify(e.map((t => JSON.parse(t)))) : e;
                }
                static getAbiCoder() {
                    return Ve;
                }
                static getAddress(t) {
                    return Ct(t);
                }
                static getSighash(t) {
                    return B(Yt(t.format()), 0, 4);
                }
                static getEventTopic(t) {
                    return Yt(t.format());
                }
                getFunction(t) {
                    if (N(t)) {
                        for (const e in this.functions) if (t === this.getSighash(e)) return this.functions[e];
                        Je.throwArgumentError("no matching function", "sighash", t);
                    }
                    if (-1 === t.indexOf("(")) {
                        const e = t.trim(), r = Object.keys(this.functions).filter((t => t.split("(")[0] === e));
                        return 0 === r.length ? Je.throwArgumentError("no matching function", "name", e) : r.length > 1 && Je.throwArgumentError("multiple matching functions", "name", e), 
                        this.functions[r[0]];
                    }
                    const e = this.functions[je.fromString(t).format()];
                    return e || Je.throwArgumentError("no matching function", "signature", t), e;
                }
                getEvent(t) {
                    if (N(t)) {
                        const e = t.toLowerCase();
                        for (const t in this.events) if (e === this.getEventTopic(t)) return this.events[t];
                        Je.throwArgumentError("no matching event", "topichash", e);
                    }
                    if (-1 === t.indexOf("(")) {
                        const e = t.trim(), r = Object.keys(this.events).filter((t => t.split("(")[0] === e));
                        return 0 === r.length ? Je.throwArgumentError("no matching event", "name", e) : r.length > 1 && Je.throwArgumentError("multiple matching events", "name", e), 
                        this.events[r[0]];
                    }
                    const e = this.events[Ie.fromString(t).format()];
                    return e || Je.throwArgumentError("no matching event", "signature", t), e;
                }
                getError(t) {
                    if (N(t)) {
                        const e = rt(this.constructor, "getSighash");
                        for (const r in this.errors) {
                            if (t === e(this.errors[r])) return this.errors[r];
                        }
                        Je.throwArgumentError("no matching error", "sighash", t);
                    }
                    if (-1 === t.indexOf("(")) {
                        const e = t.trim(), r = Object.keys(this.errors).filter((t => t.split("(")[0] === e));
                        return 0 === r.length ? Je.throwArgumentError("no matching error", "name", e) : r.length > 1 && Je.throwArgumentError("multiple matching errors", "name", e), 
                        this.errors[r[0]];
                    }
                    const e = this.errors[je.fromString(t).format()];
                    return e || Je.throwArgumentError("no matching error", "signature", t), e;
                }
                getSighash(t) {
                    if ("string" == typeof t) try {
                        t = this.getFunction(t);
                    } catch (e) {
                        try {
                            t = this.getError(t);
                        } catch (t) {
                            throw e;
                        }
                    }
                    return rt(this.constructor, "getSighash")(t);
                }
                getEventTopic(t) {
                    return "string" == typeof t && (t = this.getEvent(t)), rt(this.constructor, "getEventTopic")(t);
                }
                _decodeParams(t, e) {
                    return this._abiCoder.decode(t, e);
                }
                _encodeParams(t, e) {
                    return this._abiCoder.encode(t, e);
                }
                encodeDeploy(t) {
                    return this._encodeParams(this.deploy.inputs, t || []);
                }
                decodeErrorResult(t, e) {
                    "string" == typeof t && (t = this.getError(t));
                    const r = P(e);
                    return I(r.slice(0, 4)) !== this.getSighash(t) && Je.throwArgumentError(`data signature does not match error ${t.name}.`, "data", I(r)), 
                    this._decodeParams(t.inputs, r.slice(4));
                }
                encodeErrorResult(t, e) {
                    return "string" == typeof t && (t = this.getError(t)), I(k([ this.getSighash(t), this._encodeParams(t.inputs, e || []) ]));
                }
                decodeFunctionData(t, e) {
                    "string" == typeof t && (t = this.getFunction(t));
                    const r = P(e);
                    return I(r.slice(0, 4)) !== this.getSighash(t) && Je.throwArgumentError(`data signature does not match function ${t.name}.`, "data", I(r)), 
                    this._decodeParams(t.inputs, r.slice(4));
                }
                encodeFunctionData(t, e) {
                    return "string" == typeof t && (t = this.getFunction(t)), I(k([ this.getSighash(t), this._encodeParams(t.inputs, e || []) ]));
                }
                decodeFunctionResult(t, e) {
                    "string" == typeof t && (t = this.getFunction(t));
                    let r = P(e), n = null, i = "", o = null, s = null, a = null;
                    switch (r.length % this._abiCoder._getWordSize()) {
                      case 0:
                        try {
                            return this._abiCoder.decode(t.outputs, r);
                        } catch (t) {}
                        break;

                      case 4:
                        {
                            const t = I(r.slice(0, 4)), e = $e[t];
                            if (e) o = this._abiCoder.decode(e.inputs, r.slice(4)), s = e.name, a = e.signature, 
                            e.reason && (n = o[0]), "Error" === s ? i = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(o[0])}` : "Panic" === s && (i = `; VM Exception while processing transaction: reverted with panic code ${o[0]}`); else try {
                                const e = this.getError(t);
                                o = this._abiCoder.decode(e.inputs, r.slice(4)), s = e.name, a = e.format();
                            } catch (t) {}
                            break;
                        }
                    }
                    return Je.throwError("call revert exception" + i, v.errors.CALL_EXCEPTION, {
                        method: t.format(),
                        data: I(e),
                        errorArgs: o,
                        errorName: s,
                        errorSignature: a,
                        reason: n
                    });
                }
                encodeFunctionResult(t, e) {
                    return "string" == typeof t && (t = this.getFunction(t)), I(this._abiCoder.encode(t.outputs, e || []));
                }
                encodeFilterTopics(t, e) {
                    "string" == typeof t && (t = this.getEvent(t)), e.length > t.inputs.length && Je.throwError("too many arguments for " + t.format(), v.errors.UNEXPECTED_ARGUMENT, {
                        argument: "values",
                        value: e
                    });
                    let r = [];
                    t.anonymous || r.push(this.getEventTopic(t));
                    const n = (t, e) => "string" === t.type ? Yt(e) : "bytes" === t.type ? bt(I(e)) : ("bool" === t.type && "boolean" == typeof e && (e = e ? "0x01" : "0x00"), 
                    t.type.match(/^u?int/) && (e = J.from(e).toHexString()), "address" === t.type && this._abiCoder.encode([ "address" ], [ e ]), 
                    F(I(e), 32));
                    for (e.forEach(((e, i) => {
                        let o = t.inputs[i];
                        o.indexed ? null == e ? r.push(null) : "array" === o.baseType || "tuple" === o.baseType ? Je.throwArgumentError("filtering with tuples or arrays not supported", "contract." + o.name, e) : Array.isArray(e) ? r.push(e.map((t => n(o, t)))) : r.push(n(o, e)) : null != e && Je.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + o.name, e);
                    })); r.length && null === r[r.length - 1]; ) r.pop();
                    return r;
                }
                encodeEventLog(t, e) {
                    "string" == typeof t && (t = this.getEvent(t));
                    const r = [], n = [], i = [];
                    return t.anonymous || r.push(this.getEventTopic(t)), e.length !== t.inputs.length && Je.throwArgumentError("event arguments/values mismatch", "values", e), 
                    t.inputs.forEach(((t, o) => {
                        const s = e[o];
                        if (t.indexed) if ("string" === t.type) r.push(Yt(s)); else if ("bytes" === t.type) r.push(bt(s)); else {
                            if ("tuple" === t.baseType || "array" === t.baseType) throw new Error("not implemented");
                            r.push(this._abiCoder.encode([ t.type ], [ s ]));
                        } else n.push(t), i.push(s);
                    })), {
                        data: this._abiCoder.encode(n, i),
                        topics: r
                    };
                }
                decodeEventLog(t, e, r) {
                    if ("string" == typeof t && (t = this.getEvent(t)), null != r && !t.anonymous) {
                        let e = this.getEventTopic(t);
                        N(r[0], 32) && r[0].toLowerCase() === e || Je.throwError("fragment/topic mismatch", v.errors.INVALID_ARGUMENT, {
                            argument: "topics[0]",
                            expected: e,
                            value: r[0]
                        }), r = r.slice(1);
                    }
                    let n = [], i = [], o = [];
                    t.inputs.forEach(((t, e) => {
                        t.indexed ? "string" === t.type || "bytes" === t.type || "tuple" === t.baseType || "array" === t.baseType ? (n.push(Oe.fromObject({
                            type: "bytes32",
                            name: t.name
                        })), o.push(!0)) : (n.push(t), o.push(!1)) : (i.push(t), o.push(!1));
                    }));
                    let s = null != r ? this._abiCoder.decode(n, k(r)) : null, a = this._abiCoder.decode(i, e, !0), u = [], l = 0, c = 0;
                    t.inputs.forEach(((t, e) => {
                        if (t.indexed) if (null == s) u[e] = new Ze({
                            _isIndexed: !0,
                            hash: null
                        }); else if (o[e]) u[e] = new Ze({
                            _isIndexed: !0,
                            hash: s[c++]
                        }); else try {
                            u[e] = s[c++];
                        } catch (t) {
                            u[e] = t;
                        } else try {
                            u[e] = a[l++];
                        } catch (t) {
                            u[e] = t;
                        }
                        if (t.name && null == u[t.name]) {
                            const r = u[e];
                            r instanceof Error ? Object.defineProperty(u, t.name, {
                                enumerable: !0,
                                get: () => {
                                    throw tr(`property ${JSON.stringify(t.name)}`, r);
                                }
                            }) : u[t.name] = r;
                        }
                    }));
                    for (let t = 0; t < u.length; t++) {
                        const e = u[t];
                        e instanceof Error && Object.defineProperty(u, t, {
                            enumerable: !0,
                            get: () => {
                                throw tr(`index ${t}`, e);
                            }
                        });
                    }
                    return Object.freeze(u);
                }
                parseTransaction(t) {
                    let e = this.getFunction(t.data.substring(0, 10).toLowerCase());
                    return e ? new Xe({
                        args: this._abiCoder.decode(e.inputs, "0x" + t.data.substring(10)),
                        functionFragment: e,
                        name: e.name,
                        signature: e.format(),
                        sighash: this.getSighash(e),
                        value: J.from(t.value || "0")
                    }) : null;
                }
                parseLog(t) {
                    let e = this.getEvent(t.topics[0]);
                    return !e || e.anonymous ? null : new Qe({
                        eventFragment: e,
                        name: e.name,
                        signature: e.format(),
                        topic: this.getEventTopic(e),
                        args: this.decodeEventLog(e, t.data, t.topics)
                    });
                }
                parseError(t) {
                    const e = I(t);
                    let r = this.getError(e.substring(0, 10).toLowerCase());
                    return r ? new Ye({
                        args: this._abiCoder.decode(r.inputs, "0x" + e.substring(10)),
                        errorFragment: r,
                        name: r.name,
                        signature: r.format(),
                        sighash: this.getSighash(r)
                    }) : null;
                }
                static isInterface(t) {
                    return !(!t || !t._isInterface);
                }
            }
            var rr = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const nr = new v("abstract-provider/5.7.0");
            class ir extends ct {
                static isForkEvent(t) {
                    return !(!t || !t._isForkEvent);
                }
            }
            class or {
                constructor() {
                    nr.checkAbstract(new.target, or), et(this, "_isProvider", !0);
                }
                getFeeData() {
                    return rr(this, void 0, void 0, (function*() {
                        const {block: t, gasPrice: e} = yield nt({
                            block: this.getBlock("latest"),
                            gasPrice: this.getGasPrice().catch((t => null))
                        });
                        let r = null, n = null, i = null;
                        return t && t.baseFeePerGas && (r = t.baseFeePerGas, i = J.from("1500000000"), n = t.baseFeePerGas.mul(2).add(i)), 
                        {
                            lastBaseFeePerGas: r,
                            maxFeePerGas: n,
                            maxPriorityFeePerGas: i,
                            gasPrice: e
                        };
                    }));
                }
                addListener(t, e) {
                    return this.on(t, e);
                }
                removeListener(t, e) {
                    return this.off(t, e);
                }
                static isProvider(t) {
                    return !(!t || !t._isProvider);
                }
            }
            var sr = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const ar = new v("abstract-signer/5.7.0"), ur = [ "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value" ], lr = [ v.errors.INSUFFICIENT_FUNDS, v.errors.NONCE_EXPIRED, v.errors.REPLACEMENT_UNDERPRICED ];
            class cr {
                constructor() {
                    ar.checkAbstract(new.target, cr), et(this, "_isSigner", !0);
                }
                getBalance(t) {
                    return sr(this, void 0, void 0, (function*() {
                        return this._checkProvider("getBalance"), yield this.provider.getBalance(this.getAddress(), t);
                    }));
                }
                getTransactionCount(t) {
                    return sr(this, void 0, void 0, (function*() {
                        return this._checkProvider("getTransactionCount"), yield this.provider.getTransactionCount(this.getAddress(), t);
                    }));
                }
                estimateGas(t) {
                    return sr(this, void 0, void 0, (function*() {
                        this._checkProvider("estimateGas");
                        const e = yield nt(this.checkTransaction(t));
                        return yield this.provider.estimateGas(e);
                    }));
                }
                call(t, e) {
                    return sr(this, void 0, void 0, (function*() {
                        this._checkProvider("call");
                        const r = yield nt(this.checkTransaction(t));
                        return yield this.provider.call(r, e);
                    }));
                }
                sendTransaction(t) {
                    return sr(this, void 0, void 0, (function*() {
                        this._checkProvider("sendTransaction");
                        const e = yield this.populateTransaction(t), r = yield this.signTransaction(e);
                        return yield this.provider.sendTransaction(r);
                    }));
                }
                getChainId() {
                    return sr(this, void 0, void 0, (function*() {
                        this._checkProvider("getChainId");
                        return (yield this.provider.getNetwork()).chainId;
                    }));
                }
                getGasPrice() {
                    return sr(this, void 0, void 0, (function*() {
                        return this._checkProvider("getGasPrice"), yield this.provider.getGasPrice();
                    }));
                }
                getFeeData() {
                    return sr(this, void 0, void 0, (function*() {
                        return this._checkProvider("getFeeData"), yield this.provider.getFeeData();
                    }));
                }
                resolveName(t) {
                    return sr(this, void 0, void 0, (function*() {
                        return this._checkProvider("resolveName"), yield this.provider.resolveName(t);
                    }));
                }
                checkTransaction(t) {
                    for (const e in t) -1 === ur.indexOf(e) && ar.throwArgumentError("invalid transaction key: " + e, "transaction", t);
                    const e = ot(t);
                    return null == e.from ? e.from = this.getAddress() : e.from = Promise.all([ Promise.resolve(e.from), this.getAddress() ]).then((e => (e[0].toLowerCase() !== e[1].toLowerCase() && ar.throwArgumentError("from address mismatch", "transaction", t), 
                    e[0]))), e;
                }
                populateTransaction(t) {
                    return sr(this, void 0, void 0, (function*() {
                        const e = yield nt(this.checkTransaction(t));
                        null != e.to && (e.to = Promise.resolve(e.to).then((t => sr(this, void 0, void 0, (function*() {
                            if (null == t) return null;
                            const e = yield this.resolveName(t);
                            return null == e && ar.throwArgumentError("provided ENS name resolves to null", "tx.to", t), 
                            e;
                        })))), e.to.catch((t => {})));
                        const r = null != e.maxFeePerGas || null != e.maxPriorityFeePerGas;
                        if (null == e.gasPrice || 2 !== e.type && !r ? 0 !== e.type && 1 !== e.type || !r || ar.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", t) : ar.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", t), 
                        2 !== e.type && null != e.type || null == e.maxFeePerGas || null == e.maxPriorityFeePerGas) if (0 === e.type || 1 === e.type) null == e.gasPrice && (e.gasPrice = this.getGasPrice()); else {
                            const t = yield this.getFeeData();
                            if (null == e.type) if (null != t.maxFeePerGas && null != t.maxPriorityFeePerGas) if (e.type = 2, 
                            null != e.gasPrice) {
                                const t = e.gasPrice;
                                delete e.gasPrice, e.maxFeePerGas = t, e.maxPriorityFeePerGas = t;
                            } else null == e.maxFeePerGas && (e.maxFeePerGas = t.maxFeePerGas), null == e.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = t.maxPriorityFeePerGas); else null != t.gasPrice ? (r && ar.throwError("network does not support EIP-1559", v.errors.UNSUPPORTED_OPERATION, {
                                operation: "populateTransaction"
                            }), null == e.gasPrice && (e.gasPrice = t.gasPrice), e.type = 0) : ar.throwError("failed to get consistent fee data", v.errors.UNSUPPORTED_OPERATION, {
                                operation: "signer.getFeeData"
                            }); else 2 === e.type && (null == e.maxFeePerGas && (e.maxFeePerGas = t.maxFeePerGas), 
                            null == e.maxPriorityFeePerGas && (e.maxPriorityFeePerGas = t.maxPriorityFeePerGas));
                        } else e.type = 2;
                        return null == e.nonce && (e.nonce = this.getTransactionCount("pending")), null == e.gasLimit && (e.gasLimit = this.estimateGas(e).catch((t => {
                            if (lr.indexOf(t.code) >= 0) throw t;
                            return ar.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                                error: t,
                                tx: e
                            });
                        }))), null == e.chainId ? e.chainId = this.getChainId() : e.chainId = Promise.all([ Promise.resolve(e.chainId), this.getChainId() ]).then((e => (0 !== e[1] && e[0] !== e[1] && ar.throwArgumentError("chainId address mismatch", "transaction", t), 
                        e[0]))), yield nt(e);
                    }));
                }
                _checkProvider(t) {
                    this.provider || ar.throwError("missing provider", v.errors.UNSUPPORTED_OPERATION, {
                        operation: t || "_checkProvider"
                    });
                }
                static isSigner(t) {
                    return !(!t || !t._isSigner);
                }
            }
            class hr extends cr {
                constructor(t, e) {
                    super(), et(this, "address", t), et(this, "provider", e || null);
                }
                getAddress() {
                    return Promise.resolve(this.address);
                }
                _fail(t, e) {
                    return Promise.resolve().then((() => {
                        ar.throwError(t, v.errors.UNSUPPORTED_OPERATION, {
                            operation: e
                        });
                    }));
                }
                signMessage(t) {
                    return this._fail("VoidSigner cannot sign messages", "signMessage");
                }
                signTransaction(t) {
                    return this._fail("VoidSigner cannot sign transactions", "signTransaction");
                }
                _signTypedData(t, e, r) {
                    return this._fail("VoidSigner cannot sign typed data", "signTypedData");
                }
                connect(t) {
                    return new hr(this.address, t);
                }
            }
            var fr = r(3715), dr = r.n(fr);
            "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;
            function pr(t, e, r) {
                return r = {
                    path: e,
                    exports: {},
                    require: function(t, e) {
                        return function() {
                            throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                        }(null == e && r.path);
                    }
                }, t(r, r.exports), r.exports;
            }
            var mr = gr;
            function gr(t, e) {
                if (!t) throw new Error(e || "Assertion failed");
            }
            gr.equal = function(t, e, r) {
                if (t != e) throw new Error(r || "Assertion failed: " + t + " != " + e);
            };
            var yr = pr((function(t, e) {
                var r = e;
                function n(t) {
                    return 1 === t.length ? "0" + t : t;
                }
                function i(t) {
                    for (var e = "", r = 0; r < t.length; r++) e += n(t[r].toString(16));
                    return e;
                }
                r.toArray = function(t, e) {
                    if (Array.isArray(t)) return t.slice();
                    if (!t) return [];
                    var r = [];
                    if ("string" != typeof t) {
                        for (var n = 0; n < t.length; n++) r[n] = 0 | t[n];
                        return r;
                    }
                    if ("hex" === e) {
                        (t = t.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t = "0" + t);
                        for (n = 0; n < t.length; n += 2) r.push(parseInt(t[n] + t[n + 1], 16));
                    } else for (n = 0; n < t.length; n++) {
                        var i = t.charCodeAt(n), o = i >> 8, s = 255 & i;
                        o ? r.push(o, s) : r.push(s);
                    }
                    return r;
                }, r.zero2 = n, r.toHex = i, r.encode = function(t, e) {
                    return "hex" === e ? i(t) : t;
                };
            })), vr = pr((function(t, e) {
                var r = e;
                r.assert = mr, r.toArray = yr.toArray, r.zero2 = yr.zero2, r.toHex = yr.toHex, r.encode = yr.encode, 
                r.getNAF = function(t, e, r) {
                    var n = new Array(Math.max(t.bitLength(), r) + 1);
                    n.fill(0);
                    for (var i = 1 << e + 1, o = t.clone(), s = 0; s < n.length; s++) {
                        var a, u = o.andln(i - 1);
                        o.isOdd() ? (a = u > (i >> 1) - 1 ? (i >> 1) - u : u, o.isubn(a)) : a = 0, n[s] = a, 
                        o.iushrn(1);
                    }
                    return n;
                }, r.getJSF = function(t, e) {
                    var r = [ [], [] ];
                    t = t.clone(), e = e.clone();
                    for (var n, i = 0, o = 0; t.cmpn(-i) > 0 || e.cmpn(-o) > 0; ) {
                        var s, a, u = t.andln(3) + i & 3, l = e.andln(3) + o & 3;
                        3 === u && (u = -1), 3 === l && (l = -1), s = 0 == (1 & u) ? 0 : 3 !== (n = t.andln(7) + i & 7) && 5 !== n || 2 !== l ? u : -u, 
                        r[0].push(s), a = 0 == (1 & l) ? 0 : 3 !== (n = e.andln(7) + o & 7) && 5 !== n || 2 !== u ? l : -l, 
                        r[1].push(a), 2 * i === s + 1 && (i = 1 - i), 2 * o === a + 1 && (o = 1 - o), t.iushrn(1), 
                        e.iushrn(1);
                    }
                    return r;
                }, r.cachedProperty = function(t, e, r) {
                    var n = "_" + e;
                    t.prototype[e] = function() {
                        return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
                    };
                }, r.parseBytes = function(t) {
                    return "string" == typeof t ? r.toArray(t, "hex") : t;
                }, r.intFromLE = function(t) {
                    return new (G())(t, "hex", "le");
                };
            })), br = vr.getNAF, wr = vr.getJSF, Ar = vr.assert;
            function _r(t, e) {
                this.type = t, this.p = new (G())(e.p, 16), this.red = e.prime ? G().red(e.prime) : G().mont(this.p), 
                this.zero = new (G())(0).toRed(this.red), this.one = new (G())(1).toRed(this.red), 
                this.two = new (G())(2).toRed(this.red), this.n = e.n && new (G())(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), 
                this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), 
                this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
                var r = this.n && this.p.div(this.n);
                !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
            }
            var Er = _r;
            function Mr(t, e) {
                this.curve = t, this.type = e, this.precomputed = null;
            }
            _r.prototype.point = function() {
                throw new Error("Not implemented");
            }, _r.prototype.validate = function() {
                throw new Error("Not implemented");
            }, _r.prototype._fixedNafMul = function(t, e) {
                Ar(t.precomputed);
                var r = t._getDoubles(), n = br(e, 1, this._bitLength), i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
                i /= 3;
                var o, s, a = [];
                for (o = 0; o < n.length; o += r.step) {
                    s = 0;
                    for (var u = o + r.step - 1; u >= o; u--) s = (s << 1) + n[u];
                    a.push(s);
                }
                for (var l = this.jpoint(null, null, null), c = this.jpoint(null, null, null), h = i; h > 0; h--) {
                    for (o = 0; o < a.length; o++) (s = a[o]) === h ? c = c.mixedAdd(r.points[o]) : s === -h && (c = c.mixedAdd(r.points[o].neg()));
                    l = l.add(c);
                }
                return l.toP();
            }, _r.prototype._wnafMul = function(t, e) {
                var r = 4, n = t._getNAFPoints(r);
                r = n.wnd;
                for (var i = n.points, o = br(e, r, this._bitLength), s = this.jpoint(null, null, null), a = o.length - 1; a >= 0; a--) {
                    for (var u = 0; a >= 0 && 0 === o[a]; a--) u++;
                    if (a >= 0 && u++, s = s.dblp(u), a < 0) break;
                    var l = o[a];
                    Ar(0 !== l), s = "affine" === t.type ? l > 0 ? s.mixedAdd(i[l - 1 >> 1]) : s.mixedAdd(i[-l - 1 >> 1].neg()) : l > 0 ? s.add(i[l - 1 >> 1]) : s.add(i[-l - 1 >> 1].neg());
                }
                return "affine" === t.type ? s.toP() : s;
            }, _r.prototype._wnafMulAdd = function(t, e, r, n, i) {
                var o, s, a, u = this._wnafT1, l = this._wnafT2, c = this._wnafT3, h = 0;
                for (o = 0; o < n; o++) {
                    var f = (a = e[o])._getNAFPoints(t);
                    u[o] = f.wnd, l[o] = f.points;
                }
                for (o = n - 1; o >= 1; o -= 2) {
                    var d = o - 1, p = o;
                    if (1 === u[d] && 1 === u[p]) {
                        var m = [ e[d], null, null, e[p] ];
                        0 === e[d].y.cmp(e[p].y) ? (m[1] = e[d].add(e[p]), m[2] = e[d].toJ().mixedAdd(e[p].neg())) : 0 === e[d].y.cmp(e[p].y.redNeg()) ? (m[1] = e[d].toJ().mixedAdd(e[p]), 
                        m[2] = e[d].add(e[p].neg())) : (m[1] = e[d].toJ().mixedAdd(e[p]), m[2] = e[d].toJ().mixedAdd(e[p].neg()));
                        var g = [ -3, -1, -5, -7, 0, 7, 5, 1, 3 ], y = wr(r[d], r[p]);
                        for (h = Math.max(y[0].length, h), c[d] = new Array(h), c[p] = new Array(h), s = 0; s < h; s++) {
                            var v = 0 | y[0][s], b = 0 | y[1][s];
                            c[d][s] = g[3 * (v + 1) + (b + 1)], c[p][s] = 0, l[d] = m;
                        }
                    } else c[d] = br(r[d], u[d], this._bitLength), c[p] = br(r[p], u[p], this._bitLength), 
                    h = Math.max(c[d].length, h), h = Math.max(c[p].length, h);
                }
                var w = this.jpoint(null, null, null), A = this._wnafT4;
                for (o = h; o >= 0; o--) {
                    for (var _ = 0; o >= 0; ) {
                        var E = !0;
                        for (s = 0; s < n; s++) A[s] = 0 | c[s][o], 0 !== A[s] && (E = !1);
                        if (!E) break;
                        _++, o--;
                    }
                    if (o >= 0 && _++, w = w.dblp(_), o < 0) break;
                    for (s = 0; s < n; s++) {
                        var M = A[s];
                        0 !== M && (M > 0 ? a = l[s][M - 1 >> 1] : M < 0 && (a = l[s][-M - 1 >> 1].neg()), 
                        w = "affine" === a.type ? w.mixedAdd(a) : w.add(a));
                    }
                }
                for (o = 0; o < n; o++) l[o] = null;
                return i ? w : w.toP();
            }, _r.BasePoint = Mr, Mr.prototype.eq = function() {
                throw new Error("Not implemented");
            }, Mr.prototype.validate = function() {
                return this.curve.validate(this);
            }, _r.prototype.decodePoint = function(t, e) {
                t = vr.toArray(t, e);
                var r = this.p.byteLength();
                if ((4 === t[0] || 6 === t[0] || 7 === t[0]) && t.length - 1 == 2 * r) return 6 === t[0] ? Ar(t[t.length - 1] % 2 == 0) : 7 === t[0] && Ar(t[t.length - 1] % 2 == 1), 
                this.point(t.slice(1, 1 + r), t.slice(1 + r, 1 + 2 * r));
                if ((2 === t[0] || 3 === t[0]) && t.length - 1 === r) return this.pointFromX(t.slice(1, 1 + r), 3 === t[0]);
                throw new Error("Unknown point format");
            }, Mr.prototype.encodeCompressed = function(t) {
                return this.encode(t, !0);
            }, Mr.prototype._encode = function(t) {
                var e = this.curve.p.byteLength(), r = this.getX().toArray("be", e);
                return t ? [ this.getY().isEven() ? 2 : 3 ].concat(r) : [ 4 ].concat(r, this.getY().toArray("be", e));
            }, Mr.prototype.encode = function(t, e) {
                return vr.encode(this._encode(e), t);
            }, Mr.prototype.precompute = function(t) {
                if (this.precomputed) return this;
                var e = {
                    doubles: null,
                    naf: null,
                    beta: null
                };
                return e.naf = this._getNAFPoints(8), e.doubles = this._getDoubles(4, t), e.beta = this._getBeta(), 
                this.precomputed = e, this;
            }, Mr.prototype._hasDoubles = function(t) {
                if (!this.precomputed) return !1;
                var e = this.precomputed.doubles;
                return !!e && e.points.length >= Math.ceil((t.bitLength() + 1) / e.step);
            }, Mr.prototype._getDoubles = function(t, e) {
                if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                for (var r = [ this ], n = this, i = 0; i < e; i += t) {
                    for (var o = 0; o < t; o++) n = n.dbl();
                    r.push(n);
                }
                return {
                    step: t,
                    points: r
                };
            }, Mr.prototype._getNAFPoints = function(t) {
                if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                for (var e = [ this ], r = (1 << t) - 1, n = 1 === r ? null : this.dbl(), i = 1; i < r; i++) e[i] = e[i - 1].add(n);
                return {
                    wnd: t,
                    points: e
                };
            }, Mr.prototype._getBeta = function() {
                return null;
            }, Mr.prototype.dblp = function(t) {
                for (var e = this, r = 0; r < t; r++) e = e.dbl();
                return e;
            };
            var Pr = pr((function(t) {
                "function" == typeof Object.create ? t.exports = function(t, e) {
                    e && (t.super_ = e, t.prototype = Object.create(e.prototype, {
                        constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }));
                } : t.exports = function(t, e) {
                    if (e) {
                        t.super_ = e;
                        var r = function() {};
                        r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
                    }
                };
            })), kr = vr.assert;
            function Sr(t) {
                Er.call(this, "short", t), this.a = new (G())(t.a, 16).toRed(this.red), this.b = new (G())(t.b, 16).toRed(this.red), 
                this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), 
                this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
            }
            Pr(Sr, Er);
            var Or = Sr;
            function Nr(t, e, r, n) {
                Er.BasePoint.call(this, t, "affine"), null === e && null === r ? (this.x = null, 
                this.y = null, this.inf = !0) : (this.x = new (G())(e, 16), this.y = new (G())(r, 16), 
                n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
                this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
            }
            function xr(t, e, r, n) {
                Er.BasePoint.call(this, t, "jacobian"), null === e && null === r && null === n ? (this.x = this.curve.one, 
                this.y = this.curve.one, this.z = new (G())(0)) : (this.x = new (G())(e, 16), this.y = new (G())(r, 16), 
                this.z = new (G())(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), 
                this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), 
                this.zOne = this.z === this.curve.one;
            }
            Sr.prototype._getEndomorphism = function(t) {
                if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
                    var e, r;
                    if (t.beta) e = new (G())(t.beta, 16).toRed(this.red); else {
                        var n = this._getEndoRoots(this.p);
                        e = (e = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
                    }
                    if (t.lambda) r = new (G())(t.lambda, 16); else {
                        var i = this._getEndoRoots(this.n);
                        0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(e)) ? r = i[0] : (r = i[1], kr(0 === this.g.mul(r).x.cmp(this.g.x.redMul(e))));
                    }
                    return {
                        beta: e,
                        lambda: r,
                        basis: t.basis ? t.basis.map((function(t) {
                            return {
                                a: new (G())(t.a, 16),
                                b: new (G())(t.b, 16)
                            };
                        })) : this._getEndoBasis(r)
                    };
                }
            }, Sr.prototype._getEndoRoots = function(t) {
                var e = t === this.p ? this.red : G().mont(t), r = new (G())(2).toRed(e).redInvm(), n = r.redNeg(), i = new (G())(3).toRed(e).redNeg().redSqrt().redMul(r);
                return [ n.redAdd(i).fromRed(), n.redSub(i).fromRed() ];
            }, Sr.prototype._getEndoBasis = function(t) {
                for (var e, r, n, i, o, s, a, u, l, c = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), h = t, f = this.n.clone(), d = new (G())(1), p = new (G())(0), m = new (G())(0), g = new (G())(1), y = 0; 0 !== h.cmpn(0); ) {
                    var v = f.div(h);
                    u = f.sub(v.mul(h)), l = m.sub(v.mul(d));
                    var b = g.sub(v.mul(p));
                    if (!n && u.cmp(c) < 0) e = a.neg(), r = d, n = u.neg(), i = l; else if (n && 2 == ++y) break;
                    a = u, f = h, h = u, m = d, d = l, g = p, p = b;
                }
                o = u.neg(), s = l;
                var w = n.sqr().add(i.sqr());
                return o.sqr().add(s.sqr()).cmp(w) >= 0 && (o = e, s = r), n.negative && (n = n.neg(), 
                i = i.neg()), o.negative && (o = o.neg(), s = s.neg()), [ {
                    a: n,
                    b: i
                }, {
                    a: o,
                    b: s
                } ];
            }, Sr.prototype._endoSplit = function(t) {
                var e = this.endo.basis, r = e[0], n = e[1], i = n.b.mul(t).divRound(this.n), o = r.b.neg().mul(t).divRound(this.n), s = i.mul(r.a), a = o.mul(n.a), u = i.mul(r.b), l = o.mul(n.b);
                return {
                    k1: t.sub(s).sub(a),
                    k2: u.add(l).neg()
                };
            }, Sr.prototype.pointFromX = function(t, e) {
                (t = new (G())(t, 16)).red || (t = t.toRed(this.red));
                var r = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
                if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
                var i = n.fromRed().isOdd();
                return (e && !i || !e && i) && (n = n.redNeg()), this.point(t, n);
            }, Sr.prototype.validate = function(t) {
                if (t.inf) return !0;
                var e = t.x, r = t.y, n = this.a.redMul(e), i = e.redSqr().redMul(e).redIAdd(n).redIAdd(this.b);
                return 0 === r.redSqr().redISub(i).cmpn(0);
            }, Sr.prototype._endoWnafMulAdd = function(t, e, r) {
                for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < t.length; o++) {
                    var s = this._endoSplit(e[o]), a = t[o], u = a._getBeta();
                    s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), u = u.neg(!0)), 
                    n[2 * o] = a, n[2 * o + 1] = u, i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
                }
                for (var l = this._wnafMulAdd(1, n, i, 2 * o, r), c = 0; c < 2 * o; c++) n[c] = null, 
                i[c] = null;
                return l;
            }, Pr(Nr, Er.BasePoint), Sr.prototype.point = function(t, e, r) {
                return new Nr(this, t, e, r);
            }, Sr.prototype.pointFromJSON = function(t, e) {
                return Nr.fromJSON(this, t, e);
            }, Nr.prototype._getBeta = function() {
                if (this.curve.endo) {
                    var t = this.precomputed;
                    if (t && t.beta) return t.beta;
                    var e = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                    if (t) {
                        var r = this.curve, n = function(t) {
                            return r.point(t.x.redMul(r.endo.beta), t.y);
                        };
                        t.beta = e, e.precomputed = {
                            beta: null,
                            naf: t.naf && {
                                wnd: t.naf.wnd,
                                points: t.naf.points.map(n)
                            },
                            doubles: t.doubles && {
                                step: t.doubles.step,
                                points: t.doubles.points.map(n)
                            }
                        };
                    }
                    return e;
                }
            }, Nr.prototype.toJSON = function() {
                return this.precomputed ? [ this.x, this.y, this.precomputed && {
                    doubles: this.precomputed.doubles && {
                        step: this.precomputed.doubles.step,
                        points: this.precomputed.doubles.points.slice(1)
                    },
                    naf: this.precomputed.naf && {
                        wnd: this.precomputed.naf.wnd,
                        points: this.precomputed.naf.points.slice(1)
                    }
                } ] : [ this.x, this.y ];
            }, Nr.fromJSON = function(t, e, r) {
                "string" == typeof e && (e = JSON.parse(e));
                var n = t.point(e[0], e[1], r);
                if (!e[2]) return n;
                function i(e) {
                    return t.point(e[0], e[1], r);
                }
                var o = e[2];
                return n.precomputed = {
                    beta: null,
                    doubles: o.doubles && {
                        step: o.doubles.step,
                        points: [ n ].concat(o.doubles.points.map(i))
                    },
                    naf: o.naf && {
                        wnd: o.naf.wnd,
                        points: [ n ].concat(o.naf.points.map(i))
                    }
                }, n;
            }, Nr.prototype.inspect = function() {
                return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
            }, Nr.prototype.isInfinity = function() {
                return this.inf;
            }, Nr.prototype.add = function(t) {
                if (this.inf) return t;
                if (t.inf) return this;
                if (this.eq(t)) return this.dbl();
                if (this.neg().eq(t)) return this.curve.point(null, null);
                if (0 === this.x.cmp(t.x)) return this.curve.point(null, null);
                var e = this.y.redSub(t.y);
                0 !== e.cmpn(0) && (e = e.redMul(this.x.redSub(t.x).redInvm()));
                var r = e.redSqr().redISub(this.x).redISub(t.x), n = e.redMul(this.x.redSub(r)).redISub(this.y);
                return this.curve.point(r, n);
            }, Nr.prototype.dbl = function() {
                if (this.inf) return this;
                var t = this.y.redAdd(this.y);
                if (0 === t.cmpn(0)) return this.curve.point(null, null);
                var e = this.curve.a, r = this.x.redSqr(), n = t.redInvm(), i = r.redAdd(r).redIAdd(r).redIAdd(e).redMul(n), o = i.redSqr().redISub(this.x.redAdd(this.x)), s = i.redMul(this.x.redSub(o)).redISub(this.y);
                return this.curve.point(o, s);
            }, Nr.prototype.getX = function() {
                return this.x.fromRed();
            }, Nr.prototype.getY = function() {
                return this.y.fromRed();
            }, Nr.prototype.mul = function(t) {
                return t = new (G())(t, 16), this.isInfinity() ? this : this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve.endo ? this.curve._endoWnafMulAdd([ this ], [ t ]) : this.curve._wnafMul(this, t);
            }, Nr.prototype.mulAdd = function(t, e, r) {
                var n = [ this, e ], i = [ t, r ];
                return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);
            }, Nr.prototype.jmulAdd = function(t, e, r) {
                var n = [ this, e ], i = [ t, r ];
                return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);
            }, Nr.prototype.eq = function(t) {
                return this === t || this.inf === t.inf && (this.inf || 0 === this.x.cmp(t.x) && 0 === this.y.cmp(t.y));
            }, Nr.prototype.neg = function(t) {
                if (this.inf) return this;
                var e = this.curve.point(this.x, this.y.redNeg());
                if (t && this.precomputed) {
                    var r = this.precomputed, n = function(t) {
                        return t.neg();
                    };
                    e.precomputed = {
                        naf: r.naf && {
                            wnd: r.naf.wnd,
                            points: r.naf.points.map(n)
                        },
                        doubles: r.doubles && {
                            step: r.doubles.step,
                            points: r.doubles.points.map(n)
                        }
                    };
                }
                return e;
            }, Nr.prototype.toJ = function() {
                return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
            }, Pr(xr, Er.BasePoint), Sr.prototype.jpoint = function(t, e, r) {
                return new xr(this, t, e, r);
            }, xr.prototype.toP = function() {
                if (this.isInfinity()) return this.curve.point(null, null);
                var t = this.z.redInvm(), e = t.redSqr(), r = this.x.redMul(e), n = this.y.redMul(e).redMul(t);
                return this.curve.point(r, n);
            }, xr.prototype.neg = function() {
                return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
            }, xr.prototype.add = function(t) {
                if (this.isInfinity()) return t;
                if (t.isInfinity()) return this;
                var e = t.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(e), i = t.x.redMul(r), o = this.y.redMul(e.redMul(t.z)), s = t.y.redMul(r.redMul(this.z)), a = n.redSub(i), u = o.redSub(s);
                if (0 === a.cmpn(0)) return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                var l = a.redSqr(), c = l.redMul(a), h = n.redMul(l), f = u.redSqr().redIAdd(c).redISub(h).redISub(h), d = u.redMul(h.redISub(f)).redISub(o.redMul(c)), p = this.z.redMul(t.z).redMul(a);
                return this.curve.jpoint(f, d, p);
            }, xr.prototype.mixedAdd = function(t) {
                if (this.isInfinity()) return t.toJ();
                if (t.isInfinity()) return this;
                var e = this.z.redSqr(), r = this.x, n = t.x.redMul(e), i = this.y, o = t.y.redMul(e).redMul(this.z), s = r.redSub(n), a = i.redSub(o);
                if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                var u = s.redSqr(), l = u.redMul(s), c = r.redMul(u), h = a.redSqr().redIAdd(l).redISub(c).redISub(c), f = a.redMul(c.redISub(h)).redISub(i.redMul(l)), d = this.z.redMul(s);
                return this.curve.jpoint(h, f, d);
            }, xr.prototype.dblp = function(t) {
                if (0 === t) return this;
                if (this.isInfinity()) return this;
                if (!t) return this.dbl();
                var e;
                if (this.curve.zeroA || this.curve.threeA) {
                    var r = this;
                    for (e = 0; e < t; e++) r = r.dbl();
                    return r;
                }
                var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, u = a.redSqr().redSqr(), l = s.redAdd(s);
                for (e = 0; e < t; e++) {
                    var c = o.redSqr(), h = l.redSqr(), f = h.redSqr(), d = c.redAdd(c).redIAdd(c).redIAdd(n.redMul(u)), p = o.redMul(h), m = d.redSqr().redISub(p.redAdd(p)), g = p.redISub(m), y = d.redMul(g);
                    y = y.redIAdd(y).redISub(f);
                    var v = l.redMul(a);
                    e + 1 < t && (u = u.redMul(f)), o = m, a = v, l = y;
                }
                return this.curve.jpoint(o, l.redMul(i), a);
            }, xr.prototype.dbl = function() {
                return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
            }, xr.prototype._zeroDbl = function() {
                var t, e, r;
                if (this.zOne) {
                    var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
                    s = s.redIAdd(s);
                    var a = n.redAdd(n).redIAdd(n), u = a.redSqr().redISub(s).redISub(s), l = o.redIAdd(o);
                    l = (l = l.redIAdd(l)).redIAdd(l), t = u, e = a.redMul(s.redISub(u)).redISub(l), 
                    r = this.y.redAdd(this.y);
                } else {
                    var c = this.x.redSqr(), h = this.y.redSqr(), f = h.redSqr(), d = this.x.redAdd(h).redSqr().redISub(c).redISub(f);
                    d = d.redIAdd(d);
                    var p = c.redAdd(c).redIAdd(c), m = p.redSqr(), g = f.redIAdd(f);
                    g = (g = g.redIAdd(g)).redIAdd(g), t = m.redISub(d).redISub(d), e = p.redMul(d.redISub(t)).redISub(g), 
                    r = (r = this.y.redMul(this.z)).redIAdd(r);
                }
                return this.curve.jpoint(t, e, r);
            }, xr.prototype._threeDbl = function() {
                var t, e, r;
                if (this.zOne) {
                    var n = this.x.redSqr(), i = this.y.redSqr(), o = i.redSqr(), s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);
                    s = s.redIAdd(s);
                    var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), u = a.redSqr().redISub(s).redISub(s);
                    t = u;
                    var l = o.redIAdd(o);
                    l = (l = l.redIAdd(l)).redIAdd(l), e = a.redMul(s.redISub(u)).redISub(l), r = this.y.redAdd(this.y);
                } else {
                    var c = this.z.redSqr(), h = this.y.redSqr(), f = this.x.redMul(h), d = this.x.redSub(c).redMul(this.x.redAdd(c));
                    d = d.redAdd(d).redIAdd(d);
                    var p = f.redIAdd(f), m = (p = p.redIAdd(p)).redAdd(p);
                    t = d.redSqr().redISub(m), r = this.y.redAdd(this.z).redSqr().redISub(h).redISub(c);
                    var g = h.redSqr();
                    g = (g = (g = g.redIAdd(g)).redIAdd(g)).redIAdd(g), e = d.redMul(p.redISub(t)).redISub(g);
                }
                return this.curve.jpoint(t, e, r);
            }, xr.prototype._dbl = function() {
                var t = this.curve.a, e = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = e.redSqr(), s = r.redSqr(), a = o.redAdd(o).redIAdd(o).redIAdd(t.redMul(i)), u = e.redAdd(e), l = (u = u.redIAdd(u)).redMul(s), c = a.redSqr().redISub(l.redAdd(l)), h = l.redISub(c), f = s.redSqr();
                f = (f = (f = f.redIAdd(f)).redIAdd(f)).redIAdd(f);
                var d = a.redMul(h).redISub(f), p = r.redAdd(r).redMul(n);
                return this.curve.jpoint(c, d, p);
            }, xr.prototype.trpl = function() {
                if (!this.curve.zeroA) return this.dbl().add(this);
                var t = this.x.redSqr(), e = this.y.redSqr(), r = this.z.redSqr(), n = e.redSqr(), i = t.redAdd(t).redIAdd(t), o = i.redSqr(), s = this.x.redAdd(e).redSqr().redISub(t).redISub(n), a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), u = n.redIAdd(n);
                u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
                var l = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(u), c = e.redMul(l);
                c = (c = c.redIAdd(c)).redIAdd(c);
                var h = this.x.redMul(a).redISub(c);
                h = (h = h.redIAdd(h)).redIAdd(h);
                var f = this.y.redMul(l.redMul(u.redISub(l)).redISub(s.redMul(a)));
                f = (f = (f = f.redIAdd(f)).redIAdd(f)).redIAdd(f);
                var d = this.z.redAdd(s).redSqr().redISub(r).redISub(a);
                return this.curve.jpoint(h, f, d);
            }, xr.prototype.mul = function(t, e) {
                return t = new (G())(t, e), this.curve._wnafMul(this, t);
            }, xr.prototype.eq = function(t) {
                if ("affine" === t.type) return this.eq(t.toJ());
                if (this === t) return !0;
                var e = this.z.redSqr(), r = t.z.redSqr();
                if (0 !== this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0)) return !1;
                var n = e.redMul(this.z), i = r.redMul(t.z);
                return 0 === this.y.redMul(i).redISub(t.y.redMul(n)).cmpn(0);
            }, xr.prototype.eqXToP = function(t) {
                var e = this.z.redSqr(), r = t.toRed(this.curve.red).redMul(e);
                if (0 === this.x.cmp(r)) return !0;
                for (var n = t.clone(), i = this.curve.redN.redMul(e); ;) {
                    if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
                    if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
                }
            }, xr.prototype.inspect = function() {
                return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
            }, xr.prototype.isInfinity = function() {
                return 0 === this.z.cmpn(0);
            };
            var Ir = pr((function(t, e) {
                var r = e;
                r.base = Er, r.short = Or, r.mont = null, r.edwards = null;
            })), Tr = pr((function(t, e) {
                var r, n = e, i = vr.assert;
                function o(t) {
                    "short" === t.type ? this.curve = new Ir.short(t) : "edwards" === t.type ? this.curve = new Ir.edwards(t) : this.curve = new Ir.mont(t), 
                    this.g = this.curve.g, this.n = this.curve.n, this.hash = t.hash, i(this.g.validate(), "Invalid curve"), 
                    i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                }
                function s(t, e) {
                    Object.defineProperty(n, t, {
                        configurable: !0,
                        enumerable: !0,
                        get: function() {
                            var r = new o(e);
                            return Object.defineProperty(n, t, {
                                configurable: !0,
                                enumerable: !0,
                                value: r
                            }), r;
                        }
                    });
                }
                n.PresetCurve = o, s("p192", {
                    type: "short",
                    prime: "p192",
                    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                    hash: dr().sha256,
                    gRed: !1,
                    g: [ "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811" ]
                }), s("p224", {
                    type: "short",
                    prime: "p224",
                    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                    hash: dr().sha256,
                    gRed: !1,
                    g: [ "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34" ]
                }), s("p256", {
                    type: "short",
                    prime: null,
                    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                    hash: dr().sha256,
                    gRed: !1,
                    g: [ "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5" ]
                }), s("p384", {
                    type: "short",
                    prime: null,
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                    hash: dr().sha384,
                    gRed: !1,
                    g: [ "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f" ]
                }), s("p521", {
                    type: "short",
                    prime: null,
                    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                    hash: dr().sha512,
                    gRed: !1,
                    g: [ "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650" ]
                }), s("curve25519", {
                    type: "mont",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "76d06",
                    b: "1",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: dr().sha256,
                    gRed: !1,
                    g: [ "9" ]
                }), s("ed25519", {
                    type: "edwards",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "-1",
                    c: "1",
                    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: dr().sha256,
                    gRed: !1,
                    g: [ "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658" ]
                });
                try {
                    r = null.crash();
                } catch (t) {
                    r = void 0;
                }
                s("secp256k1", {
                    type: "short",
                    prime: "k256",
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                    a: "0",
                    b: "7",
                    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                    h: "1",
                    hash: dr().sha256,
                    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                    basis: [ {
                        a: "3086d221a7d46bcde86c90e49284eb15",
                        b: "-e4437ed6010e88286f547fa90abfe4c3"
                    }, {
                        a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                        b: "3086d221a7d46bcde86c90e49284eb15"
                    } ],
                    gRed: !1,
                    g: [ "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", r ]
                });
            }));
            function Br(t) {
                if (!(this instanceof Br)) return new Br(t);
                this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, 
                this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, 
                this.K = null, this.V = null;
                var e = yr.toArray(t.entropy, t.entropyEnc || "hex"), r = yr.toArray(t.nonce, t.nonceEnc || "hex"), n = yr.toArray(t.pers, t.persEnc || "hex");
                mr(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), 
                this._init(e, r, n);
            }
            var Cr = Br;
            Br.prototype._init = function(t, e, r) {
                var n = t.concat(e).concat(r);
                this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
                for (var i = 0; i < this.V.length; i++) this.K[i] = 0, this.V[i] = 1;
                this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
            }, Br.prototype._hmac = function() {
                return new (dr().hmac)(this.hash, this.K);
            }, Br.prototype._update = function(t) {
                var e = this._hmac().update(this.V).update([ 0 ]);
                t && (e = e.update(t)), this.K = e.digest(), this.V = this._hmac().update(this.V).digest(), 
                t && (this.K = this._hmac().update(this.V).update([ 1 ]).update(t).digest(), this.V = this._hmac().update(this.V).digest());
            }, Br.prototype.reseed = function(t, e, r, n) {
                "string" != typeof e && (n = r, r = e, e = null), t = yr.toArray(t, e), r = yr.toArray(r, n), 
                mr(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), 
                this._update(t.concat(r || [])), this._reseed = 1;
            }, Br.prototype.generate = function(t, e, r, n) {
                if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
                "string" != typeof e && (n = r, r = e, e = null), r && (r = yr.toArray(r, n || "hex"), 
                this._update(r));
                for (var i = []; i.length < t; ) this.V = this._hmac().update(this.V).digest(), 
                i = i.concat(this.V);
                var o = i.slice(0, t);
                return this._update(r), this._reseed++, yr.encode(o, e);
            };
            var Rr = vr.assert;
            function jr(t, e) {
                this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), 
                e.pub && this._importPublic(e.pub, e.pubEnc);
            }
            var Fr = jr;
            jr.fromPublic = function(t, e, r) {
                return e instanceof jr ? e : new jr(t, {
                    pub: e,
                    pubEnc: r
                });
            }, jr.fromPrivate = function(t, e, r) {
                return e instanceof jr ? e : new jr(t, {
                    priv: e,
                    privEnc: r
                });
            }, jr.prototype.validate = function() {
                var t = this.getPublic();
                return t.isInfinity() ? {
                    result: !1,
                    reason: "Invalid public key"
                } : t.validate() ? t.mul(this.ec.curve.n).isInfinity() ? {
                    result: !0,
                    reason: null
                } : {
                    result: !1,
                    reason: "Public key * N != O"
                } : {
                    result: !1,
                    reason: "Public key is not a point"
                };
            }, jr.prototype.getPublic = function(t, e) {
                return "string" == typeof t && (e = t, t = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), 
                e ? this.pub.encode(e, t) : this.pub;
            }, jr.prototype.getPrivate = function(t) {
                return "hex" === t ? this.priv.toString(16, 2) : this.priv;
            }, jr.prototype._importPrivate = function(t, e) {
                this.priv = new (G())(t, e || 16), this.priv = this.priv.umod(this.ec.curve.n);
            }, jr.prototype._importPublic = function(t, e) {
                if (t.x || t.y) return "mont" === this.ec.curve.type ? Rr(t.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || Rr(t.x && t.y, "Need both x and y coordinate"), 
                void (this.pub = this.ec.curve.point(t.x, t.y));
                this.pub = this.ec.curve.decodePoint(t, e);
            }, jr.prototype.derive = function(t) {
                return t.validate() || Rr(t.validate(), "public point not validated"), t.mul(this.priv).getX();
            }, jr.prototype.sign = function(t, e, r) {
                return this.ec.sign(t, this, e, r);
            }, jr.prototype.verify = function(t, e) {
                return this.ec.verify(t, e, this);
            }, jr.prototype.inspect = function() {
                return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
            };
            var Ur = vr.assert;
            function Lr(t, e) {
                if (t instanceof Lr) return t;
                this._importDER(t, e) || (Ur(t.r && t.s, "Signature without r or s"), this.r = new (G())(t.r, 16), 
                this.s = new (G())(t.s, 16), void 0 === t.recoveryParam ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
            }
            var Dr = Lr;
            function Gr() {
                this.place = 0;
            }
            function qr(t, e) {
                var r = t[e.place++];
                if (!(128 & r)) return r;
                var n = 15 & r;
                if (0 === n || n > 4) return !1;
                for (var i = 0, o = 0, s = e.place; o < n; o++, s++) i <<= 8, i |= t[s], i >>>= 0;
                return !(i <= 127) && (e.place = s, i);
            }
            function zr(t) {
                for (var e = 0, r = t.length - 1; !t[e] && !(128 & t[e + 1]) && e < r; ) e++;
                return 0 === e ? t : t.slice(e);
            }
            function Hr(t, e) {
                if (e < 128) t.push(e); else {
                    var r = 1 + (Math.log(e) / Math.LN2 >>> 3);
                    for (t.push(128 | r); --r; ) t.push(e >>> (r << 3) & 255);
                    t.push(e);
                }
            }
            Lr.prototype._importDER = function(t, e) {
                t = vr.toArray(t, e);
                var r = new Gr;
                if (48 !== t[r.place++]) return !1;
                var n = qr(t, r);
                if (!1 === n) return !1;
                if (n + r.place !== t.length) return !1;
                if (2 !== t[r.place++]) return !1;
                var i = qr(t, r);
                if (!1 === i) return !1;
                var o = t.slice(r.place, i + r.place);
                if (r.place += i, 2 !== t[r.place++]) return !1;
                var s = qr(t, r);
                if (!1 === s) return !1;
                if (t.length !== s + r.place) return !1;
                var a = t.slice(r.place, s + r.place);
                if (0 === o[0]) {
                    if (!(128 & o[1])) return !1;
                    o = o.slice(1);
                }
                if (0 === a[0]) {
                    if (!(128 & a[1])) return !1;
                    a = a.slice(1);
                }
                return this.r = new (G())(o), this.s = new (G())(a), this.recoveryParam = null, 
                !0;
            }, Lr.prototype.toDER = function(t) {
                var e = this.r.toArray(), r = this.s.toArray();
                for (128 & e[0] && (e = [ 0 ].concat(e)), 128 & r[0] && (r = [ 0 ].concat(r)), e = zr(e), 
                r = zr(r); !(r[0] || 128 & r[1]); ) r = r.slice(1);
                var n = [ 2 ];
                Hr(n, e.length), (n = n.concat(e)).push(2), Hr(n, r.length);
                var i = n.concat(r), o = [ 48 ];
                return Hr(o, i.length), o = o.concat(i), vr.encode(o, t);
            };
            var Kr = function() {
                throw new Error("unsupported");
            }, Wr = vr.assert;
            function Vr(t) {
                if (!(this instanceof Vr)) return new Vr(t);
                "string" == typeof t && (Wr(Object.prototype.hasOwnProperty.call(Tr, t), "Unknown curve " + t), 
                t = Tr[t]), t instanceof Tr.PresetCurve && (t = {
                    curve: t
                }), this.curve = t.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), 
                this.g = this.curve.g, this.g = t.curve.g, this.g.precompute(t.curve.n.bitLength() + 1), 
                this.hash = t.hash || t.curve.hash;
            }
            var Jr = Vr;
            Vr.prototype.keyPair = function(t) {
                return new Fr(this, t);
            }, Vr.prototype.keyFromPrivate = function(t, e) {
                return Fr.fromPrivate(this, t, e);
            }, Vr.prototype.keyFromPublic = function(t, e) {
                return Fr.fromPublic(this, t, e);
            }, Vr.prototype.genKeyPair = function(t) {
                t || (t = {});
                for (var e = new Cr({
                    hash: this.hash,
                    pers: t.pers,
                    persEnc: t.persEnc || "utf8",
                    entropy: t.entropy || Kr(this.hash.hmacStrength),
                    entropyEnc: t.entropy && t.entropyEnc || "utf8",
                    nonce: this.n.toArray()
                }), r = this.n.byteLength(), n = this.n.sub(new (G())(2)); ;) {
                    var i = new (G())(e.generate(r));
                    if (!(i.cmp(n) > 0)) return i.iaddn(1), this.keyFromPrivate(i);
                }
            }, Vr.prototype._truncateToN = function(t, e) {
                var r = 8 * t.byteLength() - this.n.bitLength();
                return r > 0 && (t = t.ushrn(r)), !e && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;
            }, Vr.prototype.sign = function(t, e, r, n) {
                "object" == typeof r && (n = r, r = null), n || (n = {}), e = this.keyFromPrivate(e, r), 
                t = this._truncateToN(new (G())(t, 16));
                for (var i = this.n.byteLength(), o = e.getPrivate().toArray("be", i), s = t.toArray("be", i), a = new Cr({
                    hash: this.hash,
                    entropy: o,
                    nonce: s,
                    pers: n.pers,
                    persEnc: n.persEnc || "utf8"
                }), u = this.n.sub(new (G())(1)), l = 0; ;l++) {
                    var c = n.k ? n.k(l) : new (G())(a.generate(this.n.byteLength()));
                    if (!((c = this._truncateToN(c, !0)).cmpn(1) <= 0 || c.cmp(u) >= 0)) {
                        var h = this.g.mul(c);
                        if (!h.isInfinity()) {
                            var f = h.getX(), d = f.umod(this.n);
                            if (0 !== d.cmpn(0)) {
                                var p = c.invm(this.n).mul(d.mul(e.getPrivate()).iadd(t));
                                if (0 !== (p = p.umod(this.n)).cmpn(0)) {
                                    var m = (h.getY().isOdd() ? 1 : 0) | (0 !== f.cmp(d) ? 2 : 0);
                                    return n.canonical && p.cmp(this.nh) > 0 && (p = this.n.sub(p), m ^= 1), new Dr({
                                        r: d,
                                        s: p,
                                        recoveryParam: m
                                    });
                                }
                            }
                        }
                    }
                }
            }, Vr.prototype.verify = function(t, e, r, n) {
                t = this._truncateToN(new (G())(t, 16)), r = this.keyFromPublic(r, n);
                var i = (e = new Dr(e, "hex")).r, o = e.s;
                if (i.cmpn(1) < 0 || i.cmp(this.n) >= 0) return !1;
                if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
                var s, a = o.invm(this.n), u = a.mul(t).umod(this.n), l = a.mul(i).umod(this.n);
                return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(u, r.getPublic(), l)).isInfinity() && s.eqXToP(i) : !(s = this.g.mulAdd(u, r.getPublic(), l)).isInfinity() && 0 === s.getX().umod(this.n).cmp(i);
            }, Vr.prototype.recoverPubKey = function(t, e, r, n) {
                Wr((3 & r) === r, "The recovery param is more than two bits"), e = new Dr(e, n);
                var i = this.n, o = new (G())(t), s = e.r, a = e.s, u = 1 & r, l = r >> 1;
                if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && l) throw new Error("Unable to find sencond key candinate");
                s = l ? this.curve.pointFromX(s.add(this.curve.n), u) : this.curve.pointFromX(s, u);
                var c = e.r.invm(i), h = i.sub(o).mul(c).umod(i), f = a.mul(c).umod(i);
                return this.g.mulAdd(h, s, f);
            }, Vr.prototype.getKeyRecoveryParam = function(t, e, r, n) {
                if (null !== (e = new Dr(e, n)).recoveryParam) return e.recoveryParam;
                for (var i = 0; i < 4; i++) {
                    var o;
                    try {
                        o = this.recoverPubKey(t, e, i);
                    } catch (t) {
                        continue;
                    }
                    if (o.eq(r)) return i;
                }
                throw new Error("Unable to find valid recovery factor");
            };
            var Qr = pr((function(t, e) {
                var r = e;
                r.version = "6.5.4", r.utils = vr, r.rand = function() {
                    throw new Error("unsupported");
                }, r.curve = Ir, r.curves = Tr, r.ec = Jr, r.eddsa = null;
            })).ec;
            const Xr = new v("signing-key/5.7.0");
            let Yr = null;
            function Zr() {
                return Yr || (Yr = new Qr("secp256k1")), Yr;
            }
            class $r {
                constructor(t) {
                    et(this, "curve", "secp256k1"), et(this, "privateKey", I(t)), 32 !== T(this.privateKey) && Xr.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
                    const e = Zr().keyFromPrivate(P(this.privateKey));
                    et(this, "publicKey", "0x" + e.getPublic(!1, "hex")), et(this, "compressedPublicKey", "0x" + e.getPublic(!0, "hex")), 
                    et(this, "_isSigningKey", !0);
                }
                _addPoint(t) {
                    const e = Zr().keyFromPublic(P(this.publicKey)), r = Zr().keyFromPublic(P(t));
                    return "0x" + e.pub.add(r.pub).encodeCompressed("hex");
                }
                signDigest(t) {
                    const e = Zr().keyFromPrivate(P(this.privateKey)), r = P(t);
                    32 !== r.length && Xr.throwArgumentError("bad digest length", "digest", t);
                    const n = e.sign(r, {
                        canonical: !0
                    });
                    return U({
                        recoveryParam: n.recoveryParam,
                        r: F("0x" + n.r.toString(16), 32),
                        s: F("0x" + n.s.toString(16), 32)
                    });
                }
                computeSharedSecret(t) {
                    const e = Zr().keyFromPrivate(P(this.privateKey)), r = Zr().keyFromPublic(P(en(t)));
                    return F("0x" + e.derive(r.getPublic()).toString(16), 32);
                }
                static isSigningKey(t) {
                    return !(!t || !t._isSigningKey);
                }
            }
            function tn(t, e) {
                const r = U(e), n = {
                    r: P(r.r),
                    s: P(r.s)
                };
                return "0x" + Zr().recoverPubKey(P(t), n, r.recoveryParam).encode("hex", !1);
            }
            function en(t, e) {
                const r = P(t);
                if (32 === r.length) {
                    const t = new $r(r);
                    return e ? "0x" + Zr().keyFromPrivate(r).getPublic(!0, "hex") : t.publicKey;
                }
                return 33 === r.length ? e ? I(r) : "0x" + Zr().keyFromPublic(r).getPublic(!1, "hex") : 65 === r.length ? e ? "0x" + Zr().keyFromPublic(r).getPublic(!0, "hex") : I(r) : Xr.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
            }
            const rn = new v("transactions/5.7.0");
            var nn;
            function on(t) {
                return "0x" === t ? null : Ct(t);
            }
            function sn(t) {
                return "0x" === t ? ce : J.from(t);
            }
            !function(t) {
                t[t.legacy = 0] = "legacy", t[t.eip2930 = 1] = "eip2930", t[t.eip1559 = 2] = "eip1559";
            }(nn || (nn = {}));
            const an = [ {
                name: "nonce",
                maxLength: 32,
                numeric: !0
            }, {
                name: "gasPrice",
                maxLength: 32,
                numeric: !0
            }, {
                name: "gasLimit",
                maxLength: 32,
                numeric: !0
            }, {
                name: "to",
                length: 20
            }, {
                name: "value",
                maxLength: 32,
                numeric: !0
            }, {
                name: "data"
            } ], un = {
                chainId: !0,
                data: !0,
                gasLimit: !0,
                gasPrice: !0,
                nonce: !0,
                to: !0,
                type: !0,
                value: !0
            };
            function ln(t) {
                return Ct(B(bt(B(en(t), 1)), 12));
            }
            function cn(t, e) {
                return ln(tn(P(t), e));
            }
            function hn(t, e) {
                const r = S(J.from(t).toHexString());
                return r.length > 32 && rn.throwArgumentError("invalid length for " + e, "transaction:" + e, t), 
                r;
            }
            function fn(t, e) {
                return {
                    address: Ct(t),
                    storageKeys: (e || []).map(((e, r) => (32 !== T(e) && rn.throwArgumentError("invalid access list storageKey", `accessList[${t}:${r}]`, e), 
                    e.toLowerCase())))
                };
            }
            function dn(t) {
                if (Array.isArray(t)) return t.map(((t, e) => Array.isArray(t) ? (t.length > 2 && rn.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${e}]`, t), 
                fn(t[0], t[1])) : fn(t.address, t.storageKeys)));
                const e = Object.keys(t).map((e => {
                    const r = t[e].reduce(((t, e) => (t[e] = !0, t)), {});
                    return fn(e, Object.keys(r).sort());
                }));
                return e.sort(((t, e) => t.address.localeCompare(e.address))), e;
            }
            function pn(t) {
                return dn(t).map((t => [ t.address, t.storageKeys ]));
            }
            function mn(t, e) {
                if (null != t.gasPrice) {
                    const e = J.from(t.gasPrice), r = J.from(t.maxFeePerGas || 0);
                    e.eq(r) || rn.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                        gasPrice: e,
                        maxFeePerGas: r
                    });
                }
                const r = [ hn(t.chainId || 0, "chainId"), hn(t.nonce || 0, "nonce"), hn(t.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), hn(t.maxFeePerGas || 0, "maxFeePerGas"), hn(t.gasLimit || 0, "gasLimit"), null != t.to ? Ct(t.to) : "0x", hn(t.value || 0, "value"), t.data || "0x", pn(t.accessList || []) ];
                if (e) {
                    const t = U(e);
                    r.push(hn(t.recoveryParam, "recoveryParam")), r.push(S(t.r)), r.push(S(t.s));
                }
                return C([ "0x02", Mt(r) ]);
            }
            function gn(t, e) {
                const r = [ hn(t.chainId || 0, "chainId"), hn(t.nonce || 0, "nonce"), hn(t.gasPrice || 0, "gasPrice"), hn(t.gasLimit || 0, "gasLimit"), null != t.to ? Ct(t.to) : "0x", hn(t.value || 0, "value"), t.data || "0x", pn(t.accessList || []) ];
                if (e) {
                    const t = U(e);
                    r.push(hn(t.recoveryParam, "recoveryParam")), r.push(S(t.r)), r.push(S(t.s));
                }
                return C([ "0x01", Mt(r) ]);
            }
            function yn(t, e) {
                if (null == t.type || 0 === t.type) return null != t.accessList && rn.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", t), 
                function(t, e) {
                    it(t, un);
                    const r = [];
                    an.forEach((function(e) {
                        let n = t[e.name] || [];
                        const i = {};
                        e.numeric && (i.hexPad = "left"), n = P(I(n, i)), e.length && n.length !== e.length && n.length > 0 && rn.throwArgumentError("invalid length for " + e.name, "transaction:" + e.name, n), 
                        e.maxLength && (n = S(n), n.length > e.maxLength && rn.throwArgumentError("invalid length for " + e.name, "transaction:" + e.name, n)), 
                        r.push(I(n));
                    }));
                    let n = 0;
                    if (null != t.chainId ? (n = t.chainId, "number" != typeof n && rn.throwArgumentError("invalid transaction.chainId", "transaction", t)) : e && !_(e) && e.v > 28 && (n = Math.floor((e.v - 35) / 2)), 
                    0 !== n && (r.push(I(n)), r.push("0x"), r.push("0x")), !e) return Mt(r);
                    const i = U(e);
                    let o = 27 + i.recoveryParam;
                    return 0 !== n ? (r.pop(), r.pop(), r.pop(), o += 2 * n + 8, i.v > 28 && i.v !== o && rn.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", e)) : i.v !== o && rn.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", e), 
                    r.push(I(o)), r.push(S(P(i.r))), r.push(S(P(i.s))), Mt(r);
                }(t, e);
                switch (t.type) {
                  case 1:
                    return gn(t, e);

                  case 2:
                    return mn(t, e);
                }
                return rn.throwError(`unsupported transaction type: ${t.type}`, v.errors.UNSUPPORTED_OPERATION, {
                    operation: "serializeTransaction",
                    transactionType: t.type
                });
            }
            function vn(t, e, r) {
                try {
                    const r = sn(e[0]).toNumber();
                    if (0 !== r && 1 !== r) throw new Error("bad recid");
                    t.v = r;
                } catch (t) {
                    rn.throwArgumentError("invalid v for transaction type: 1", "v", e[0]);
                }
                t.r = F(e[1], 32), t.s = F(e[2], 32);
                try {
                    const e = bt(r(t));
                    t.from = cn(e, {
                        r: t.r,
                        s: t.s,
                        recoveryParam: t.v
                    });
                } catch (t) {}
            }
            function bn(t) {
                const e = P(t);
                if (e[0] > 127) return function(t) {
                    const e = St(t);
                    9 !== e.length && 6 !== e.length && rn.throwArgumentError("invalid raw transaction", "rawTransaction", t);
                    const r = {
                        nonce: sn(e[0]).toNumber(),
                        gasPrice: sn(e[1]),
                        gasLimit: sn(e[2]),
                        to: on(e[3]),
                        value: sn(e[4]),
                        data: e[5],
                        chainId: 0
                    };
                    if (6 === e.length) return r;
                    try {
                        r.v = J.from(e[6]).toNumber();
                    } catch (t) {
                        return r;
                    }
                    if (r.r = F(e[7], 32), r.s = F(e[8], 32), J.from(r.r).isZero() && J.from(r.s).isZero()) r.chainId = r.v, 
                    r.v = 0; else {
                        r.chainId = Math.floor((r.v - 35) / 2), r.chainId < 0 && (r.chainId = 0);
                        let n = r.v - 27;
                        const i = e.slice(0, 6);
                        0 !== r.chainId && (i.push(I(r.chainId)), i.push("0x"), i.push("0x"), n -= 2 * r.chainId + 8);
                        const o = bt(Mt(i));
                        try {
                            r.from = cn(o, {
                                r: I(r.r),
                                s: I(r.s),
                                recoveryParam: n
                            });
                        } catch (t) {}
                        r.hash = bt(t);
                    }
                    return r.type = null, r;
                }(e);
                switch (e[0]) {
                  case 1:
                    return function(t) {
                        const e = St(t.slice(1));
                        8 !== e.length && 11 !== e.length && rn.throwArgumentError("invalid component count for transaction type: 1", "payload", I(t));
                        const r = {
                            type: 1,
                            chainId: sn(e[0]).toNumber(),
                            nonce: sn(e[1]).toNumber(),
                            gasPrice: sn(e[2]),
                            gasLimit: sn(e[3]),
                            to: on(e[4]),
                            value: sn(e[5]),
                            data: e[6],
                            accessList: dn(e[7])
                        };
                        return 8 === e.length || (r.hash = bt(t), vn(r, e.slice(8), gn)), r;
                    }(e);

                  case 2:
                    return function(t) {
                        const e = St(t.slice(1));
                        9 !== e.length && 12 !== e.length && rn.throwArgumentError("invalid component count for transaction type: 2", "payload", I(t));
                        const r = sn(e[2]), n = sn(e[3]), i = {
                            type: 2,
                            chainId: sn(e[0]).toNumber(),
                            nonce: sn(e[1]).toNumber(),
                            maxPriorityFeePerGas: r,
                            maxFeePerGas: n,
                            gasPrice: null,
                            gasLimit: sn(e[4]),
                            to: on(e[5]),
                            value: sn(e[6]),
                            data: e[7],
                            accessList: dn(e[8])
                        };
                        return 9 === e.length || (i.hash = bt(t), vn(i, e.slice(9), mn)), i;
                    }(e);
                }
                return rn.throwError(`unsupported transaction type: ${e[0]}`, v.errors.UNSUPPORTED_OPERATION, {
                    operation: "parseTransaction",
                    transactionType: e[0]
                });
            }
            var wn = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const An = new v("contracts/5.7.0"), _n = {
                chainId: !0,
                data: !0,
                from: !0,
                gasLimit: !0,
                gasPrice: !0,
                nonce: !0,
                to: !0,
                value: !0,
                type: !0,
                accessList: !0,
                maxFeePerGas: !0,
                maxPriorityFeePerGas: !0,
                customData: !0,
                ccipReadEnabled: !0
            };
            function En(t, e) {
                return wn(this, void 0, void 0, (function*() {
                    const r = yield e;
                    "string" != typeof r && An.throwArgumentError("invalid address or ENS name", "name", r);
                    try {
                        return Ct(r);
                    } catch (t) {}
                    t || An.throwError("a provider or signer is needed to resolve ENS names", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName"
                    });
                    const n = yield t.resolveName(r);
                    return null == n && An.throwArgumentError("resolver or addr is not configured for ENS name", "name", r), 
                    n;
                }));
            }
            function Mn(t, e, r) {
                return wn(this, void 0, void 0, (function*() {
                    return Array.isArray(r) ? yield Promise.all(r.map(((r, n) => Mn(t, Array.isArray(e) ? e[n] : e[r.name], r)))) : "address" === r.type ? yield En(t, e) : "tuple" === r.type ? yield Mn(t, e, r.components) : "array" === r.baseType ? Array.isArray(e) ? yield Promise.all(e.map((e => Mn(t, e, r.arrayChildren)))) : Promise.reject(An.makeError("invalid value for array", v.errors.INVALID_ARGUMENT, {
                        argument: "value",
                        value: e
                    })) : e;
                }));
            }
            function Pn(t, e, r) {
                return wn(this, void 0, void 0, (function*() {
                    let n = {};
                    r.length === e.inputs.length + 1 && "object" == typeof r[r.length - 1] && (n = ot(r.pop())), 
                    An.checkArgumentCount(r.length, e.inputs.length, "passed to contract"), t.signer ? n.from ? n.from = nt({
                        override: En(t.signer, n.from),
                        signer: t.signer.getAddress()
                    }).then((t => wn(this, void 0, void 0, (function*() {
                        return Ct(t.signer) !== t.override && An.throwError("Contract with a Signer cannot override from", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "overrides.from"
                        }), t.override;
                    })))) : n.from = t.signer.getAddress() : n.from && (n.from = En(t.provider, n.from));
                    const i = yield nt({
                        args: Mn(t.signer || t.provider, r, e.inputs),
                        address: t.resolvedAddress,
                        overrides: nt(n) || {}
                    }), o = t.interface.encodeFunctionData(e, i.args), s = {
                        data: o,
                        to: i.address
                    }, a = i.overrides;
                    if (null != a.nonce && (s.nonce = J.from(a.nonce).toNumber()), null != a.gasLimit && (s.gasLimit = J.from(a.gasLimit)), 
                    null != a.gasPrice && (s.gasPrice = J.from(a.gasPrice)), null != a.maxFeePerGas && (s.maxFeePerGas = J.from(a.maxFeePerGas)), 
                    null != a.maxPriorityFeePerGas && (s.maxPriorityFeePerGas = J.from(a.maxPriorityFeePerGas)), 
                    null != a.from && (s.from = a.from), null != a.type && (s.type = a.type), null != a.accessList && (s.accessList = dn(a.accessList)), 
                    null == s.gasLimit && null != e.gas) {
                        let t = 21e3;
                        const r = P(o);
                        for (let e = 0; e < r.length; e++) t += 4, r[e] && (t += 64);
                        s.gasLimit = J.from(e.gas).add(t);
                    }
                    if (a.value) {
                        const t = J.from(a.value);
                        t.isZero() || e.payable || An.throwError("non-payable method cannot override value", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "overrides.value",
                            value: n.value
                        }), s.value = t;
                    }
                    a.customData && (s.customData = ot(a.customData)), a.ccipReadEnabled && (s.ccipReadEnabled = !!a.ccipReadEnabled), 
                    delete n.nonce, delete n.gasLimit, delete n.gasPrice, delete n.from, delete n.value, 
                    delete n.type, delete n.accessList, delete n.maxFeePerGas, delete n.maxPriorityFeePerGas, 
                    delete n.customData, delete n.ccipReadEnabled;
                    const u = Object.keys(n).filter((t => null != n[t]));
                    return u.length && An.throwError(`cannot override ${u.map((t => JSON.stringify(t))).join(",")}`, v.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides",
                        overrides: u
                    }), s;
                }));
            }
            function kn(t, e) {
                const r = e.wait.bind(e);
                e.wait = e => r(e).then((e => (e.events = e.logs.map((r => {
                    let n = lt(r), i = null;
                    try {
                        i = t.interface.parseLog(r);
                    } catch (t) {}
                    return i && (n.args = i.args, n.decode = (e, r) => t.interface.decodeEventLog(i.eventFragment, e, r), 
                    n.event = i.name, n.eventSignature = i.signature), n.removeListener = () => t.provider, 
                    n.getBlock = () => t.provider.getBlock(e.blockHash), n.getTransaction = () => t.provider.getTransaction(e.transactionHash), 
                    n.getTransactionReceipt = () => Promise.resolve(e), n;
                })), e)));
            }
            function Sn(t, e, r) {
                const n = t.signer || t.provider;
                return function(...i) {
                    return wn(this, void 0, void 0, (function*() {
                        let o;
                        if (i.length === e.inputs.length + 1 && "object" == typeof i[i.length - 1]) {
                            const t = ot(i.pop());
                            null != t.blockTag && (o = yield t.blockTag), delete t.blockTag, i.push(t);
                        }
                        null != t.deployTransaction && (yield t._deployed(o));
                        const s = yield Pn(t, e, i), a = yield n.call(s, o);
                        try {
                            let n = t.interface.decodeFunctionResult(e, a);
                            return r && 1 === e.outputs.length && (n = n[0]), n;
                        } catch (e) {
                            throw e.code === v.errors.CALL_EXCEPTION && (e.address = t.address, e.args = i, 
                            e.transaction = s), e;
                        }
                    }));
                };
            }
            function On(t, e, r) {
                return e.constant ? Sn(t, e, r) : function(t, e) {
                    return function(...r) {
                        return wn(this, void 0, void 0, (function*() {
                            t.signer || An.throwError("sending a transaction requires a signer", v.errors.UNSUPPORTED_OPERATION, {
                                operation: "sendTransaction"
                            }), null != t.deployTransaction && (yield t._deployed());
                            const n = yield Pn(t, e, r), i = yield t.signer.sendTransaction(n);
                            return kn(t, i), i;
                        }));
                    };
                }(t, e);
            }
            function Nn(t) {
                return !t.address || null != t.topics && 0 !== t.topics.length ? (t.address || "*") + "@" + (t.topics ? t.topics.map((t => Array.isArray(t) ? t.join("|") : t)).join(":") : "") : "*";
            }
            class xn {
                constructor(t, e) {
                    et(this, "tag", t), et(this, "filter", e), this._listeners = [];
                }
                addListener(t, e) {
                    this._listeners.push({
                        listener: t,
                        once: e
                    });
                }
                removeListener(t) {
                    let e = !1;
                    this._listeners = this._listeners.filter((r => !(!e && r.listener === t) || (e = !0, 
                    !1)));
                }
                removeAllListeners() {
                    this._listeners = [];
                }
                listeners() {
                    return this._listeners.map((t => t.listener));
                }
                listenerCount() {
                    return this._listeners.length;
                }
                run(t) {
                    const e = this.listenerCount();
                    return this._listeners = this._listeners.filter((e => {
                        const r = t.slice();
                        return setTimeout((() => {
                            e.listener.apply(this, r);
                        }), 0), !e.once;
                    })), e;
                }
                prepareEvent(t) {}
                getEmit(t) {
                    return [ t ];
                }
            }
            class In extends xn {
                constructor() {
                    super("error", null);
                }
            }
            class Tn extends xn {
                constructor(t, e, r, n) {
                    const i = {
                        address: t
                    };
                    let o = e.getEventTopic(r);
                    n ? (o !== n[0] && An.throwArgumentError("topic mismatch", "topics", n), i.topics = n.slice()) : i.topics = [ o ], 
                    super(Nn(i), i), et(this, "address", t), et(this, "interface", e), et(this, "fragment", r);
                }
                prepareEvent(t) {
                    super.prepareEvent(t), t.event = this.fragment.name, t.eventSignature = this.fragment.format(), 
                    t.decode = (t, e) => this.interface.decodeEventLog(this.fragment, t, e);
                    try {
                        t.args = this.interface.decodeEventLog(this.fragment, t.data, t.topics);
                    } catch (e) {
                        t.args = null, t.decodeError = e;
                    }
                }
                getEmit(t) {
                    const e = dt(t.args);
                    if (e.length) throw e[0].error;
                    const r = (t.args || []).slice();
                    return r.push(t), r;
                }
            }
            class Bn extends xn {
                constructor(t, e) {
                    super("*", {
                        address: t
                    }), et(this, "address", t), et(this, "interface", e);
                }
                prepareEvent(t) {
                    super.prepareEvent(t);
                    try {
                        const e = this.interface.parseLog(t);
                        t.event = e.name, t.eventSignature = e.signature, t.decode = (t, r) => this.interface.decodeEventLog(e.eventFragment, t, r), 
                        t.args = e.args;
                    } catch (t) {}
                }
            }
            class Cn {
                constructor(t, e, r) {
                    et(this, "interface", rt(new.target, "getInterface")(e)), null == r ? (et(this, "provider", null), 
                    et(this, "signer", null)) : cr.isSigner(r) ? (et(this, "provider", r.provider || null), 
                    et(this, "signer", r)) : or.isProvider(r) ? (et(this, "provider", r), et(this, "signer", null)) : An.throwArgumentError("invalid signer or provider", "signerOrProvider", r), 
                    et(this, "callStatic", {}), et(this, "estimateGas", {}), et(this, "functions", {}), 
                    et(this, "populateTransaction", {}), et(this, "filters", {});
                    {
                        const t = {};
                        Object.keys(this.interface.events).forEach((e => {
                            const r = this.interface.events[e];
                            et(this.filters, e, ((...t) => ({
                                address: this.address,
                                topics: this.interface.encodeFilterTopics(r, t)
                            }))), t[r.name] || (t[r.name] = []), t[r.name].push(e);
                        })), Object.keys(t).forEach((e => {
                            const r = t[e];
                            1 === r.length ? et(this.filters, e, this.filters[r[0]]) : An.warn(`Duplicate definition of ${e} (${r.join(", ")})`);
                        }));
                    }
                    if (et(this, "_runningEvents", {}), et(this, "_wrappedEmits", {}), null == t && An.throwArgumentError("invalid contract address or ENS name", "addressOrName", t), 
                    et(this, "address", t), this.provider) et(this, "resolvedAddress", En(this.provider, t)); else try {
                        et(this, "resolvedAddress", Promise.resolve(Ct(t)));
                    } catch (t) {
                        An.throwError("provider is required to use ENS name as contract address", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "new Contract"
                        });
                    }
                    this.resolvedAddress.catch((t => {}));
                    const n = {}, i = {};
                    Object.keys(this.interface.functions).forEach((t => {
                        const e = this.interface.functions[t];
                        if (i[t]) An.warn(`Duplicate ABI entry for ${JSON.stringify(t)}`); else {
                            i[t] = !0;
                            {
                                const r = e.name;
                                n[`%${r}`] || (n[`%${r}`] = []), n[`%${r}`].push(t);
                            }
                            null == this[t] && et(this, t, On(this, e, !0)), null == this.functions[t] && et(this.functions, t, On(this, e, !1)), 
                            null == this.callStatic[t] && et(this.callStatic, t, Sn(this, e, !0)), null == this.populateTransaction[t] && et(this.populateTransaction, t, function(t, e) {
                                return function(...r) {
                                    return Pn(t, e, r);
                                };
                            }(this, e)), null == this.estimateGas[t] && et(this.estimateGas, t, function(t, e) {
                                const r = t.signer || t.provider;
                                return function(...n) {
                                    return wn(this, void 0, void 0, (function*() {
                                        r || An.throwError("estimate require a provider or signer", v.errors.UNSUPPORTED_OPERATION, {
                                            operation: "estimateGas"
                                        });
                                        const i = yield Pn(t, e, n);
                                        return yield r.estimateGas(i);
                                    }));
                                };
                            }(this, e));
                        }
                    })), Object.keys(n).forEach((t => {
                        const e = n[t];
                        if (e.length > 1) return;
                        t = t.substring(1);
                        const r = e[0];
                        try {
                            null == this[t] && et(this, t, this[r]);
                        } catch (t) {}
                        null == this.functions[t] && et(this.functions, t, this.functions[r]), null == this.callStatic[t] && et(this.callStatic, t, this.callStatic[r]), 
                        null == this.populateTransaction[t] && et(this.populateTransaction, t, this.populateTransaction[r]), 
                        null == this.estimateGas[t] && et(this.estimateGas, t, this.estimateGas[r]);
                    }));
                }
                static getContractAddress(t) {
                    return Ft(t);
                }
                static getInterface(t) {
                    return er.isInterface(t) ? t : new er(t);
                }
                deployed() {
                    return this._deployed();
                }
                _deployed(t) {
                    return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then((() => this)) : this._deployedPromise = this.provider.getCode(this.address, t).then((t => ("0x" === t && An.throwError("contract not deployed", v.errors.UNSUPPORTED_OPERATION, {
                        contractAddress: this.address,
                        operation: "getDeployed"
                    }), this)))), this._deployedPromise;
                }
                fallback(t) {
                    this.signer || An.throwError("sending a transactions require a signer", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction(fallback)"
                    });
                    const e = ot(t || {});
                    return [ "from", "to" ].forEach((function(t) {
                        null != e[t] && An.throwError("cannot override " + t, v.errors.UNSUPPORTED_OPERATION, {
                            operation: t
                        });
                    })), e.to = this.resolvedAddress, this.deployed().then((() => this.signer.sendTransaction(e)));
                }
                connect(t) {
                    "string" == typeof t && (t = new hr(t, this.provider));
                    const e = new this.constructor(this.address, this.interface, t);
                    return this.deployTransaction && et(e, "deployTransaction", this.deployTransaction), 
                    e;
                }
                attach(t) {
                    return new this.constructor(t, this.interface, this.signer || this.provider);
                }
                static isIndexed(t) {
                    return Ze.isIndexed(t);
                }
                _normalizeRunningEvent(t) {
                    return this._runningEvents[t.tag] ? this._runningEvents[t.tag] : t;
                }
                _getRunningEvent(t) {
                    if ("string" == typeof t) {
                        if ("error" === t) return this._normalizeRunningEvent(new In);
                        if ("event" === t) return this._normalizeRunningEvent(new xn("event", null));
                        if ("*" === t) return this._normalizeRunningEvent(new Bn(this.address, this.interface));
                        const e = this.interface.getEvent(t);
                        return this._normalizeRunningEvent(new Tn(this.address, this.interface, e));
                    }
                    if (t.topics && t.topics.length > 0) {
                        try {
                            const e = t.topics[0];
                            if ("string" != typeof e) throw new Error("invalid topic");
                            const r = this.interface.getEvent(e);
                            return this._normalizeRunningEvent(new Tn(this.address, this.interface, r, t.topics));
                        } catch (t) {}
                        const e = {
                            address: this.address,
                            topics: t.topics
                        };
                        return this._normalizeRunningEvent(new xn(Nn(e), e));
                    }
                    return this._normalizeRunningEvent(new Bn(this.address, this.interface));
                }
                _checkRunningEvents(t) {
                    if (0 === t.listenerCount()) {
                        delete this._runningEvents[t.tag];
                        const e = this._wrappedEmits[t.tag];
                        e && t.filter && (this.provider.off(t.filter, e), delete this._wrappedEmits[t.tag]);
                    }
                }
                _wrapEvent(t, e, r) {
                    const n = lt(e);
                    return n.removeListener = () => {
                        r && (t.removeListener(r), this._checkRunningEvents(t));
                    }, n.getBlock = () => this.provider.getBlock(e.blockHash), n.getTransaction = () => this.provider.getTransaction(e.transactionHash), 
                    n.getTransactionReceipt = () => this.provider.getTransactionReceipt(e.transactionHash), 
                    t.prepareEvent(n), n;
                }
                _addEventListener(t, e, r) {
                    if (this.provider || An.throwError("events require a provider or a signer with a provider", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "once"
                    }), t.addListener(e, r), this._runningEvents[t.tag] = t, !this._wrappedEmits[t.tag]) {
                        const r = r => {
                            let n = this._wrapEvent(t, r, e);
                            if (null == n.decodeError) try {
                                const e = t.getEmit(n);
                                this.emit(t.filter, ...e);
                            } catch (t) {
                                n.decodeError = t.error;
                            }
                            null != t.filter && this.emit("event", n), null != n.decodeError && this.emit("error", n.decodeError, n);
                        };
                        this._wrappedEmits[t.tag] = r, null != t.filter && this.provider.on(t.filter, r);
                    }
                }
                queryFilter(t, e, r) {
                    const n = this._getRunningEvent(t), i = ot(n.filter);
                    return "string" == typeof e && N(e, 32) ? (null != r && An.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", r), 
                    i.blockHash = e) : (i.fromBlock = null != e ? e : 0, i.toBlock = null != r ? r : "latest"), 
                    this.provider.getLogs(i).then((t => t.map((t => this._wrapEvent(n, t, null)))));
                }
                on(t, e) {
                    return this._addEventListener(this._getRunningEvent(t), e, !1), this;
                }
                once(t, e) {
                    return this._addEventListener(this._getRunningEvent(t), e, !0), this;
                }
                emit(t, ...e) {
                    if (!this.provider) return !1;
                    const r = this._getRunningEvent(t), n = r.run(e) > 0;
                    return this._checkRunningEvents(r), n;
                }
                listenerCount(t) {
                    return this.provider ? null == t ? Object.keys(this._runningEvents).reduce(((t, e) => t + this._runningEvents[e].listenerCount()), 0) : this._getRunningEvent(t).listenerCount() : 0;
                }
                listeners(t) {
                    if (!this.provider) return [];
                    if (null == t) {
                        const t = [];
                        for (let e in this._runningEvents) this._runningEvents[e].listeners().forEach((e => {
                            t.push(e);
                        }));
                        return t;
                    }
                    return this._getRunningEvent(t).listeners();
                }
                removeAllListeners(t) {
                    if (!this.provider) return this;
                    if (null == t) {
                        for (const t in this._runningEvents) {
                            const e = this._runningEvents[t];
                            e.removeAllListeners(), this._checkRunningEvents(e);
                        }
                        return this;
                    }
                    const e = this._getRunningEvent(t);
                    return e.removeAllListeners(), this._checkRunningEvents(e), this;
                }
                off(t, e) {
                    if (!this.provider) return this;
                    const r = this._getRunningEvent(t);
                    return r.removeListener(e), this._checkRunningEvents(r), this;
                }
                removeListener(t, e) {
                    return this.off(t, e);
                }
            }
            class Rn extends Cn {}
            class jn {
                constructor(t, e, r) {
                    let n = null;
                    n = "string" == typeof e ? e : M(e) ? I(e) : e && "string" == typeof e.object ? e.object : "!", 
                    "0x" !== n.substring(0, 2) && (n = "0x" + n), (!N(n) || n.length % 2) && An.throwArgumentError("invalid bytecode", "bytecode", e), 
                    r && !cr.isSigner(r) && An.throwArgumentError("invalid signer", "signer", r), et(this, "bytecode", n), 
                    et(this, "interface", rt(new.target, "getInterface")(t)), et(this, "signer", r || null);
                }
                getDeployTransaction(...t) {
                    let e = {};
                    if (t.length === this.interface.deploy.inputs.length + 1 && "object" == typeof t[t.length - 1]) {
                        e = ot(t.pop());
                        for (const t in e) if (!_n[t]) throw new Error("unknown transaction override " + t);
                    }
                    if ([ "data", "from", "to" ].forEach((t => {
                        null != e[t] && An.throwError("cannot override " + t, v.errors.UNSUPPORTED_OPERATION, {
                            operation: t
                        });
                    })), e.value) {
                        J.from(e.value).isZero() || this.interface.deploy.payable || An.throwError("non-payable constructor cannot override value", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "overrides.value",
                            value: e.value
                        });
                    }
                    return An.checkArgumentCount(t.length, this.interface.deploy.inputs.length, " in Contract constructor"), 
                    e.data = I(k([ this.bytecode, this.interface.encodeDeploy(t) ])), e;
                }
                deploy(...t) {
                    return wn(this, void 0, void 0, (function*() {
                        let e = {};
                        t.length === this.interface.deploy.inputs.length + 1 && (e = t.pop()), An.checkArgumentCount(t.length, this.interface.deploy.inputs.length, " in Contract constructor");
                        const r = yield Mn(this.signer, t, this.interface.deploy.inputs);
                        r.push(e);
                        const n = this.getDeployTransaction(...r), i = yield this.signer.sendTransaction(n), o = rt(this.constructor, "getContractAddress")(i), s = rt(this.constructor, "getContract")(o, this.interface, this.signer);
                        return kn(s, i), et(s, "deployTransaction", i), s;
                    }));
                }
                attach(t) {
                    return this.constructor.getContract(t, this.interface, this.signer);
                }
                connect(t) {
                    return new this.constructor(this.interface, this.bytecode, t);
                }
                static fromSolidity(t, e) {
                    null == t && An.throwError("missing compiler output", v.errors.MISSING_ARGUMENT, {
                        argument: "compilerOutput"
                    }), "string" == typeof t && (t = JSON.parse(t));
                    const r = t.abi;
                    let n = null;
                    return t.bytecode ? n = t.bytecode : t.evm && t.evm.bytecode && (n = t.evm.bytecode), 
                    new this(r, n, e);
                }
                static getInterface(t) {
                    return Rn.getInterface(t);
                }
                static getContractAddress(t) {
                    return Ft(t);
                }
                static getContract(t, e, r) {
                    return new Rn(t, e, r);
                }
            }
            const Fn = new v(q), Un = {}, Ln = J.from(0), Dn = J.from(-1);
            function Gn(t, e, r, n) {
                const i = {
                    fault: e,
                    operation: r
                };
                return void 0 !== n && (i.value = n), Fn.throwError(t, v.errors.NUMERIC_FAULT, i);
            }
            let qn = "0";
            for (;qn.length < 256; ) qn += qn;
            function zn(t) {
                if ("number" != typeof t) try {
                    t = J.from(t).toNumber();
                } catch (t) {}
                return "number" == typeof t && t >= 0 && t <= 256 && !(t % 1) ? "1" + qn.substring(0, t) : Fn.throwArgumentError("invalid decimal size", "decimals", t);
            }
            function Hn(t, e) {
                null == e && (e = 0);
                const r = zn(e), n = (t = J.from(t)).lt(Ln);
                n && (t = t.mul(Dn));
                let i = t.mod(r).toString();
                for (;i.length < r.length - 1; ) i = "0" + i;
                i = i.match(/^([0-9]*[1-9]|0)(0*)/)[1];
                const o = t.div(r).toString();
                return t = 1 === r.length ? o : o + "." + i, n && (t = "-" + t), t;
            }
            function Kn(t, e) {
                null == e && (e = 0);
                const r = zn(e);
                "string" == typeof t && t.match(/^-?[0-9.]+$/) || Fn.throwArgumentError("invalid decimal value", "value", t);
                const n = "-" === t.substring(0, 1);
                n && (t = t.substring(1)), "." === t && Fn.throwArgumentError("missing value", "value", t);
                const i = t.split(".");
                i.length > 2 && Fn.throwArgumentError("too many decimal points", "value", t);
                let o = i[0], s = i[1];
                for (o || (o = "0"), s || (s = "0"); "0" === s[s.length - 1]; ) s = s.substring(0, s.length - 1);
                for (s.length > r.length - 1 && Gn("fractional component exceeds decimals", "underflow", "parseFixed"), 
                "" === s && (s = "0"); s.length < r.length - 1; ) s += "0";
                const a = J.from(o), u = J.from(s);
                let l = a.mul(r).add(u);
                return n && (l = l.mul(Dn)), l;
            }
            class Wn {
                constructor(t, e, r, n) {
                    t !== Un && Fn.throwError("cannot use FixedFormat constructor; use FixedFormat.from", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "new FixedFormat"
                    }), this.signed = e, this.width = r, this.decimals = n, this.name = (e ? "" : "u") + "fixed" + String(r) + "x" + String(n), 
                    this._multiplier = zn(n), Object.freeze(this);
                }
                static from(t) {
                    if (t instanceof Wn) return t;
                    "number" == typeof t && (t = `fixed128x${t}`);
                    let e = !0, r = 128, n = 18;
                    if ("string" == typeof t) if ("fixed" === t) ; else if ("ufixed" === t) e = !1; else {
                        const i = t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                        i || Fn.throwArgumentError("invalid fixed format", "format", t), e = "u" !== i[1], 
                        r = parseInt(i[2]), n = parseInt(i[3]);
                    } else if (t) {
                        const i = (e, r, n) => null == t[e] ? n : (typeof t[e] !== r && Fn.throwArgumentError("invalid fixed format (" + e + " not " + r + ")", "format." + e, t[e]), 
                        t[e]);
                        e = i("signed", "boolean", e), r = i("width", "number", r), n = i("decimals", "number", n);
                    }
                    return r % 8 && Fn.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", r), 
                    n > 80 && Fn.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", n), 
                    new Wn(Un, e, r, n);
                }
            }
            class Vn {
                constructor(t, e, r, n) {
                    t !== Un && Fn.throwError("cannot use FixedNumber constructor; use FixedNumber.from", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "new FixedFormat"
                    }), this.format = n, this._hex = e, this._value = r, this._isFixedNumber = !0, Object.freeze(this);
                }
                _checkFormat(t) {
                    this.format.name !== t.format.name && Fn.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", t);
                }
                addUnsafe(t) {
                    this._checkFormat(t);
                    const e = Kn(this._value, this.format.decimals), r = Kn(t._value, t.format.decimals);
                    return Vn.fromValue(e.add(r), this.format.decimals, this.format);
                }
                subUnsafe(t) {
                    this._checkFormat(t);
                    const e = Kn(this._value, this.format.decimals), r = Kn(t._value, t.format.decimals);
                    return Vn.fromValue(e.sub(r), this.format.decimals, this.format);
                }
                mulUnsafe(t) {
                    this._checkFormat(t);
                    const e = Kn(this._value, this.format.decimals), r = Kn(t._value, t.format.decimals);
                    return Vn.fromValue(e.mul(r).div(this.format._multiplier), this.format.decimals, this.format);
                }
                divUnsafe(t) {
                    this._checkFormat(t);
                    const e = Kn(this._value, this.format.decimals), r = Kn(t._value, t.format.decimals);
                    return Vn.fromValue(e.mul(this.format._multiplier).div(r), this.format.decimals, this.format);
                }
                floor() {
                    const t = this.toString().split(".");
                    1 === t.length && t.push("0");
                    let e = Vn.from(t[0], this.format);
                    const r = !t[1].match(/^(0*)$/);
                    return this.isNegative() && r && (e = e.subUnsafe(Jn.toFormat(e.format))), e;
                }
                ceiling() {
                    const t = this.toString().split(".");
                    1 === t.length && t.push("0");
                    let e = Vn.from(t[0], this.format);
                    const r = !t[1].match(/^(0*)$/);
                    return !this.isNegative() && r && (e = e.addUnsafe(Jn.toFormat(e.format))), e;
                }
                round(t) {
                    null == t && (t = 0);
                    const e = this.toString().split(".");
                    if (1 === e.length && e.push("0"), (t < 0 || t > 80 || t % 1) && Fn.throwArgumentError("invalid decimal count", "decimals", t), 
                    e[1].length <= t) return this;
                    const r = Vn.from("1" + qn.substring(0, t), this.format), n = Qn.toFormat(this.format);
                    return this.mulUnsafe(r).addUnsafe(n).floor().divUnsafe(r);
                }
                isZero() {
                    return "0.0" === this._value || "0" === this._value;
                }
                isNegative() {
                    return "-" === this._value[0];
                }
                toString() {
                    return this._value;
                }
                toHexString(t) {
                    if (null == t) return this._hex;
                    t % 8 && Fn.throwArgumentError("invalid byte width", "width", t);
                    return F(J.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString(), t / 8);
                }
                toUnsafeFloat() {
                    return parseFloat(this.toString());
                }
                toFormat(t) {
                    return Vn.fromString(this._value, t);
                }
                static fromValue(t, e, r) {
                    return null != r || null == e || function(t) {
                        return null != t && (J.isBigNumber(t) || "number" == typeof t && t % 1 == 0 || "string" == typeof t && !!t.match(/^-?[0-9]+$/) || N(t) || "bigint" == typeof t || M(t));
                    }(e) || (r = e, e = null), null == e && (e = 0), null == r && (r = "fixed"), Vn.fromString(Hn(t, e), Wn.from(r));
                }
                static fromString(t, e) {
                    null == e && (e = "fixed");
                    const r = Wn.from(e), n = Kn(t, r.decimals);
                    !r.signed && n.lt(Ln) && Gn("unsigned value cannot be negative", "overflow", "value", t);
                    let i = null;
                    r.signed ? i = n.toTwos(r.width).toHexString() : (i = n.toHexString(), i = F(i, r.width / 8));
                    const o = Hn(n, r.decimals);
                    return new Vn(Un, i, o, r);
                }
                static fromBytes(t, e) {
                    null == e && (e = "fixed");
                    const r = Wn.from(e);
                    if (P(t).length > r.width / 8) throw new Error("overflow");
                    let n = J.from(t);
                    r.signed && (n = n.fromTwos(r.width));
                    const i = n.toTwos((r.signed ? 0 : 1) + r.width).toHexString(), o = Hn(n, r.decimals);
                    return new Vn(Un, i, o, r);
                }
                static from(t, e) {
                    if ("string" == typeof t) return Vn.fromString(t, e);
                    if (M(t)) return Vn.fromBytes(t, e);
                    try {
                        return Vn.fromValue(t, 0, e);
                    } catch (t) {
                        if (t.code !== v.errors.INVALID_ARGUMENT) throw t;
                    }
                    return Fn.throwArgumentError("invalid FixedNumber value", "value", t);
                }
                static isFixedNumber(t) {
                    return !(!t || !t._isFixedNumber);
                }
            }
            const Jn = Vn.from(1), Qn = Vn.from("0.5"), Xn = "Ethereum Signed Message:\n";
            function Yn(t) {
                return "string" == typeof t && (t = Kt(t)), bt(k([ Kt(Xn), Kt(String(t.length)), t ]));
            }
            const Zn = "hash/5.7.0";
            var $n = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const ti = new v(Zn), ei = new Uint8Array(32);
            ei.fill(0);
            const ri = J.from(-1), ni = J.from(0), ii = J.from(1), oi = J.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
            const si = F(ii.toHexString(), 32), ai = F(ni.toHexString(), 32), ui = {
                name: "string",
                version: "string",
                chainId: "uint256",
                verifyingContract: "address",
                salt: "bytes32"
            }, li = [ "name", "version", "chainId", "verifyingContract", "salt" ];
            function ci(t) {
                return function(e) {
                    return "string" != typeof e && ti.throwArgumentError(`invalid domain value for ${JSON.stringify(t)}`, `domain.${t}`, e), 
                    e;
                };
            }
            const hi = {
                name: ci("name"),
                version: ci("version"),
                chainId: function(t) {
                    try {
                        return J.from(t).toString();
                    } catch (t) {}
                    return ti.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", t);
                },
                verifyingContract: function(t) {
                    try {
                        return Ct(t).toLowerCase();
                    } catch (t) {}
                    return ti.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", t);
                },
                salt: function(t) {
                    try {
                        const e = P(t);
                        if (32 !== e.length) throw new Error("bad length");
                        return I(e);
                    } catch (t) {}
                    return ti.throwArgumentError('invalid domain value "salt"', "domain.salt", t);
                }
            };
            function fi(t) {
                {
                    const e = t.match(/^(u?)int(\d*)$/);
                    if (e) {
                        const r = "" === e[1], n = parseInt(e[2] || "256");
                        (n % 8 != 0 || n > 256 || e[2] && e[2] !== String(n)) && ti.throwArgumentError("invalid numeric width", "type", t);
                        const i = oi.mask(r ? n - 1 : n), o = r ? i.add(ii).mul(ri) : ni;
                        return function(e) {
                            const r = J.from(e);
                            return (r.lt(o) || r.gt(i)) && ti.throwArgumentError(`value out-of-bounds for ${t}`, "value", e), 
                            F(r.toTwos(256).toHexString(), 32);
                        };
                    }
                }
                {
                    const e = t.match(/^bytes(\d+)$/);
                    if (e) {
                        const r = parseInt(e[1]);
                        return (0 === r || r > 32 || e[1] !== String(r)) && ti.throwArgumentError("invalid bytes width", "type", t), 
                        function(e) {
                            return P(e).length !== r && ti.throwArgumentError(`invalid length for ${t}`, "value", e), 
                            function(t) {
                                const e = P(t), r = e.length % 32;
                                return r ? C([ e, ei.slice(r) ]) : I(e);
                            }(e);
                        };
                    }
                }
                switch (t) {
                  case "address":
                    return function(t) {
                        return F(Ct(t), 32);
                    };

                  case "bool":
                    return function(t) {
                        return t ? si : ai;
                    };

                  case "bytes":
                    return function(t) {
                        return bt(t);
                    };

                  case "string":
                    return function(t) {
                        return Yt(t);
                    };
                }
                return null;
            }
            function di(t, e) {
                return `${t}(${e.map((({name: t, type: e}) => e + " " + t)).join(",")})`;
            }
            class pi {
                constructor(t) {
                    et(this, "types", Object.freeze(lt(t))), et(this, "_encoderCache", {}), et(this, "_types", {});
                    const e = {}, r = {}, n = {};
                    Object.keys(t).forEach((t => {
                        e[t] = {}, r[t] = [], n[t] = {};
                    }));
                    for (const n in t) {
                        const i = {};
                        t[n].forEach((o => {
                            i[o.name] && ti.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`, "types", t), 
                            i[o.name] = !0;
                            const s = o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                            s === n && ti.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`, "types", t);
                            fi(s) || (r[s] || ti.throwArgumentError(`unknown type ${JSON.stringify(s)}`, "types", t), 
                            r[s].push(n), e[n][s] = !0);
                        }));
                    }
                    const i = Object.keys(r).filter((t => 0 === r[t].length));
                    0 === i.length ? ti.throwArgumentError("missing primary type", "types", t) : i.length > 1 && ti.throwArgumentError(`ambiguous primary types or unused types: ${i.map((t => JSON.stringify(t))).join(", ")}`, "types", t), 
                    et(this, "primaryType", i[0]), function i(o, s) {
                        s[o] && ti.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`, "types", t), 
                        s[o] = !0, Object.keys(e[o]).forEach((t => {
                            r[t] && (i(t, s), Object.keys(s).forEach((e => {
                                n[e][t] = !0;
                            })));
                        })), delete s[o];
                    }(this.primaryType, {});
                    for (const e in n) {
                        const r = Object.keys(n[e]);
                        r.sort(), this._types[e] = di(e, t[e]) + r.map((e => di(e, t[e]))).join("");
                    }
                }
                getEncoder(t) {
                    let e = this._encoderCache[t];
                    return e || (e = this._encoderCache[t] = this._getEncoder(t)), e;
                }
                _getEncoder(t) {
                    {
                        const e = fi(t);
                        if (e) return e;
                    }
                    const e = t.match(/^(.*)(\x5b(\d*)\x5d)$/);
                    if (e) {
                        const t = e[1], r = this.getEncoder(t), n = parseInt(e[3]);
                        return e => {
                            n >= 0 && e.length !== n && ti.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", e);
                            let i = e.map(r);
                            return this._types[t] && (i = i.map(bt)), bt(C(i));
                        };
                    }
                    const r = this.types[t];
                    if (r) {
                        const e = Yt(this._types[t]);
                        return t => {
                            const n = r.map((({name: e, type: r}) => {
                                const n = this.getEncoder(r)(t[e]);
                                return this._types[r] ? bt(n) : n;
                            }));
                            return n.unshift(e), C(n);
                        };
                    }
                    return ti.throwArgumentError(`unknown type: ${t}`, "type", t);
                }
                encodeType(t) {
                    const e = this._types[t];
                    return e || ti.throwArgumentError(`unknown type: ${JSON.stringify(t)}`, "name", t), 
                    e;
                }
                encodeData(t, e) {
                    return this.getEncoder(t)(e);
                }
                hashStruct(t, e) {
                    return bt(this.encodeData(t, e));
                }
                encode(t) {
                    return this.encodeData(this.primaryType, t);
                }
                hash(t) {
                    return this.hashStruct(this.primaryType, t);
                }
                _visit(t, e, r) {
                    if (fi(t)) return r(t, e);
                    const n = t.match(/^(.*)(\x5b(\d*)\x5d)$/);
                    if (n) {
                        const t = n[1], i = parseInt(n[3]);
                        return i >= 0 && e.length !== i && ti.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", e), 
                        e.map((e => this._visit(t, e, r)));
                    }
                    const i = this.types[t];
                    return i ? i.reduce(((t, {name: n, type: i}) => (t[n] = this._visit(i, e[n], r), 
                    t)), {}) : ti.throwArgumentError(`unknown type: ${t}`, "type", t);
                }
                visit(t, e) {
                    return this._visit(this.primaryType, t, e);
                }
                static from(t) {
                    return new pi(t);
                }
                static getPrimaryType(t) {
                    return pi.from(t).primaryType;
                }
                static hashStruct(t, e, r) {
                    return pi.from(e).hashStruct(t, r);
                }
                static hashDomain(t) {
                    const e = [];
                    for (const r in t) {
                        const n = ui[r];
                        n || ti.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`, "domain", t), 
                        e.push({
                            name: r,
                            type: n
                        });
                    }
                    return e.sort(((t, e) => li.indexOf(t.name) - li.indexOf(e.name))), pi.hashStruct("EIP712Domain", {
                        EIP712Domain: e
                    }, t);
                }
                static encode(t, e, r) {
                    return C([ "0x1901", pi.hashDomain(t), pi.from(e).hash(r) ]);
                }
                static hash(t, e, r) {
                    return bt(pi.encode(t, e, r));
                }
                static resolveNames(t, e, r, n) {
                    return $n(this, void 0, void 0, (function*() {
                        t = ot(t);
                        const i = {};
                        t.verifyingContract && !N(t.verifyingContract, 20) && (i[t.verifyingContract] = "0x");
                        const o = pi.from(e);
                        o.visit(r, ((t, e) => ("address" !== t || N(e, 20) || (i[e] = "0x"), e)));
                        for (const t in i) i[t] = yield n(t);
                        return t.verifyingContract && i[t.verifyingContract] && (t.verifyingContract = i[t.verifyingContract]), 
                        r = o.visit(r, ((t, e) => "address" === t && i[e] ? i[e] : e)), {
                            domain: t,
                            value: r
                        };
                    }));
                }
                static getPayload(t, e, r) {
                    pi.hashDomain(t);
                    const n = {}, i = [];
                    li.forEach((e => {
                        const r = t[e];
                        null != r && (n[e] = hi[e](r), i.push({
                            name: e,
                            type: ui[e]
                        }));
                    }));
                    const o = pi.from(e), s = ot(e);
                    return s.EIP712Domain ? ti.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", e) : s.EIP712Domain = i, 
                    o.encode(r), {
                        types: s,
                        domain: n,
                        primaryType: o.primaryType,
                        message: o.visit(r, ((t, e) => {
                            if (t.match(/^bytes(\d*)/)) return I(P(e));
                            if (t.match(/^u?int/)) return J.from(e).toString();
                            switch (t) {
                              case "address":
                                return e.toLowerCase();

                              case "bool":
                                return !!e;

                              case "string":
                                return "string" != typeof e && ti.throwArgumentError("invalid string", "value", e), 
                                e;
                            }
                            return ti.throwArgumentError("unsupported type", "type", t);
                        }))
                    };
                }
            }
            class mi {
                constructor(t) {
                    et(this, "alphabet", t), et(this, "base", t.length), et(this, "_alphabetMap", {}), 
                    et(this, "_leader", t.charAt(0));
                    for (let e = 0; e < t.length; e++) this._alphabetMap[t.charAt(e)] = e;
                }
                encode(t) {
                    let e = P(t);
                    if (0 === e.length) return "";
                    let r = [ 0 ];
                    for (let t = 0; t < e.length; ++t) {
                        let n = e[t];
                        for (let t = 0; t < r.length; ++t) n += r[t] << 8, r[t] = n % this.base, n = n / this.base | 0;
                        for (;n > 0; ) r.push(n % this.base), n = n / this.base | 0;
                    }
                    let n = "";
                    for (let t = 0; 0 === e[t] && t < e.length - 1; ++t) n += this._leader;
                    for (let t = r.length - 1; t >= 0; --t) n += this.alphabet[r[t]];
                    return n;
                }
                decode(t) {
                    if ("string" != typeof t) throw new TypeError("Expected String");
                    let e = [];
                    if (0 === t.length) return new Uint8Array(e);
                    e.push(0);
                    for (let r = 0; r < t.length; r++) {
                        let n = this._alphabetMap[t[r]];
                        if (void 0 === n) throw new Error("Non-base" + this.base + " character");
                        let i = n;
                        for (let t = 0; t < e.length; ++t) i += e[t] * this.base, e[t] = 255 & i, i >>= 8;
                        for (;i > 0; ) e.push(255 & i), i >>= 8;
                    }
                    for (let r = 0; t[r] === this._leader && r < t.length - 1; ++r) e.push(0);
                    return P(new Uint8Array(e.reverse()));
                }
            }
            new mi("abcdefghijklmnopqrstuvwxyz234567");
            const gi = new mi("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
            var yi;
            !function(t) {
                t.sha256 = "sha256", t.sha512 = "sha512";
            }(yi || (yi = {}));
            const vi = new v("sha2/5.7.0");
            function bi(t) {
                return "0x" + dr().ripemd160().update(P(t)).digest("hex");
            }
            function wi(t) {
                return "0x" + dr().sha256().update(P(t)).digest("hex");
            }
            function Ai(t) {
                return "0x" + dr().sha512().update(P(t)).digest("hex");
            }
            function _i(t, e, r) {
                return yi[t] || vi.throwError("unsupported algorithm " + t, v.errors.UNSUPPORTED_OPERATION, {
                    operation: "hmac",
                    algorithm: t
                }), "0x" + dr().hmac(dr()[t], P(e)).update(P(r)).digest("hex");
            }
            function Ei(t, e, r, n, i) {
                let o;
                t = P(t), e = P(e);
                let s = 1;
                const a = new Uint8Array(n), u = new Uint8Array(e.length + 4);
                let l, c;
                u.set(e);
                for (let h = 1; h <= s; h++) {
                    u[e.length] = h >> 24 & 255, u[e.length + 1] = h >> 16 & 255, u[e.length + 2] = h >> 8 & 255, 
                    u[e.length + 3] = 255 & h;
                    let f = P(_i(i, t, u));
                    o || (o = f.length, c = new Uint8Array(o), s = Math.ceil(n / o), l = n - (s - 1) * o), 
                    c.set(f);
                    for (let e = 1; e < r; e++) {
                        f = P(_i(i, t, f));
                        for (let t = 0; t < o; t++) c[t] ^= f[t];
                    }
                    const d = (h - 1) * o, p = h === s ? l : o;
                    a.set(P(c).slice(0, p), d);
                }
                return I(a);
            }
            const Mi = new v("wordlists/5.7.0");
            class Pi {
                constructor(t) {
                    Mi.checkAbstract(new.target, Pi), et(this, "locale", t);
                }
                split(t) {
                    return t.toLowerCase().split(/ +/g);
                }
                join(t) {
                    return t.join(" ");
                }
                static check(t) {
                    const e = [];
                    for (let r = 0; r < 2048; r++) {
                        const n = t.getWord(r);
                        if (r !== t.getWordIndex(n)) return "0x";
                        e.push(n);
                    }
                    return Yt(e.join("\n") + "\n");
                }
                static register(t, e) {
                    e || (e = t.locale);
                }
            }
            let ki = null;
            function Si(t) {
                if (null == ki && (ki = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo".replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "), 
                "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60" !== Pi.check(t))) throw ki = null, 
                new Error("BIP39 Wordlist for en (English) FAILED");
            }
            const Oi = new class extends Pi {
                constructor() {
                    super("en");
                }
                getWord(t) {
                    return Si(this), ki[t];
                }
                getWordIndex(t) {
                    return Si(this), ki.indexOf(t);
                }
            };
            Pi.register(Oi);
            const Ni = {
                en: Oi
            }, xi = new v("hdnode/5.7.0"), Ii = J.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Ti = Kt("Bitcoin seed"), Bi = 2147483648;
            function Ci(t) {
                return (1 << t) - 1 << 8 - t;
            }
            function Ri(t) {
                return F(I(t), 32);
            }
            function ji(t) {
                return gi.encode(k([ t, B(wi(wi(t)), 0, 4) ]));
            }
            function Fi(t) {
                if (null == t) return Ni.en;
                if ("string" == typeof t) {
                    const e = Ni[t];
                    return null == e && xi.throwArgumentError("unknown locale", "wordlist", t), e;
                }
                return t;
            }
            const Ui = {}, Li = "m/44'/60'/0'/0/0";
            class Di {
                constructor(t, e, r, n, i, o, s, a) {
                    if (t !== Ui) throw new Error("HDNode constructor cannot be called directly");
                    if (e) {
                        const t = new $r(e);
                        et(this, "privateKey", t.privateKey), et(this, "publicKey", t.compressedPublicKey);
                    } else et(this, "privateKey", null), et(this, "publicKey", I(r));
                    et(this, "parentFingerprint", n), et(this, "fingerprint", B(bi(wi(this.publicKey)), 0, 4)), 
                    et(this, "address", ln(this.publicKey)), et(this, "chainCode", i), et(this, "index", o), 
                    et(this, "depth", s), null == a ? (et(this, "mnemonic", null), et(this, "path", null)) : "string" == typeof a ? (et(this, "mnemonic", null), 
                    et(this, "path", a)) : (et(this, "mnemonic", a), et(this, "path", a.path));
                }
                get extendedKey() {
                    if (this.depth >= 256) throw new Error("Depth too large!");
                    return ji(k([ null != this.privateKey ? "0x0488ADE4" : "0x0488B21E", I(this.depth), this.parentFingerprint, F(I(this.index), 4), this.chainCode, null != this.privateKey ? k([ "0x00", this.privateKey ]) : this.publicKey ]));
                }
                neuter() {
                    return new Di(Ui, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
                }
                _derive(t) {
                    if (t > 4294967295) throw new Error("invalid index - " + String(t));
                    let e = this.path;
                    e && (e += "/" + (t & ~Bi));
                    const r = new Uint8Array(37);
                    if (t & Bi) {
                        if (!this.privateKey) throw new Error("cannot derive child of neutered node");
                        r.set(P(this.privateKey), 1), e && (e += "'");
                    } else r.set(P(this.publicKey));
                    for (let e = 24; e >= 0; e -= 8) r[33 + (e >> 3)] = t >> 24 - e & 255;
                    const n = P(_i(yi.sha512, this.chainCode, r)), i = n.slice(0, 32), o = n.slice(32);
                    let s = null, a = null;
                    if (this.privateKey) s = Ri(J.from(i).add(this.privateKey).mod(Ii)); else {
                        a = new $r(I(i))._addPoint(this.publicKey);
                    }
                    let u = e;
                    const l = this.mnemonic;
                    return l && (u = Object.freeze({
                        phrase: l.phrase,
                        path: e,
                        locale: l.locale || "en"
                    })), new Di(Ui, s, a, this.fingerprint, Ri(o), t, this.depth + 1, u);
                }
                derivePath(t) {
                    const e = t.split("/");
                    if (0 === e.length || "m" === e[0] && 0 !== this.depth) throw new Error("invalid path - " + t);
                    "m" === e[0] && e.shift();
                    let r = this;
                    for (let t = 0; t < e.length; t++) {
                        const n = e[t];
                        if (n.match(/^[0-9]+'$/)) {
                            const t = parseInt(n.substring(0, n.length - 1));
                            if (t >= Bi) throw new Error("invalid path index - " + n);
                            r = r._derive(Bi + t);
                        } else {
                            if (!n.match(/^[0-9]+$/)) throw new Error("invalid path component - " + n);
                            {
                                const t = parseInt(n);
                                if (t >= Bi) throw new Error("invalid path index - " + n);
                                r = r._derive(t);
                            }
                        }
                    }
                    return r;
                }
                static _fromSeed(t, e) {
                    const r = P(t);
                    if (r.length < 16 || r.length > 64) throw new Error("invalid seed");
                    const n = P(_i(yi.sha512, Ti, r));
                    return new Di(Ui, Ri(n.slice(0, 32)), null, "0x00000000", Ri(n.slice(32)), 0, 0, e);
                }
                static fromMnemonic(t, e, r) {
                    return t = zi(qi(t, r = Fi(r)), r), Di._fromSeed(Gi(t, e), {
                        phrase: t,
                        path: "m",
                        locale: r.locale
                    });
                }
                static fromSeed(t) {
                    return Di._fromSeed(t, null);
                }
                static fromExtendedKey(t) {
                    const e = gi.decode(t);
                    82 === e.length && ji(e.slice(0, 78)) === t || xi.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                    const r = e[4], n = I(e.slice(5, 9)), i = parseInt(I(e.slice(9, 13)).substring(2), 16), o = I(e.slice(13, 45)), s = e.slice(45, 78);
                    switch (I(e.slice(0, 4))) {
                      case "0x0488b21e":
                      case "0x043587cf":
                        return new Di(Ui, null, I(s), n, o, i, r, null);

                      case "0x0488ade4":
                      case "0x04358394 ":
                        if (0 !== s[0]) break;
                        return new Di(Ui, I(s.slice(1)), null, n, o, i, r, null);
                    }
                    return xi.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                }
            }
            function Gi(t, e) {
                e || (e = "");
                const r = Kt("mnemonic" + e, Dt.NFKD);
                return Ei(Kt(t, Dt.NFKD), r, 2048, 64, "sha512");
            }
            function qi(t, e) {
                e = Fi(e), xi.checkNormalize();
                const r = e.split(t);
                if (r.length % 3 != 0) throw new Error("invalid mnemonic");
                const n = P(new Uint8Array(Math.ceil(11 * r.length / 8)));
                let i = 0;
                for (let t = 0; t < r.length; t++) {
                    let o = e.getWordIndex(r[t].normalize("NFKD"));
                    if (-1 === o) throw new Error("invalid mnemonic");
                    for (let t = 0; t < 11; t++) o & 1 << 10 - t && (n[i >> 3] |= 1 << 7 - i % 8), i++;
                }
                const o = 32 * r.length / 3, s = Ci(r.length / 3);
                if ((P(wi(n.slice(0, o / 8)))[0] & s) !== (n[n.length - 1] & s)) throw new Error("invalid checksum");
                return I(n.slice(0, o / 8));
            }
            function zi(t, e) {
                if (e = Fi(e), (t = P(t)).length % 4 != 0 || t.length < 16 || t.length > 32) throw new Error("invalid entropy");
                const r = [ 0 ];
                let n = 11;
                for (let e = 0; e < t.length; e++) n > 8 ? (r[r.length - 1] <<= 8, r[r.length - 1] |= t[e], 
                n -= 8) : (r[r.length - 1] <<= n, r[r.length - 1] |= t[e] >> 8 - n, r.push(t[e] & (1 << 8 - n) - 1), 
                n += 3);
                const i = t.length / 4, o = P(wi(t))[0] & Ci(i);
                return r[r.length - 1] <<= i, r[r.length - 1] |= o >> 8 - i, e.join(r.map((t => e.getWord(t))));
            }
            function Hi(t, e) {
                try {
                    return qi(t, e), !0;
                } catch (t) {}
                return !1;
            }
            function Ki(t) {
                return ("number" != typeof t || t < 0 || t >= Bi || t % 1) && xi.throwArgumentError("invalid account index", "index", t), 
                `m/44'/60'/${t}'/0/0`;
            }
            const Wi = new v("random/5.7.0");
            const Vi = function() {
                if ("undefined" != typeof self) return self;
                if ("undefined" != typeof window) return window;
                if ("undefined" != typeof global) return global;
                throw new Error("unable to locate global object");
            }();
            let Ji = Vi.crypto || Vi.msCrypto;
            function Qi(t) {
                (t <= 0 || t > 1024 || t % 1 || t != t) && Wi.throwArgumentError("invalid length", "length", t);
                const e = new Uint8Array(t);
                return Ji.getRandomValues(e), P(e);
            }
            Ji && Ji.getRandomValues || (Wi.warn("WARNING: Missing strong random number source"), 
            Ji = {
                getRandomValues: function(t) {
                    return Wi.throwError("no secure random source avaialble", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "crypto.getRandomValues"
                    });
                }
            });
            var Xi = r(8826), Yi = r.n(Xi), Zi = r(7635), $i = r.n(Zi);
            function to(t) {
                return "string" == typeof t && "0x" !== t.substring(0, 2) && (t = "0x" + t), P(t);
            }
            function eo(t, e) {
                for (t = String(t); t.length < e; ) t = "0" + t;
                return t;
            }
            function ro(t) {
                return "string" == typeof t ? Kt(t, Dt.NFKC) : P(t);
            }
            function no(t, e) {
                let r = t;
                const n = e.toLowerCase().split("/");
                for (let t = 0; t < n.length; t++) {
                    let e = null;
                    for (const i in r) if (i.toLowerCase() === n[t]) {
                        e = r[i];
                        break;
                    }
                    if (null === e) return null;
                    r = e;
                }
                return r;
            }
            function io(t) {
                const e = P(t);
                e[6] = 15 & e[6] | 64, e[8] = 63 & e[8] | 128;
                const r = I(e);
                return [ r.substring(2, 10), r.substring(10, 14), r.substring(14, 18), r.substring(18, 22), r.substring(22, 34) ].join("-");
            }
            const oo = "json-wallets/5.7.0";
            var so = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const ao = new v(oo);
            function uo(t) {
                return null != t && t.mnemonic && t.mnemonic.phrase;
            }
            class lo extends ct {
                isKeystoreAccount(t) {
                    return !(!t || !t._isKeystoreAccount);
                }
            }
            function co(t, e) {
                const r = to(no(t, "crypto/ciphertext"));
                if (I(bt(k([ e.slice(16, 32), r ]))).substring(2) !== no(t, "crypto/mac").toLowerCase()) throw new Error("invalid password");
                const n = function(t, e, r) {
                    if ("aes-128-ctr" === no(t, "crypto/cipher")) {
                        const n = to(no(t, "crypto/cipherparams/iv")), i = new (Yi().Counter)(n);
                        return P(new (Yi().ModeOfOperation.ctr)(e, i).decrypt(r));
                    }
                    return null;
                }(t, e.slice(0, 16), r);
                n || ao.throwError("unsupported cipher", v.errors.UNSUPPORTED_OPERATION, {
                    operation: "decrypt"
                });
                const i = e.slice(32, 64), o = ln(n);
                if (t.address) {
                    let e = t.address.toLowerCase();
                    if ("0x" !== e.substring(0, 2) && (e = "0x" + e), Ct(e) !== o) throw new Error("address mismatch");
                }
                const s = {
                    _isKeystoreAccount: !0,
                    address: o,
                    privateKey: I(n)
                };
                if ("0.1" === no(t, "x-ethers/version")) {
                    const e = to(no(t, "x-ethers/mnemonicCiphertext")), r = to(no(t, "x-ethers/mnemonicCounter")), n = new (Yi().Counter)(r), o = new (Yi().ModeOfOperation.ctr)(i, n), a = no(t, "x-ethers/path") || Li, u = no(t, "x-ethers/locale") || "en", l = P(o.decrypt(e));
                    try {
                        const t = zi(l, u), e = Di.fromMnemonic(t, null, u).derivePath(a);
                        if (e.privateKey != s.privateKey) throw new Error("mnemonic mismatch");
                        s.mnemonic = e.mnemonic;
                    } catch (t) {
                        if (t.code !== v.errors.INVALID_ARGUMENT || "wordlist" !== t.argument) throw t;
                    }
                }
                return new lo(s);
            }
            function ho(t, e, r, n, i) {
                return P(Ei(t, e, r, n, i));
            }
            function fo(t, e, r, n, i) {
                return Promise.resolve(ho(t, e, r, n, i));
            }
            function po(t, e, r, n, i) {
                const o = ro(e), s = no(t, "crypto/kdf");
                if (s && "string" == typeof s) {
                    const e = function(t, e) {
                        return ao.throwArgumentError("invalid key-derivation function parameters", t, e);
                    };
                    if ("scrypt" === s.toLowerCase()) {
                        const r = to(no(t, "crypto/kdfparams/salt")), a = parseInt(no(t, "crypto/kdfparams/n")), u = parseInt(no(t, "crypto/kdfparams/r")), l = parseInt(no(t, "crypto/kdfparams/p"));
                        a && u && l || e("kdf", s), 0 != (a & a - 1) && e("N", a);
                        const c = parseInt(no(t, "crypto/kdfparams/dklen"));
                        return 32 !== c && e("dklen", c), n(o, r, a, u, l, 64, i);
                    }
                    if ("pbkdf2" === s.toLowerCase()) {
                        const n = to(no(t, "crypto/kdfparams/salt"));
                        let i = null;
                        const s = no(t, "crypto/kdfparams/prf");
                        "hmac-sha256" === s ? i = "sha256" : "hmac-sha512" === s ? i = "sha512" : e("prf", s);
                        const a = parseInt(no(t, "crypto/kdfparams/c")), u = parseInt(no(t, "crypto/kdfparams/dklen"));
                        return 32 !== u && e("dklen", u), r(o, n, a, u, i);
                    }
                }
                return ao.throwArgumentError("unsupported key-derivation function", "kdf", s);
            }
            const mo = new v(oo);
            class go extends ct {
                isCrowdsaleAccount(t) {
                    return !(!t || !t._isCrowdsaleAccount);
                }
            }
            function yo(t, e) {
                const r = JSON.parse(t);
                e = ro(e);
                const n = Ct(no(r, "ethaddr")), i = to(no(r, "encseed"));
                i && i.length % 16 == 0 || mo.throwArgumentError("invalid encseed", "json", t);
                const o = P(Ei(e, e, 2e3, 32, "sha256")).slice(0, 16), s = i.slice(0, 16), a = i.slice(16), u = new (Yi().ModeOfOperation.cbc)(o, s), l = Yi().padding.pkcs7.strip(P(u.decrypt(a)));
                let c = "";
                for (let t = 0; t < l.length; t++) c += String.fromCharCode(l[t]);
                const h = bt(Kt(c));
                return new go({
                    _isCrowdsaleAccount: !0,
                    address: n,
                    privateKey: h
                });
            }
            function vo(t) {
                let e = null;
                try {
                    e = JSON.parse(t);
                } catch (t) {
                    return !1;
                }
                return e.encseed && e.ethaddr;
            }
            function bo(t) {
                let e = null;
                try {
                    e = JSON.parse(t);
                } catch (t) {
                    return !1;
                }
                return !(!e.version || parseInt(e.version) !== e.version || 3 !== parseInt(e.version));
            }
            function wo(t) {
                if (vo(t)) try {
                    return Ct(JSON.parse(t).ethaddr);
                } catch (t) {
                    return null;
                }
                if (bo(t)) try {
                    return Ct(JSON.parse(t).address);
                } catch (t) {
                    return null;
                }
                return null;
            }
            function Ao(t, e, r) {
                if (vo(t)) {
                    r && r(0);
                    const n = yo(t, e);
                    return r && r(1), Promise.resolve(n);
                }
                return bo(t) ? function(t, e, r) {
                    return so(this, void 0, void 0, (function*() {
                        const n = JSON.parse(t);
                        return co(n, yield po(n, e, fo, $i().scrypt, r));
                    }));
                }(t, e, r) : Promise.reject(new Error("invalid JSON wallet"));
            }
            function _o(t, e) {
                if (vo(t)) return yo(t, e);
                if (bo(t)) return function(t, e) {
                    const r = JSON.parse(t);
                    return co(r, po(r, e, ho, $i().syncScrypt));
                }(t, e);
                throw new Error("invalid JSON wallet");
            }
            var Eo = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const Mo = new v("wallet/5.7.0");
            class Po extends cr {
                constructor(t, e) {
                    if (super(), null != (r = t) && N(r.privateKey, 32) && null != r.address) {
                        const e = new $r(t.privateKey);
                        if (et(this, "_signingKey", (() => e)), et(this, "address", ln(this.publicKey)), 
                        this.address !== Ct(t.address) && Mo.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]"), 
                        function(t) {
                            const e = t.mnemonic;
                            return e && e.phrase;
                        }(t)) {
                            const e = t.mnemonic;
                            et(this, "_mnemonic", (() => ({
                                phrase: e.phrase,
                                path: e.path || Li,
                                locale: e.locale || "en"
                            })));
                            const r = this.mnemonic;
                            ln(Di.fromMnemonic(r.phrase, null, r.locale).derivePath(r.path).privateKey) !== this.address && Mo.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                        } else et(this, "_mnemonic", (() => null));
                    } else {
                        if ($r.isSigningKey(t)) "secp256k1" !== t.curve && Mo.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]"), 
                        et(this, "_signingKey", (() => t)); else {
                            "string" == typeof t && t.match(/^[0-9a-f]*$/i) && 64 === t.length && (t = "0x" + t);
                            const e = new $r(t);
                            et(this, "_signingKey", (() => e));
                        }
                        et(this, "_mnemonic", (() => null)), et(this, "address", ln(this.publicKey));
                    }
                    var r;
                    e && !or.isProvider(e) && Mo.throwArgumentError("invalid provider", "provider", e), 
                    et(this, "provider", e || null);
                }
                get mnemonic() {
                    return this._mnemonic();
                }
                get privateKey() {
                    return this._signingKey().privateKey;
                }
                get publicKey() {
                    return this._signingKey().publicKey;
                }
                getAddress() {
                    return Promise.resolve(this.address);
                }
                connect(t) {
                    return new Po(this, t);
                }
                signTransaction(t) {
                    return nt(t).then((e => {
                        null != e.from && (Ct(e.from) !== this.address && Mo.throwArgumentError("transaction from address mismatch", "transaction.from", t.from), 
                        delete e.from);
                        const r = this._signingKey().signDigest(bt(yn(e)));
                        return yn(e, r);
                    }));
                }
                signMessage(t) {
                    return Eo(this, void 0, void 0, (function*() {
                        return L(this._signingKey().signDigest(Yn(t)));
                    }));
                }
                _signTypedData(t, e, r) {
                    return Eo(this, void 0, void 0, (function*() {
                        const n = yield pi.resolveNames(t, e, r, (t => (null == this.provider && Mo.throwError("cannot resolve ENS names without a provider", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "resolveName",
                            value: t
                        }), this.provider.resolveName(t))));
                        return L(this._signingKey().signDigest(pi.hash(n.domain, e, n.value)));
                    }));
                }
                encrypt(t, e, r) {
                    if ("function" != typeof e || r || (r = e, e = {}), r && "function" != typeof r) throw new Error("invalid callback");
                    return e || (e = {}), function(t, e, r, n) {
                        try {
                            if (Ct(t.address) !== ln(t.privateKey)) throw new Error("address/privateKey mismatch");
                            if (uo(t)) {
                                const e = t.mnemonic;
                                if (Di.fromMnemonic(e.phrase, null, e.locale).derivePath(e.path || Li).privateKey != t.privateKey) throw new Error("mnemonic mismatch");
                            }
                        } catch (t) {
                            return Promise.reject(t);
                        }
                        "function" != typeof r || n || (n = r, r = {}), r || (r = {});
                        const i = P(t.privateKey), o = ro(e);
                        let s = null, a = null, u = null;
                        if (uo(t)) {
                            const e = t.mnemonic;
                            s = P(qi(e.phrase, e.locale || "en")), a = e.path || Li, u = e.locale || "en";
                        }
                        let l = r.client;
                        l || (l = "ethers.js");
                        let c = null;
                        c = r.salt ? P(r.salt) : Qi(32);
                        let h = null;
                        if (r.iv) {
                            if (h = P(r.iv), 16 !== h.length) throw new Error("invalid iv");
                        } else h = Qi(16);
                        let f = null;
                        if (r.uuid) {
                            if (f = P(r.uuid), 16 !== f.length) throw new Error("invalid uuid");
                        } else f = Qi(16);
                        let d = 1 << 17, p = 8, m = 1;
                        return r.scrypt && (r.scrypt.N && (d = r.scrypt.N), r.scrypt.r && (p = r.scrypt.r), 
                        r.scrypt.p && (m = r.scrypt.p)), $i().scrypt(o, c, d, p, m, 64, n).then((e => {
                            const r = (e = P(e)).slice(0, 16), n = e.slice(16, 32), o = e.slice(32, 64), g = new (Yi().Counter)(h), y = P(new (Yi().ModeOfOperation.ctr)(r, g).encrypt(i)), v = bt(k([ n, y ])), b = {
                                address: t.address.substring(2).toLowerCase(),
                                id: io(f),
                                version: 3,
                                crypto: {
                                    cipher: "aes-128-ctr",
                                    cipherparams: {
                                        iv: I(h).substring(2)
                                    },
                                    ciphertext: I(y).substring(2),
                                    kdf: "scrypt",
                                    kdfparams: {
                                        salt: I(c).substring(2),
                                        n: d,
                                        dklen: 32,
                                        p: m,
                                        r: p
                                    },
                                    mac: v.substring(2)
                                }
                            };
                            if (s) {
                                const t = Qi(16), e = new (Yi().Counter)(t), r = P(new (Yi().ModeOfOperation.ctr)(o, e).encrypt(s)), n = new Date, i = n.getUTCFullYear() + "-" + eo(n.getUTCMonth() + 1, 2) + "-" + eo(n.getUTCDate(), 2) + "T" + eo(n.getUTCHours(), 2) + "-" + eo(n.getUTCMinutes(), 2) + "-" + eo(n.getUTCSeconds(), 2) + ".0Z";
                                b["x-ethers"] = {
                                    client: l,
                                    gethFilename: "UTC--" + i + "--" + b.address,
                                    mnemonicCounter: I(t).substring(2),
                                    mnemonicCiphertext: I(r).substring(2),
                                    path: a,
                                    locale: u,
                                    version: "0.1"
                                };
                            }
                            return JSON.stringify(b);
                        }));
                    }(this, t, e, r);
                }
                static createRandom(t) {
                    let e = Qi(16);
                    t || (t = {}), t.extraEntropy && (e = P(B(bt(k([ e, t.extraEntropy ])), 0, 16)));
                    const r = zi(e, t.locale);
                    return Po.fromMnemonic(r, t.path, t.locale);
                }
                static fromEncryptedJson(t, e, r) {
                    return Ao(t, e, r).then((t => new Po(t)));
                }
                static fromEncryptedJsonSync(t, e) {
                    return new Po(_o(t, e));
                }
                static fromMnemonic(t, e, r) {
                    return e || (e = Li), new Po(Di.fromMnemonic(t, null, r).derivePath(e));
                }
            }
            function ko(t, e) {
                return cn(Yn(t), e);
            }
            function So(t, e, r, n) {
                return cn(pi.hash(t, e, r), n);
            }
            const Oo = "0x0000000000000000000000000000000000000000", No = "0x0000000000000000000000000000000000000000000000000000000000000000", xo = "Ξ", Io = new v("networks/5.7.1");
            function To(t) {
                const e = function(e, r) {
                    null == r && (r = {});
                    const n = [];
                    if (e.InfuraProvider && "-" !== r.infura) try {
                        n.push(new e.InfuraProvider(t, r.infura));
                    } catch (t) {}
                    if (e.EtherscanProvider && "-" !== r.etherscan) try {
                        n.push(new e.EtherscanProvider(t, r.etherscan));
                    } catch (t) {}
                    if (e.AlchemyProvider && "-" !== r.alchemy) try {
                        n.push(new e.AlchemyProvider(t, r.alchemy));
                    } catch (t) {}
                    if (e.PocketProvider && "-" !== r.pocket) {
                        const i = [ "goerli", "ropsten", "rinkeby", "sepolia" ];
                        try {
                            const o = new e.PocketProvider(t, r.pocket);
                            o.network && -1 === i.indexOf(o.network.name) && n.push(o);
                        } catch (t) {}
                    }
                    if (e.CloudflareProvider && "-" !== r.cloudflare) try {
                        n.push(new e.CloudflareProvider(t));
                    } catch (t) {}
                    if (e.AnkrProvider && "-" !== r.ankr) try {
                        const i = [ "ropsten" ], o = new e.AnkrProvider(t, r.ankr);
                        o.network && -1 === i.indexOf(o.network.name) && n.push(o);
                    } catch (t) {}
                    if (0 === n.length) return null;
                    if (e.FallbackProvider) {
                        let i = 1;
                        return null != r.quorum ? i = r.quorum : "homestead" === t && (i = 2), new e.FallbackProvider(n, i);
                    }
                    return n[0];
                };
                return e.renetwork = function(t) {
                    return To(t);
                }, e;
            }
            function Bo(t, e) {
                const r = function(r, n) {
                    return r.JsonRpcProvider ? new r.JsonRpcProvider(t, e) : null;
                };
                return r.renetwork = function(e) {
                    return Bo(t, e);
                }, r;
            }
            const Co = {
                chainId: 1,
                ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                name: "homestead",
                _defaultProvider: To("homestead")
            }, Ro = {
                chainId: 3,
                ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                name: "ropsten",
                _defaultProvider: To("ropsten")
            }, jo = {
                chainId: 63,
                name: "classicMordor",
                _defaultProvider: Bo("https://www.ethercluster.com/mordor", "classicMordor")
            }, Fo = {
                unspecified: {
                    chainId: 0,
                    name: "unspecified"
                },
                homestead: Co,
                mainnet: Co,
                morden: {
                    chainId: 2,
                    name: "morden"
                },
                ropsten: Ro,
                testnet: Ro,
                rinkeby: {
                    chainId: 4,
                    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                    name: "rinkeby",
                    _defaultProvider: To("rinkeby")
                },
                kovan: {
                    chainId: 42,
                    name: "kovan",
                    _defaultProvider: To("kovan")
                },
                goerli: {
                    chainId: 5,
                    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                    name: "goerli",
                    _defaultProvider: To("goerli")
                },
                kintsugi: {
                    chainId: 1337702,
                    name: "kintsugi"
                },
                sepolia: {
                    chainId: 11155111,
                    name: "sepolia",
                    _defaultProvider: To("sepolia")
                },
                classic: {
                    chainId: 61,
                    name: "classic",
                    _defaultProvider: Bo("https://www.ethercluster.com/etc", "classic")
                },
                classicMorden: {
                    chainId: 62,
                    name: "classicMorden"
                },
                classicMordor: jo,
                classicTestnet: jo,
                classicKotti: {
                    chainId: 6,
                    name: "classicKotti",
                    _defaultProvider: Bo("https://www.ethercluster.com/kotti", "classicKotti")
                },
                xdai: {
                    chainId: 100,
                    name: "xdai"
                },
                matic: {
                    chainId: 137,
                    name: "matic",
                    _defaultProvider: To("matic")
                },
                maticmum: {
                    chainId: 80001,
                    name: "maticmum"
                },
                optimism: {
                    chainId: 10,
                    name: "optimism",
                    _defaultProvider: To("optimism")
                },
                "optimism-kovan": {
                    chainId: 69,
                    name: "optimism-kovan"
                },
                "optimism-goerli": {
                    chainId: 420,
                    name: "optimism-goerli"
                },
                arbitrum: {
                    chainId: 42161,
                    name: "arbitrum"
                },
                "arbitrum-rinkeby": {
                    chainId: 421611,
                    name: "arbitrum-rinkeby"
                },
                "arbitrum-goerli": {
                    chainId: 421613,
                    name: "arbitrum-goerli"
                },
                bnb: {
                    chainId: 56,
                    name: "bnb"
                },
                bnbt: {
                    chainId: 97,
                    name: "bnbt"
                }
            };
            function Uo(t) {
                if (null == t) return null;
                if ("number" == typeof t) {
                    for (const e in Fo) {
                        const r = Fo[e];
                        if (r.chainId === t) return {
                            name: r.name,
                            chainId: r.chainId,
                            ensAddress: r.ensAddress || null,
                            _defaultProvider: r._defaultProvider || null
                        };
                    }
                    return {
                        chainId: t,
                        name: "unknown"
                    };
                }
                if ("string" == typeof t) {
                    const e = Fo[t];
                    return null == e ? null : {
                        name: e.name,
                        chainId: e.chainId,
                        ensAddress: e.ensAddress,
                        _defaultProvider: e._defaultProvider || null
                    };
                }
                const e = Fo[t.name];
                if (!e) return "number" != typeof t.chainId && Io.throwArgumentError("invalid network chainId", "network", t), 
                t;
                0 !== t.chainId && t.chainId !== e.chainId && Io.throwArgumentError("network chainId mismatch", "network", t);
                let r = t._defaultProvider || null;
                var n;
                return null == r && e._defaultProvider && (r = (n = e._defaultProvider) && "function" == typeof n.renetwork ? e._defaultProvider.renetwork(t) : e._defaultProvider), 
                {
                    name: t.name,
                    chainId: e.chainId,
                    ensAddress: t.ensAddress || e.ensAddress || null,
                    _defaultProvider: r
                };
            }
            function Lo(t) {
                t = atob(t);
                const e = [];
                for (let r = 0; r < t.length; r++) e.push(t.charCodeAt(r));
                return P(e);
            }
            function Do(t) {
                t = P(t);
                let e = "";
                for (let r = 0; r < t.length; r++) e += String.fromCharCode(t[r]);
                return btoa(e);
            }
            function Go(t, e) {
                null == e && (e = 1);
                const r = [], n = r.forEach, i = function(t, e) {
                    n.call(t, (function(t) {
                        e > 0 && Array.isArray(t) ? i(t, e - 1) : r.push(t);
                    }));
                };
                return i(t, e), r;
            }
            function qo(t) {
                return function(t) {
                    let e = 0;
                    return () => t[e++];
                }(function(t) {
                    let e = 0;
                    function r() {
                        return t[e++] << 8 | t[e++];
                    }
                    let n = r(), i = 1, o = [ 0, 1 ];
                    for (let t = 1; t < n; t++) o.push(i += r());
                    let s = r(), a = e;
                    e += s;
                    let u = 0, l = 0;
                    function c() {
                        return 0 == u && (l = l << 8 | t[e++], u = 8), l >> --u & 1;
                    }
                    const h = Math.pow(2, 31), f = h >>> 1, d = f >> 1, p = h - 1;
                    let m = 0;
                    for (let t = 0; t < 31; t++) m = m << 1 | c();
                    let g = [], y = 0, v = h;
                    for (;;) {
                        let t = Math.floor(((m - y + 1) * i - 1) / v), e = 0, r = n;
                        for (;r - e > 1; ) {
                            let n = e + r >>> 1;
                            t < o[n] ? r = n : e = n;
                        }
                        if (0 == e) break;
                        g.push(e);
                        let s = y + Math.floor(v * o[e] / i), a = y + Math.floor(v * o[e + 1] / i) - 1;
                        for (;0 == ((s ^ a) & f); ) m = m << 1 & p | c(), s = s << 1 & p, a = a << 1 & p | 1;
                        for (;s & ~a & d; ) m = m & f | m << 1 & p >>> 1 | c(), s = s << 1 ^ f, a = (a ^ f) << 1 | f | 1;
                        y = s, v = 1 + a - s;
                    }
                    let b = n - 4;
                    return g.map((e => {
                        switch (e - b) {
                          case 3:
                            return b + 65792 + (t[a++] << 16 | t[a++] << 8 | t[a++]);

                          case 2:
                            return b + 256 + (t[a++] << 8 | t[a++]);

                          case 1:
                            return b + t[a++];

                          default:
                            return e - 1;
                        }
                    }));
                }(t));
            }
            function zo(t) {
                return 1 & t ? ~t >> 1 : t >> 1;
            }
            function Ho(t, e) {
                let r = Array(t);
                for (let n = 0, i = -1; n < t; n++) r[n] = i += 1 + e();
                return r;
            }
            function Ko(t, e) {
                let r = Array(t);
                for (let n = 0, i = 0; n < t; n++) r[n] = i += zo(e());
                return r;
            }
            function Wo(t, e) {
                let r = Ho(t(), t), n = t(), i = Ho(n, t), o = function(t, e) {
                    let r = Array(t);
                    for (let n = 0; n < t; n++) r[n] = 1 + e();
                    return r;
                }(n, t);
                for (let t = 0; t < n; t++) for (let e = 0; e < o[t]; e++) r.push(i[t] + e);
                return e ? r.map((t => e[t])) : r;
            }
            function Vo(t, e, r) {
                let n = Array(t).fill(void 0).map((() => []));
                for (let i = 0; i < e; i++) Ko(t, r).forEach(((t, e) => n[e].push(t)));
                return n;
            }
            function Jo(t, e) {
                let r = 1 + e(), n = e(), i = function(t) {
                    let e = [];
                    for (;;) {
                        let r = t();
                        if (0 == r) break;
                        e.push(r);
                    }
                    return e;
                }(e);
                return Go(Vo(i.length, 1 + t, e).map(((t, e) => {
                    const o = t[0], s = t.slice(1);
                    return Array(i[e]).fill(void 0).map(((t, e) => {
                        let i = e * n;
                        return [ o + e * r, s.map((t => t + i)) ];
                    }));
                })));
            }
            function Qo(t, e) {
                return Vo(1 + e(), 1 + t, e).map((t => [ t[0], t.slice(1) ]));
            }
            const Xo = qo(Lo("")), Yo = new Set(Wo(Xo)), Zo = new Set(Wo(Xo)), $o = function(t) {
                let e = [];
                for (;;) {
                    let r = t();
                    if (0 == r) break;
                    e.push(Jo(r, t));
                }
                for (;;) {
                    let r = t() - 1;
                    if (r < 0) break;
                    e.push(Qo(r, t));
                }
                return function(t) {
                    const e = {};
                    for (let r = 0; r < t.length; r++) {
                        const n = t[r];
                        e[n[0]] = n[1];
                    }
                    return e;
                }(Go(e));
            }(Xo), ts = function(t) {
                let e = Wo(t).sort(((t, e) => t - e));
                return function r() {
                    let n = [];
                    for (;;) {
                        let i = Wo(t, e);
                        if (0 == i.length) break;
                        n.push({
                            set: new Set(i),
                            node: r()
                        });
                    }
                    n.sort(((t, e) => e.set.size - t.set.size));
                    let i = t(), o = i % 3;
                    i = i / 3 | 0;
                    let s = !!(1 & i);
                    return i >>= 1, {
                        branches: n,
                        valid: o,
                        fe0f: s,
                        save: 1 == i,
                        check: 2 == i
                    };
                }();
            }(Xo), es = 45, rs = 95;
            function ns(t) {
                return Xt(t);
            }
            function is(t) {
                return t.filter((t => 65039 != t));
            }
            function os(t) {
                for (let e of t.split(".")) {
                    let t = ns(e);
                    try {
                        for (let e = t.lastIndexOf(rs) - 1; e >= 0; e--) if (t[e] !== rs) throw new Error("underscore only allowed at start");
                        if (t.length >= 4 && t.every((t => t < 128)) && t[2] === es && t[3] === es) throw new Error("invalid label extension");
                    } catch (t) {
                        throw new Error(`Invalid label "${e}": ${t.message}`);
                    }
                }
                return t;
            }
            function ss(t) {
                return os(function(t, e) {
                    let r = ns(t).reverse(), n = [];
                    for (;r.length; ) {
                        let t = as(r);
                        if (t) {
                            n.push(...e(t));
                            continue;
                        }
                        let i = r.pop();
                        if (Yo.has(i)) {
                            n.push(i);
                            continue;
                        }
                        if (Zo.has(i)) continue;
                        let o = $o[i];
                        if (!o) throw new Error(`Disallowed codepoint: 0x${i.toString(16).toUpperCase()}`);
                        n.push(...o);
                    }
                    return os((i = String.fromCodePoint(...n), i.normalize("NFC")));
                    var i;
                }(t, is));
            }
            function as(t, e) {
                var r;
                let n, i, o = ts, s = [], a = t.length;
                for (e && (e.length = 0); a; ) {
                    let u = t[--a];
                    if (o = null === (r = o.branches.find((t => t.set.has(u)))) || void 0 === r ? void 0 : r.node, 
                    !o) break;
                    if (o.save) i = u; else if (o.check && u === i) break;
                    s.push(u), o.fe0f && (s.push(65039), a > 0 && 65039 == t[a - 1] && a--), o.valid && (n = s.slice(), 
                    2 == o.valid && n.splice(1, 1), e && e.push(...t.slice(a).reverse()), t.length = a);
                }
                return n;
            }
            const us = new v(Zn), ls = new Uint8Array(32);
            function cs(t) {
                if (0 === t.length) throw new Error("invalid ENS name; empty component");
                return t;
            }
            function hs(t) {
                const e = Kt(ss(t)), r = [];
                if (0 === t.length) return r;
                let n = 0;
                for (let t = 0; t < e.length; t++) {
                    46 === e[t] && (r.push(cs(e.slice(n, t))), n = t + 1);
                }
                if (n >= e.length) throw new Error("invalid ENS name; empty component");
                return r.push(cs(e.slice(n))), r;
            }
            function fs(t) {
                try {
                    return 0 !== hs(t).length;
                } catch (t) {}
                return !1;
            }
            function ds(t) {
                "string" != typeof t && us.throwArgumentError("invalid ENS name; not a string", "name", t);
                let e = ls;
                const r = hs(t);
                for (;r.length; ) e = bt(k([ e, bt(r.pop()) ]));
                return I(e);
            }
            function ps(t) {
                return I(k(hs(t).map((t => {
                    if (t.length > 63) throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
                    const e = new Uint8Array(t.length + 1);
                    return e.set(t, 1), e[0] = e.length - 1, e;
                })))) + "00";
            }
            ls.fill(0);
            var ms = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            function gs(t, e) {
                return ms(this, void 0, void 0, (function*() {
                    null == e && (e = {});
                    const r = {
                        method: e.method || "GET",
                        headers: e.headers || {},
                        body: e.body || void 0
                    };
                    if (!0 !== e.skipFetchSetup && (r.mode = "cors", r.cache = "no-cache", r.credentials = "same-origin", 
                    r.redirect = "follow", r.referrer = "client"), null != e.fetchOptions) {
                        const t = e.fetchOptions;
                        t.mode && (r.mode = t.mode), t.cache && (r.cache = t.cache), t.credentials && (r.credentials = t.credentials), 
                        t.redirect && (r.redirect = t.redirect), t.referrer && (r.referrer = t.referrer);
                    }
                    const n = yield fetch(t, r), i = yield n.arrayBuffer(), o = {};
                    return n.headers.forEach ? n.headers.forEach(((t, e) => {
                        o[e.toLowerCase()] = t;
                    })) : n.headers.keys().forEach((t => {
                        o[t.toLowerCase()] = n.headers.get(t);
                    })), {
                        headers: o,
                        statusCode: n.status,
                        statusMessage: n.statusText,
                        body: P(new Uint8Array(i))
                    };
                }));
            }
            var ys = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const vs = new v("web/5.7.1");
            function bs(t) {
                return new Promise((e => {
                    setTimeout(e, t);
                }));
            }
            function ws(t, e) {
                if (null == t) return null;
                if ("string" == typeof t) return t;
                if (_(t)) {
                    if (e && ("text" === e.split("/")[0] || "application/json" === e.split(";")[0].trim())) try {
                        return Qt(t);
                    } catch (t) {}
                    return I(t);
                }
                return t;
            }
            function As(t, e, r) {
                const n = "object" == typeof t && null != t.throttleLimit ? t.throttleLimit : 12;
                vs.assertArgument(n > 0 && n % 1 == 0, "invalid connection throttle limit", "connection.throttleLimit", n);
                const i = "object" == typeof t ? t.throttleCallback : null, o = "object" == typeof t && "number" == typeof t.throttleSlotInterval ? t.throttleSlotInterval : 100;
                vs.assertArgument(o > 0 && o % 1 == 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", o);
                const s = "object" == typeof t && !!t.errorPassThrough, a = {};
                let u = null;
                const l = {
                    method: "GET"
                };
                let c = !1, h = 12e4;
                if ("string" == typeof t) u = t; else if ("object" == typeof t) {
                    if (null != t && null != t.url || vs.throwArgumentError("missing URL", "connection.url", t), 
                    u = t.url, "number" == typeof t.timeout && t.timeout > 0 && (h = t.timeout), t.headers) for (const e in t.headers) a[e.toLowerCase()] = {
                        key: e,
                        value: String(t.headers[e])
                    }, [ "if-none-match", "if-modified-since" ].indexOf(e.toLowerCase()) >= 0 && (c = !0);
                    if (l.allowGzip = !!t.allowGzip, null != t.user && null != t.password) {
                        "https:" !== u.substring(0, 6) && !0 !== t.allowInsecureAuthentication && vs.throwError("basic authentication requires a secure https url", v.errors.INVALID_ARGUMENT, {
                            argument: "url",
                            url: u,
                            user: t.user,
                            password: "[REDACTED]"
                        });
                        const e = t.user + ":" + t.password;
                        a.authorization = {
                            key: "Authorization",
                            value: "Basic " + Do(Kt(e))
                        };
                    }
                    null != t.skipFetchSetup && (l.skipFetchSetup = !!t.skipFetchSetup), null != t.fetchOptions && (l.fetchOptions = ot(t.fetchOptions));
                }
                const f = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i"), d = u ? u.match(f) : null;
                if (d) try {
                    const t = {
                        statusCode: 200,
                        statusMessage: "OK",
                        headers: {
                            "content-type": d[1] || "text/plain"
                        },
                        body: d[2] ? Lo(d[3]) : (p = d[3], Kt(p.replace(/%([0-9a-f][0-9a-f])/gi, ((t, e) => String.fromCharCode(parseInt(e, 16))))))
                    };
                    let e = t.body;
                    return r && (e = r(t.body, t)), Promise.resolve(e);
                } catch (t) {
                    vs.throwError("processing response error", v.errors.SERVER_ERROR, {
                        body: ws(d[1], d[2]),
                        error: t,
                        requestBody: null,
                        requestMethod: "GET",
                        url: u
                    });
                }
                var p;
                e && (l.method = "POST", l.body = e, null == a["content-type"] && (a["content-type"] = {
                    key: "Content-Type",
                    value: "application/octet-stream"
                }), null == a["content-length"] && (a["content-length"] = {
                    key: "Content-Length",
                    value: String(e.length)
                }));
                const m = {};
                Object.keys(a).forEach((t => {
                    const e = a[t];
                    m[e.key] = e.value;
                })), l.headers = m;
                const g = function() {
                    let t = null;
                    return {
                        promise: new Promise((function(e, r) {
                            h && (t = setTimeout((() => {
                                null != t && (t = null, r(vs.makeError("timeout", v.errors.TIMEOUT, {
                                    requestBody: ws(l.body, m["content-type"]),
                                    requestMethod: l.method,
                                    timeout: h,
                                    url: u
                                })));
                            }), h));
                        })),
                        cancel: function() {
                            null != t && (clearTimeout(t), t = null);
                        }
                    };
                }(), y = function() {
                    return ys(this, void 0, void 0, (function*() {
                        for (let t = 0; t < n; t++) {
                            let e = null;
                            try {
                                if (e = yield gs(u, l), t < n) if (301 === e.statusCode || 302 === e.statusCode) {
                                    const t = e.headers.location || "";
                                    if ("GET" === l.method && t.match(/^https:/)) {
                                        u = e.headers.location;
                                        continue;
                                    }
                                } else if (429 === e.statusCode) {
                                    let r = !0;
                                    if (i && (r = yield i(t, u)), r) {
                                        let r = 0;
                                        const n = e.headers["retry-after"];
                                        r = "string" == typeof n && n.match(/^[1-9][0-9]*$/) ? 1e3 * parseInt(n) : o * parseInt(String(Math.random() * Math.pow(2, t))), 
                                        yield bs(r);
                                        continue;
                                    }
                                }
                            } catch (t) {
                                e = t.response, null == e && (g.cancel(), vs.throwError("missing response", v.errors.SERVER_ERROR, {
                                    requestBody: ws(l.body, m["content-type"]),
                                    requestMethod: l.method,
                                    serverError: t,
                                    url: u
                                }));
                            }
                            let a = e.body;
                            if (c && 304 === e.statusCode ? a = null : !s && (e.statusCode < 200 || e.statusCode >= 300) && (g.cancel(), 
                            vs.throwError("bad response", v.errors.SERVER_ERROR, {
                                status: e.statusCode,
                                headers: e.headers,
                                body: ws(a, e.headers ? e.headers["content-type"] : null),
                                requestBody: ws(l.body, m["content-type"]),
                                requestMethod: l.method,
                                url: u
                            })), r) try {
                                const t = yield r(a, e);
                                return g.cancel(), t;
                            } catch (r) {
                                if (r.throttleRetry && t < n) {
                                    let e = !0;
                                    if (i && (e = yield i(t, u)), e) {
                                        const e = o * parseInt(String(Math.random() * Math.pow(2, t)));
                                        yield bs(e);
                                        continue;
                                    }
                                }
                                g.cancel(), vs.throwError("processing response error", v.errors.SERVER_ERROR, {
                                    body: ws(a, e.headers ? e.headers["content-type"] : null),
                                    error: r,
                                    requestBody: ws(l.body, m["content-type"]),
                                    requestMethod: l.method,
                                    url: u
                                });
                            }
                            return g.cancel(), a;
                        }
                        return vs.throwError("failed response", v.errors.SERVER_ERROR, {
                            requestBody: ws(l.body, m["content-type"]),
                            requestMethod: l.method,
                            url: u
                        });
                    }));
                }();
                return Promise.race([ g.promise, y ]);
            }
            function _s(t, e, r) {
                let n = null;
                if (null != e) {
                    n = Kt(e);
                    const r = "string" == typeof t ? {
                        url: t
                    } : ot(t);
                    if (r.headers) {
                        0 !== Object.keys(r.headers).filter((t => "content-type" === t.toLowerCase())).length || (r.headers = ot(r.headers), 
                        r.headers["content-type"] = "application/json");
                    } else r.headers = {
                        "content-type": "application/json"
                    };
                    t = r;
                }
                return As(t, n, ((t, e) => {
                    let n = null;
                    if (null != t) try {
                        n = JSON.parse(Qt(t));
                    } catch (e) {
                        vs.throwError("invalid JSON", v.errors.SERVER_ERROR, {
                            body: t,
                            error: e
                        });
                    }
                    return r && (n = r(n, e)), n;
                }));
            }
            function Es(t, e) {
                return e || (e = {}), null == (e = ot(e)).floor && (e.floor = 0), null == e.ceiling && (e.ceiling = 1e4), 
                null == e.interval && (e.interval = 250), new Promise((function(r, n) {
                    let i = null, o = !1;
                    const s = () => !o && (o = !0, i && clearTimeout(i), !0);
                    e.timeout && (i = setTimeout((() => {
                        s() && n(new Error("timeout"));
                    }), e.timeout));
                    const a = e.retryLimit;
                    let u = 0;
                    !function i() {
                        return t().then((function(t) {
                            if (void 0 !== t) s() && r(t); else if (e.oncePoll) e.oncePoll.once("poll", i); else if (e.onceBlock) e.onceBlock.once("block", i); else if (!o) {
                                if (u++, u > a) return void (s() && n(new Error("retry limit reached")));
                                let t = e.interval * parseInt(String(Math.random() * Math.pow(2, u)));
                                t < e.floor && (t = e.floor), t > e.ceiling && (t = e.ceiling), setTimeout(i, t);
                            }
                            return null;
                        }), (function(t) {
                            s() && n(t);
                        }));
                    }();
                }));
            }
            var Ms = r(2882), Ps = r.n(Ms);
            const ks = "providers/5.7.2", Ss = new v(ks);
            class Os {
                constructor() {
                    this.formats = this.getDefaultFormats();
                }
                getDefaultFormats() {
                    const t = {}, e = this.address.bind(this), r = this.bigNumber.bind(this), n = this.blockTag.bind(this), i = this.data.bind(this), o = this.hash.bind(this), s = this.hex.bind(this), a = this.number.bind(this), u = this.type.bind(this);
                    return t.transaction = {
                        hash: o,
                        type: u,
                        accessList: Os.allowNull(this.accessList.bind(this), null),
                        blockHash: Os.allowNull(o, null),
                        blockNumber: Os.allowNull(a, null),
                        transactionIndex: Os.allowNull(a, null),
                        confirmations: Os.allowNull(a, null),
                        from: e,
                        gasPrice: Os.allowNull(r),
                        maxPriorityFeePerGas: Os.allowNull(r),
                        maxFeePerGas: Os.allowNull(r),
                        gasLimit: r,
                        to: Os.allowNull(e, null),
                        value: r,
                        nonce: a,
                        data: i,
                        r: Os.allowNull(this.uint256),
                        s: Os.allowNull(this.uint256),
                        v: Os.allowNull(a),
                        creates: Os.allowNull(e, null),
                        raw: Os.allowNull(i)
                    }, t.transactionRequest = {
                        from: Os.allowNull(e),
                        nonce: Os.allowNull(a),
                        gasLimit: Os.allowNull(r),
                        gasPrice: Os.allowNull(r),
                        maxPriorityFeePerGas: Os.allowNull(r),
                        maxFeePerGas: Os.allowNull(r),
                        to: Os.allowNull(e),
                        value: Os.allowNull(r),
                        data: Os.allowNull((t => this.data(t, !0))),
                        type: Os.allowNull(a),
                        accessList: Os.allowNull(this.accessList.bind(this), null)
                    }, t.receiptLog = {
                        transactionIndex: a,
                        blockNumber: a,
                        transactionHash: o,
                        address: e,
                        topics: Os.arrayOf(o),
                        data: i,
                        logIndex: a,
                        blockHash: o
                    }, t.receipt = {
                        to: Os.allowNull(this.address, null),
                        from: Os.allowNull(this.address, null),
                        contractAddress: Os.allowNull(e, null),
                        transactionIndex: a,
                        root: Os.allowNull(s),
                        gasUsed: r,
                        logsBloom: Os.allowNull(i),
                        blockHash: o,
                        transactionHash: o,
                        logs: Os.arrayOf(this.receiptLog.bind(this)),
                        blockNumber: a,
                        confirmations: Os.allowNull(a, null),
                        cumulativeGasUsed: r,
                        effectiveGasPrice: Os.allowNull(r),
                        status: Os.allowNull(a),
                        type: u
                    }, t.block = {
                        hash: Os.allowNull(o),
                        parentHash: o,
                        number: a,
                        timestamp: a,
                        nonce: Os.allowNull(s),
                        difficulty: this.difficulty.bind(this),
                        gasLimit: r,
                        gasUsed: r,
                        miner: Os.allowNull(e),
                        extraData: i,
                        transactions: Os.allowNull(Os.arrayOf(o)),
                        baseFeePerGas: Os.allowNull(r)
                    }, t.blockWithTransactions = ot(t.block), t.blockWithTransactions.transactions = Os.allowNull(Os.arrayOf(this.transactionResponse.bind(this))), 
                    t.filter = {
                        fromBlock: Os.allowNull(n, void 0),
                        toBlock: Os.allowNull(n, void 0),
                        blockHash: Os.allowNull(o, void 0),
                        address: Os.allowNull(e, void 0),
                        topics: Os.allowNull(this.topics.bind(this), void 0)
                    }, t.filterLog = {
                        blockNumber: Os.allowNull(a),
                        blockHash: Os.allowNull(o),
                        transactionIndex: a,
                        removed: Os.allowNull(this.boolean.bind(this)),
                        address: e,
                        data: Os.allowFalsish(i, "0x"),
                        topics: Os.arrayOf(o),
                        transactionHash: o,
                        logIndex: a
                    }, t;
                }
                accessList(t) {
                    return dn(t || []);
                }
                number(t) {
                    return "0x" === t ? 0 : J.from(t).toNumber();
                }
                type(t) {
                    return "0x" === t || null == t ? 0 : J.from(t).toNumber();
                }
                bigNumber(t) {
                    return J.from(t);
                }
                boolean(t) {
                    if ("boolean" == typeof t) return t;
                    if ("string" == typeof t) {
                        if ("true" === (t = t.toLowerCase())) return !0;
                        if ("false" === t) return !1;
                    }
                    throw new Error("invalid boolean - " + t);
                }
                hex(t, e) {
                    return "string" == typeof t && (e || "0x" === t.substring(0, 2) || (t = "0x" + t), 
                    N(t)) ? t.toLowerCase() : Ss.throwArgumentError("invalid hash", "value", t);
                }
                data(t, e) {
                    const r = this.hex(t, e);
                    if (r.length % 2 != 0) throw new Error("invalid data; odd-length - " + t);
                    return r;
                }
                address(t) {
                    return Ct(t);
                }
                callAddress(t) {
                    if (!N(t, 32)) return null;
                    const e = Ct(B(t, 12));
                    return e === Oo ? null : e;
                }
                contractAddress(t) {
                    return Ft(t);
                }
                blockTag(t) {
                    if (null == t) return "latest";
                    if ("earliest" === t) return "0x0";
                    switch (t) {
                      case "earliest":
                        return "0x0";

                      case "latest":
                      case "pending":
                      case "safe":
                      case "finalized":
                        return t;
                    }
                    if ("number" == typeof t || N(t)) return R(t);
                    throw new Error("invalid blockTag");
                }
                hash(t, e) {
                    const r = this.hex(t, e);
                    return 32 !== T(r) ? Ss.throwArgumentError("invalid hash", "value", t) : r;
                }
                difficulty(t) {
                    if (null == t) return null;
                    const e = J.from(t);
                    try {
                        return e.toNumber();
                    } catch (t) {}
                    return null;
                }
                uint256(t) {
                    if (!N(t)) throw new Error("invalid uint256");
                    return F(t, 32);
                }
                _block(t, e) {
                    null != t.author && null == t.miner && (t.miner = t.author);
                    const r = null != t._difficulty ? t._difficulty : t.difficulty, n = Os.check(e, t);
                    return n._difficulty = null == r ? null : J.from(r), n;
                }
                block(t) {
                    return this._block(t, this.formats.block);
                }
                blockWithTransactions(t) {
                    return this._block(t, this.formats.blockWithTransactions);
                }
                transactionRequest(t) {
                    return Os.check(this.formats.transactionRequest, t);
                }
                transactionResponse(t) {
                    null != t.gas && null == t.gasLimit && (t.gasLimit = t.gas), t.to && J.from(t.to).isZero() && (t.to = "0x0000000000000000000000000000000000000000"), 
                    null != t.input && null == t.data && (t.data = t.input), null == t.to && null == t.creates && (t.creates = this.contractAddress(t)), 
                    1 !== t.type && 2 !== t.type || null != t.accessList || (t.accessList = []);
                    const e = Os.check(this.formats.transaction, t);
                    if (null != t.chainId) {
                        let r = t.chainId;
                        N(r) && (r = J.from(r).toNumber()), e.chainId = r;
                    } else {
                        let r = t.networkId;
                        null == r && null == e.v && (r = t.chainId), N(r) && (r = J.from(r).toNumber()), 
                        "number" != typeof r && null != e.v && (r = (e.v - 35) / 2, r < 0 && (r = 0), r = parseInt(r)), 
                        "number" != typeof r && (r = 0), e.chainId = r;
                    }
                    return e.blockHash && "x" === e.blockHash.replace(/0/g, "") && (e.blockHash = null), 
                    e;
                }
                transaction(t) {
                    return bn(t);
                }
                receiptLog(t) {
                    return Os.check(this.formats.receiptLog, t);
                }
                receipt(t) {
                    const e = Os.check(this.formats.receipt, t);
                    if (null != e.root) if (e.root.length <= 4) {
                        const t = J.from(e.root).toNumber();
                        0 === t || 1 === t ? (null != e.status && e.status !== t && Ss.throwArgumentError("alt-root-status/status mismatch", "value", {
                            root: e.root,
                            status: e.status
                        }), e.status = t, delete e.root) : Ss.throwArgumentError("invalid alt-root-status", "value.root", e.root);
                    } else 66 !== e.root.length && Ss.throwArgumentError("invalid root hash", "value.root", e.root);
                    return null != e.status && (e.byzantium = !0), e;
                }
                topics(t) {
                    return Array.isArray(t) ? t.map((t => this.topics(t))) : null != t ? this.hash(t, !0) : null;
                }
                filter(t) {
                    return Os.check(this.formats.filter, t);
                }
                filterLog(t) {
                    return Os.check(this.formats.filterLog, t);
                }
                static check(t, e) {
                    const r = {};
                    for (const n in t) try {
                        const i = t[n](e[n]);
                        void 0 !== i && (r[n] = i);
                    } catch (t) {
                        throw t.checkKey = n, t.checkValue = e[n], t;
                    }
                    return r;
                }
                static allowNull(t, e) {
                    return function(r) {
                        return null == r ? e : t(r);
                    };
                }
                static allowFalsish(t, e) {
                    return function(r) {
                        return r ? t(r) : e;
                    };
                }
                static arrayOf(t) {
                    return function(e) {
                        if (!Array.isArray(e)) throw new Error("not an array");
                        const r = [];
                        return e.forEach((function(e) {
                            r.push(t(e));
                        })), r;
                    };
                }
            }
            function Ns(t) {
                return t && "function" == typeof t.isCommunityResource;
            }
            function xs(t) {
                return Ns(t) && t.isCommunityResource();
            }
            let Is = !1;
            function Ts() {
                Is || (Is = !0, console.log("========= NOTICE ========="), console.log("Request-Rate Exceeded  (this message will not be repeated)"), 
                console.log(""), console.log("The default API keys for each service are provided as a highly-throttled,"), 
                console.log("community resource for low-traffic projects and early prototyping."), 
                console.log(""), console.log("While your application will continue to function, we highly recommended"), 
                console.log("signing up for your own API keys to improve performance, increase your"), 
                console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."), 
                console.log(""), console.log("For more details: https://docs.ethers.io/api-keys/"), 
                console.log("=========================="));
            }
            var Bs = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const Cs = new v(ks);
            function Rs(t) {
                return null == t ? "null" : (32 !== T(t) && Cs.throwArgumentError("invalid topic", "topic", t), 
                t.toLowerCase());
            }
            function js(t) {
                for (t = t.slice(); t.length > 0 && null == t[t.length - 1]; ) t.pop();
                return t.map((t => {
                    if (Array.isArray(t)) {
                        const e = {};
                        t.forEach((t => {
                            e[Rs(t)] = !0;
                        }));
                        const r = Object.keys(e);
                        return r.sort(), r.join("|");
                    }
                    return Rs(t);
                })).join("&");
            }
            function Fs(t) {
                if ("string" == typeof t) {
                    if (32 === T(t = t.toLowerCase())) return "tx:" + t;
                    if (-1 === t.indexOf(":")) return t;
                } else {
                    if (Array.isArray(t)) return "filter:*:" + js(t);
                    if (ir.isForkEvent(t)) throw Cs.warn("not implemented"), new Error("not implemented");
                    if (t && "object" == typeof t) return "filter:" + (t.address || "*") + ":" + js(t.topics || []);
                }
                throw new Error("invalid event - " + t);
            }
            function Us() {
                return (new Date).getTime();
            }
            function Ls(t) {
                return new Promise((e => {
                    setTimeout(e, t);
                }));
            }
            const Ds = [ "block", "network", "pending", "poll" ];
            class Gs {
                constructor(t, e, r) {
                    et(this, "tag", t), et(this, "listener", e), et(this, "once", r), this._lastBlockNumber = -2, 
                    this._inflight = !1;
                }
                get event() {
                    switch (this.type) {
                      case "tx":
                        return this.hash;

                      case "filter":
                        return this.filter;
                    }
                    return this.tag;
                }
                get type() {
                    return this.tag.split(":")[0];
                }
                get hash() {
                    const t = this.tag.split(":");
                    return "tx" !== t[0] ? null : t[1];
                }
                get filter() {
                    const t = this.tag.split(":");
                    if ("filter" !== t[0]) return null;
                    const e = t[1], r = "" === (n = t[2]) ? [] : n.split(/&/g).map((t => {
                        if ("" === t) return [];
                        const e = t.split("|").map((t => "null" === t ? null : t));
                        return 1 === e.length ? e[0] : e;
                    }));
                    var n;
                    const i = {};
                    return r.length > 0 && (i.topics = r), e && "*" !== e && (i.address = e), i;
                }
                pollable() {
                    return this.tag.indexOf(":") >= 0 || Ds.indexOf(this.tag) >= 0;
                }
            }
            const qs = {
                0: {
                    symbol: "btc",
                    p2pkh: 0,
                    p2sh: 5,
                    prefix: "bc"
                },
                2: {
                    symbol: "ltc",
                    p2pkh: 48,
                    p2sh: 50,
                    prefix: "ltc"
                },
                3: {
                    symbol: "doge",
                    p2pkh: 30,
                    p2sh: 22
                },
                60: {
                    symbol: "eth",
                    ilk: "eth"
                },
                61: {
                    symbol: "etc",
                    ilk: "eth"
                },
                700: {
                    symbol: "xdai",
                    ilk: "eth"
                }
            };
            function zs(t) {
                return F(J.from(t).toHexString(), 32);
            }
            function Hs(t) {
                return gi.encode(k([ t, B(wi(wi(t)), 0, 4) ]));
            }
            const Ks = new RegExp("^(ipfs)://(.*)$", "i"), Ws = [ new RegExp("^(https)://(.*)$", "i"), new RegExp("^(data):(.*)$", "i"), Ks, new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i") ];
            function Vs(t, e) {
                try {
                    return Qt(Js(t, e));
                } catch (t) {}
                return null;
            }
            function Js(t, e) {
                if ("0x" === t) return null;
                const r = J.from(B(t, e, e + 32)).toNumber(), n = J.from(B(t, r, r + 32)).toNumber();
                return B(t, r + 32, r + 32 + n);
            }
            function Qs(t) {
                return t.match(/^ipfs:\/\/ipfs\//i) ? t = t.substring(12) : t.match(/^ipfs:\/\//i) ? t = t.substring(7) : Cs.throwArgumentError("unsupported IPFS format", "link", t), 
                `https://gateway.ipfs.io/ipfs/${t}`;
            }
            function Xs(t) {
                const e = P(t);
                if (e.length > 32) throw new Error("internal; should not happen");
                const r = new Uint8Array(32);
                return r.set(e, 32 - e.length), r;
            }
            function Ys(t) {
                if (t.length % 32 == 0) return t;
                const e = new Uint8Array(32 * Math.ceil(t.length / 32));
                return e.set(t), e;
            }
            function Zs(t) {
                const e = [];
                let r = 0;
                for (let n = 0; n < t.length; n++) e.push(null), r += 32;
                for (let n = 0; n < t.length; n++) {
                    const i = P(t[n]);
                    e[n] = Xs(r), e.push(Xs(i.length)), e.push(Ys(i)), r += 32 + 32 * Math.ceil(i.length / 32);
                }
                return C(e);
            }
            class $s {
                constructor(t, e, r, n) {
                    et(this, "provider", t), et(this, "name", r), et(this, "address", t.formatter.address(e)), 
                    et(this, "_resolvedAddress", n);
                }
                supportsWildcard() {
                    return this._supportsEip2544 || (this._supportsEip2544 = this.provider.call({
                        to: this.address,
                        data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                    }).then((t => J.from(t).eq(1))).catch((t => {
                        if (t.code === v.errors.CALL_EXCEPTION) return !1;
                        throw this._supportsEip2544 = null, t;
                    }))), this._supportsEip2544;
                }
                _fetch(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        const r = {
                            to: this.address,
                            ccipReadEnabled: !0,
                            data: C([ t, ds(this.name), e || "0x" ])
                        };
                        let n = !1;
                        (yield this.supportsWildcard()) && (n = !0, r.data = C([ "0x9061b923", Zs([ ps(this.name), r.data ]) ]));
                        try {
                            let t = yield this.provider.call(r);
                            return P(t).length % 32 == 4 && Cs.throwError("resolver threw error", v.errors.CALL_EXCEPTION, {
                                transaction: r,
                                data: t
                            }), n && (t = Js(t, 0)), t;
                        } catch (t) {
                            if (t.code === v.errors.CALL_EXCEPTION) return null;
                            throw t;
                        }
                    }));
                }
                _fetchBytes(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        const r = yield this._fetch(t, e);
                        return null != r ? Js(r, 0) : null;
                    }));
                }
                _getAddress(t, e) {
                    const r = qs[String(t)];
                    if (null == r && Cs.throwError(`unsupported coin type: ${t}`, v.errors.UNSUPPORTED_OPERATION, {
                        operation: `getAddress(${t})`
                    }), "eth" === r.ilk) return this.provider.formatter.address(e);
                    const n = P(e);
                    if (null != r.p2pkh) {
                        const t = e.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                        if (t) {
                            const e = parseInt(t[1], 16);
                            if (t[2].length === 2 * e && e >= 1 && e <= 75) return Hs(k([ [ r.p2pkh ], "0x" + t[2] ]));
                        }
                    }
                    if (null != r.p2sh) {
                        const t = e.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                        if (t) {
                            const e = parseInt(t[1], 16);
                            if (t[2].length === 2 * e && e >= 1 && e <= 75) return Hs(k([ [ r.p2sh ], "0x" + t[2] ]));
                        }
                    }
                    if (null != r.prefix) {
                        const t = n[1];
                        let e = n[0];
                        if (0 === e ? 20 !== t && 32 !== t && (e = -1) : e = -1, e >= 0 && n.length === 2 + t && t >= 1 && t <= 75) {
                            const t = Ps().toWords(n.slice(2));
                            return t.unshift(e), Ps().encode(r.prefix, t);
                        }
                    }
                    return null;
                }
                getAddress(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        if (null == t && (t = 60), 60 === t) try {
                            const t = yield this._fetch("0x3b3b57de");
                            return "0x" === t || t === No ? null : this.provider.formatter.callAddress(t);
                        } catch (t) {
                            if (t.code === v.errors.CALL_EXCEPTION) return null;
                            throw t;
                        }
                        const e = yield this._fetchBytes("0xf1cb7e06", zs(t));
                        if (null == e || "0x" === e) return null;
                        const r = this._getAddress(t, e);
                        return null == r && Cs.throwError("invalid or unsupported coin data", v.errors.UNSUPPORTED_OPERATION, {
                            operation: `getAddress(${t})`,
                            coinType: t,
                            data: e
                        }), r;
                    }));
                }
                getAvatar() {
                    return Bs(this, void 0, void 0, (function*() {
                        const t = [ {
                            type: "name",
                            content: this.name
                        } ];
                        try {
                            const e = yield this.getText("avatar");
                            if (null == e) return null;
                            for (let r = 0; r < Ws.length; r++) {
                                const n = e.match(Ws[r]);
                                if (null == n) continue;
                                const i = n[1].toLowerCase();
                                switch (i) {
                                  case "https":
                                    return t.push({
                                        type: "url",
                                        content: e
                                    }), {
                                        linkage: t,
                                        url: e
                                    };

                                  case "data":
                                    return t.push({
                                        type: "data",
                                        content: e
                                    }), {
                                        linkage: t,
                                        url: e
                                    };

                                  case "ipfs":
                                    return t.push({
                                        type: "ipfs",
                                        content: e
                                    }), {
                                        linkage: t,
                                        url: Qs(e)
                                    };

                                  case "erc721":
                                  case "erc1155":
                                    {
                                        const r = "erc721" === i ? "0xc87b56dd" : "0x0e89341c";
                                        t.push({
                                            type: i,
                                            content: e
                                        });
                                        const o = this._resolvedAddress || (yield this.getAddress()), s = (n[2] || "").split("/");
                                        if (2 !== s.length) return null;
                                        const a = yield this.provider.formatter.address(s[0]), u = F(J.from(s[1]).toHexString(), 32);
                                        if ("erc721" === i) {
                                            const e = this.provider.formatter.callAddress(yield this.provider.call({
                                                to: a,
                                                data: C([ "0x6352211e", u ])
                                            }));
                                            if (o !== e) return null;
                                            t.push({
                                                type: "owner",
                                                content: e
                                            });
                                        } else if ("erc1155" === i) {
                                            const e = J.from(yield this.provider.call({
                                                to: a,
                                                data: C([ "0x00fdd58e", F(o, 32), u ])
                                            }));
                                            if (e.isZero()) return null;
                                            t.push({
                                                type: "balance",
                                                content: e.toString()
                                            });
                                        }
                                        const l = {
                                            to: this.provider.formatter.address(s[0]),
                                            data: C([ r, u ])
                                        };
                                        let c = Vs(yield this.provider.call(l), 0);
                                        if (null == c) return null;
                                        t.push({
                                            type: "metadata-url-base",
                                            content: c
                                        }), "erc1155" === i && (c = c.replace("{id}", u.substring(2)), t.push({
                                            type: "metadata-url-expanded",
                                            content: c
                                        })), c.match(/^ipfs:/i) && (c = Qs(c)), t.push({
                                            type: "metadata-url",
                                            content: c
                                        });
                                        const h = yield _s(c);
                                        if (!h) return null;
                                        t.push({
                                            type: "metadata",
                                            content: JSON.stringify(h)
                                        });
                                        let f = h.image;
                                        if ("string" != typeof f) return null;
                                        if (f.match(/^(https:\/\/|data:)/i)) ; else {
                                            if (null == f.match(Ks)) return null;
                                            t.push({
                                                type: "url-ipfs",
                                                content: f
                                            }), f = Qs(f);
                                        }
                                        return t.push({
                                            type: "url",
                                            content: f
                                        }), {
                                            linkage: t,
                                            url: f
                                        };
                                    }
                                }
                            }
                        } catch (t) {}
                        return null;
                    }));
                }
                getContentHash() {
                    return Bs(this, void 0, void 0, (function*() {
                        const t = yield this._fetchBytes("0xbc1c58d1");
                        if (null == t || "0x" === t) return null;
                        const e = t.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                        if (e) {
                            const t = parseInt(e[3], 16);
                            if (e[4].length === 2 * t) return "ipfs://" + gi.encode("0x" + e[1]);
                        }
                        const r = t.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                        if (r) {
                            const t = parseInt(r[3], 16);
                            if (r[4].length === 2 * t) return "ipns://" + gi.encode("0x" + r[1]);
                        }
                        const n = t.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                        if (n && 64 === n[1].length) return "bzz://" + n[1];
                        const i = t.match(/^0x90b2c605([0-9a-f]*)$/);
                        if (i && 68 === i[1].length) {
                            const t = {
                                "=": "",
                                "+": "-",
                                "/": "_"
                            };
                            return "sia://" + Do("0x" + i[1]).replace(/[=+\/]/g, (e => t[e]));
                        }
                        return Cs.throwError("invalid or unsupported content hash data", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "getContentHash()",
                            data: t
                        });
                    }));
                }
                getText(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        let e = Kt(t);
                        e = k([ zs(64), zs(e.length), e ]), e.length % 32 != 0 && (e = k([ e, F("0x", 32 - t.length % 32) ]));
                        const r = yield this._fetchBytes("0x59d1d43c", I(e));
                        return null == r || "0x" === r ? null : Qt(r);
                    }));
                }
            }
            let ta = null, ea = 1;
            class ra extends or {
                constructor(t) {
                    if (super(), this._events = [], this._emitted = {
                        block: -2
                    }, this.disableCcipRead = !1, this.formatter = new.target.getFormatter(), et(this, "anyNetwork", "any" === t), 
                    this.anyNetwork && (t = this.detectNetwork()), t instanceof Promise) this._networkPromise = t, 
                    t.catch((t => {})), this._ready().catch((t => {})); else {
                        const e = rt(new.target, "getNetwork")(t);
                        e ? (et(this, "_network", e), this.emit("network", e, null)) : Cs.throwArgumentError("invalid network", "network", t);
                    }
                    this._maxInternalBlockNumber = -1024, this._lastBlockNumber = -2, this._maxFilterBlockRange = 10, 
                    this._pollingInterval = 4e3, this._fastQueryDate = 0;
                }
                _ready() {
                    return Bs(this, void 0, void 0, (function*() {
                        if (null == this._network) {
                            let t = null;
                            if (this._networkPromise) try {
                                t = yield this._networkPromise;
                            } catch (t) {}
                            null == t && (t = yield this.detectNetwork()), t || Cs.throwError("no network detected", v.errors.UNKNOWN_ERROR, {}), 
                            null == this._network && (this.anyNetwork ? this._network = t : et(this, "_network", t), 
                            this.emit("network", t, null));
                        }
                        return this._network;
                    }));
                }
                get ready() {
                    return Es((() => this._ready().then((t => t), (t => {
                        if (t.code !== v.errors.NETWORK_ERROR || "noNetwork" !== t.event) throw t;
                    }))));
                }
                static getFormatter() {
                    return null == ta && (ta = new Os), ta;
                }
                static getNetwork(t) {
                    return Uo(null == t ? "homestead" : t);
                }
                ccipReadFetch(t, e, r) {
                    return Bs(this, void 0, void 0, (function*() {
                        if (this.disableCcipRead || 0 === r.length) return null;
                        const n = t.to.toLowerCase(), i = e.toLowerCase(), o = [];
                        for (let t = 0; t < r.length; t++) {
                            const e = r[t], s = e.replace("{sender}", n).replace("{data}", i), a = e.indexOf("{data}") >= 0 ? null : JSON.stringify({
                                data: i,
                                sender: n
                            }), u = yield _s({
                                url: s,
                                errorPassThrough: !0
                            }, a, ((t, e) => (t.status = e.statusCode, t)));
                            if (u.data) return u.data;
                            const l = u.message || "unknown error";
                            if (u.status >= 400 && u.status < 500) return Cs.throwError(`response not found during CCIP fetch: ${l}`, v.errors.SERVER_ERROR, {
                                url: e,
                                errorMessage: l
                            });
                            o.push(l);
                        }
                        return Cs.throwError(`error encountered during CCIP fetch: ${o.map((t => JSON.stringify(t))).join(", ")}`, v.errors.SERVER_ERROR, {
                            urls: r,
                            errorMessages: o
                        });
                    }));
                }
                _getInternalBlockNumber(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        if (yield this._ready(), t > 0) for (;this._internalBlockNumber; ) {
                            const e = this._internalBlockNumber;
                            try {
                                const r = yield e;
                                if (Us() - r.respTime <= t) return r.blockNumber;
                                break;
                            } catch (t) {
                                if (this._internalBlockNumber === e) break;
                            }
                        }
                        const e = Us(), r = nt({
                            blockNumber: this.perform("getBlockNumber", {}),
                            networkError: this.getNetwork().then((t => null), (t => t))
                        }).then((({blockNumber: t, networkError: n}) => {
                            if (n) throw this._internalBlockNumber === r && (this._internalBlockNumber = null), 
                            n;
                            const i = Us();
                            return (t = J.from(t).toNumber()) < this._maxInternalBlockNumber && (t = this._maxInternalBlockNumber), 
                            this._maxInternalBlockNumber = t, this._setFastBlockNumber(t), {
                                blockNumber: t,
                                reqTime: e,
                                respTime: i
                            };
                        }));
                        return this._internalBlockNumber = r, r.catch((t => {
                            this._internalBlockNumber === r && (this._internalBlockNumber = null);
                        })), (yield r).blockNumber;
                    }));
                }
                poll() {
                    return Bs(this, void 0, void 0, (function*() {
                        const t = ea++, e = [];
                        let r = null;
                        try {
                            r = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                        } catch (t) {
                            return void this.emit("error", t);
                        }
                        if (this._setFastBlockNumber(r), this.emit("poll", t, r), r !== this._lastBlockNumber) {
                            if (-2 === this._emitted.block && (this._emitted.block = r - 1), Math.abs(this._emitted.block - r) > 1e3) Cs.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`), 
                            this.emit("error", Cs.makeError("network block skew detected", v.errors.NETWORK_ERROR, {
                                blockNumber: r,
                                event: "blockSkew",
                                previousBlockNumber: this._emitted.block
                            })), this.emit("block", r); else for (let t = this._emitted.block + 1; t <= r; t++) this.emit("block", t);
                            this._emitted.block !== r && (this._emitted.block = r, Object.keys(this._emitted).forEach((t => {
                                if ("block" === t) return;
                                const e = this._emitted[t];
                                "pending" !== e && r - e > 12 && delete this._emitted[t];
                            }))), -2 === this._lastBlockNumber && (this._lastBlockNumber = r - 1), this._events.forEach((t => {
                                switch (t.type) {
                                  case "tx":
                                    {
                                        const r = t.hash;
                                        let n = this.getTransactionReceipt(r).then((t => t && null != t.blockNumber ? (this._emitted["t:" + r] = t.blockNumber, 
                                        this.emit(r, t), null) : null)).catch((t => {
                                            this.emit("error", t);
                                        }));
                                        e.push(n);
                                        break;
                                    }

                                  case "filter":
                                    if (!t._inflight) {
                                        t._inflight = !0, -2 === t._lastBlockNumber && (t._lastBlockNumber = r - 1);
                                        const n = t.filter;
                                        n.fromBlock = t._lastBlockNumber + 1, n.toBlock = r;
                                        const i = n.toBlock - this._maxFilterBlockRange;
                                        i > n.fromBlock && (n.fromBlock = i), n.fromBlock < 0 && (n.fromBlock = 0);
                                        const o = this.getLogs(n).then((e => {
                                            t._inflight = !1, 0 !== e.length && e.forEach((e => {
                                                e.blockNumber > t._lastBlockNumber && (t._lastBlockNumber = e.blockNumber), this._emitted["b:" + e.blockHash] = e.blockNumber, 
                                                this._emitted["t:" + e.transactionHash] = e.blockNumber, this.emit(n, e);
                                            }));
                                        })).catch((e => {
                                            this.emit("error", e), t._inflight = !1;
                                        }));
                                        e.push(o);
                                    }
                                }
                            })), this._lastBlockNumber = r, Promise.all(e).then((() => {
                                this.emit("didPoll", t);
                            })).catch((t => {
                                this.emit("error", t);
                            }));
                        } else this.emit("didPoll", t);
                    }));
                }
                resetEventsBlock(t) {
                    this._lastBlockNumber = t - 1, this.polling && this.poll();
                }
                get network() {
                    return this._network;
                }
                detectNetwork() {
                    return Bs(this, void 0, void 0, (function*() {
                        return Cs.throwError("provider does not support network detection", v.errors.UNSUPPORTED_OPERATION, {
                            operation: "provider.detectNetwork"
                        });
                    }));
                }
                getNetwork() {
                    return Bs(this, void 0, void 0, (function*() {
                        const t = yield this._ready(), e = yield this.detectNetwork();
                        if (t.chainId !== e.chainId) {
                            if (this.anyNetwork) return this._network = e, this._lastBlockNumber = -2, this._fastBlockNumber = null, 
                            this._fastBlockNumberPromise = null, this._fastQueryDate = 0, this._emitted.block = -2, 
                            this._maxInternalBlockNumber = -1024, this._internalBlockNumber = null, this.emit("network", e, t), 
                            yield Ls(0), this._network;
                            const r = Cs.makeError("underlying network changed", v.errors.NETWORK_ERROR, {
                                event: "changed",
                                network: t,
                                detectedNetwork: e
                            });
                            throw this.emit("error", r), r;
                        }
                        return t;
                    }));
                }
                get blockNumber() {
                    return this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((t => {
                        this._setFastBlockNumber(t);
                    }), (t => {})), null != this._fastBlockNumber ? this._fastBlockNumber : -1;
                }
                get polling() {
                    return null != this._poller;
                }
                set polling(t) {
                    t && !this._poller ? (this._poller = setInterval((() => {
                        this.poll();
                    }), this.pollingInterval), this._bootstrapPoll || (this._bootstrapPoll = setTimeout((() => {
                        this.poll(), this._bootstrapPoll = setTimeout((() => {
                            this._poller || this.poll(), this._bootstrapPoll = null;
                        }), this.pollingInterval);
                    }), 0))) : !t && this._poller && (clearInterval(this._poller), this._poller = null);
                }
                get pollingInterval() {
                    return this._pollingInterval;
                }
                set pollingInterval(t) {
                    if ("number" != typeof t || t <= 0 || parseInt(String(t)) != t) throw new Error("invalid polling interval");
                    this._pollingInterval = t, this._poller && (clearInterval(this._poller), this._poller = setInterval((() => {
                        this.poll();
                    }), this._pollingInterval));
                }
                _getFastBlockNumber() {
                    const t = Us();
                    return t - this._fastQueryDate > 2 * this._pollingInterval && (this._fastQueryDate = t, 
                    this._fastBlockNumberPromise = this.getBlockNumber().then((t => ((null == this._fastBlockNumber || t > this._fastBlockNumber) && (this._fastBlockNumber = t), 
                    this._fastBlockNumber)))), this._fastBlockNumberPromise;
                }
                _setFastBlockNumber(t) {
                    null != this._fastBlockNumber && t < this._fastBlockNumber || (this._fastQueryDate = Us(), 
                    (null == this._fastBlockNumber || t > this._fastBlockNumber) && (this._fastBlockNumber = t, 
                    this._fastBlockNumberPromise = Promise.resolve(t)));
                }
                waitForTransaction(t, e, r) {
                    return Bs(this, void 0, void 0, (function*() {
                        return this._waitForTransaction(t, null == e ? 1 : e, r || 0, null);
                    }));
                }
                _waitForTransaction(t, e, r, n) {
                    return Bs(this, void 0, void 0, (function*() {
                        const i = yield this.getTransactionReceipt(t);
                        return (i ? i.confirmations : 0) >= e ? i : new Promise(((i, o) => {
                            const s = [];
                            let a = !1;
                            const u = function() {
                                return !!a || (a = !0, s.forEach((t => {
                                    t();
                                })), !1);
                            }, l = t => {
                                t.confirmations < e || u() || i(t);
                            };
                            if (this.on(t, l), s.push((() => {
                                this.removeListener(t, l);
                            })), n) {
                                let r = n.startBlock, i = null;
                                const l = s => Bs(this, void 0, void 0, (function*() {
                                    a || (yield Ls(1e3), this.getTransactionCount(n.from).then((c => Bs(this, void 0, void 0, (function*() {
                                        if (!a) {
                                            if (c <= n.nonce) r = s; else {
                                                {
                                                    const e = yield this.getTransaction(t);
                                                    if (e && null != e.blockNumber) return;
                                                }
                                                for (null == i && (i = r - 3, i < n.startBlock && (i = n.startBlock)); i <= s; ) {
                                                    if (a) return;
                                                    const r = yield this.getBlockWithTransactions(i);
                                                    for (let i = 0; i < r.transactions.length; i++) {
                                                        const s = r.transactions[i];
                                                        if (s.hash === t) return;
                                                        if (s.from === n.from && s.nonce === n.nonce) {
                                                            if (a) return;
                                                            const r = yield this.waitForTransaction(s.hash, e);
                                                            if (u()) return;
                                                            let i = "replaced";
                                                            return s.data === n.data && s.to === n.to && s.value.eq(n.value) ? i = "repriced" : "0x" === s.data && s.from === s.to && s.value.isZero() && (i = "cancelled"), 
                                                            void o(Cs.makeError("transaction was replaced", v.errors.TRANSACTION_REPLACED, {
                                                                cancelled: "replaced" === i || "cancelled" === i,
                                                                reason: i,
                                                                replacement: this._wrapTransaction(s),
                                                                hash: t,
                                                                receipt: r
                                                            }));
                                                        }
                                                    }
                                                    i++;
                                                }
                                            }
                                            a || this.once("block", l);
                                        }
                                    }))), (t => {
                                        a || this.once("block", l);
                                    })));
                                }));
                                if (a) return;
                                this.once("block", l), s.push((() => {
                                    this.removeListener("block", l);
                                }));
                            }
                            if ("number" == typeof r && r > 0) {
                                const t = setTimeout((() => {
                                    u() || o(Cs.makeError("timeout exceeded", v.errors.TIMEOUT, {
                                        timeout: r
                                    }));
                                }), r);
                                t.unref && t.unref(), s.push((() => {
                                    clearTimeout(t);
                                }));
                            }
                        }));
                    }));
                }
                getBlockNumber() {
                    return Bs(this, void 0, void 0, (function*() {
                        return this._getInternalBlockNumber(0);
                    }));
                }
                getGasPrice() {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const t = yield this.perform("getGasPrice", {});
                        try {
                            return J.from(t);
                        } catch (e) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "getGasPrice",
                                result: t,
                                error: e
                            });
                        }
                    }));
                }
                getBalance(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const r = yield nt({
                            address: this._getAddress(t),
                            blockTag: this._getBlockTag(e)
                        }), n = yield this.perform("getBalance", r);
                        try {
                            return J.from(n);
                        } catch (t) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "getBalance",
                                params: r,
                                result: n,
                                error: t
                            });
                        }
                    }));
                }
                getTransactionCount(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const r = yield nt({
                            address: this._getAddress(t),
                            blockTag: this._getBlockTag(e)
                        }), n = yield this.perform("getTransactionCount", r);
                        try {
                            return J.from(n).toNumber();
                        } catch (t) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "getTransactionCount",
                                params: r,
                                result: n,
                                error: t
                            });
                        }
                    }));
                }
                getCode(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const r = yield nt({
                            address: this._getAddress(t),
                            blockTag: this._getBlockTag(e)
                        }), n = yield this.perform("getCode", r);
                        try {
                            return I(n);
                        } catch (t) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "getCode",
                                params: r,
                                result: n,
                                error: t
                            });
                        }
                    }));
                }
                getStorageAt(t, e, r) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const n = yield nt({
                            address: this._getAddress(t),
                            blockTag: this._getBlockTag(r),
                            position: Promise.resolve(e).then((t => R(t)))
                        }), i = yield this.perform("getStorageAt", n);
                        try {
                            return I(i);
                        } catch (t) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "getStorageAt",
                                params: n,
                                result: i,
                                error: t
                            });
                        }
                    }));
                }
                _wrapTransaction(t, e, r) {
                    if (null != e && 32 !== T(e)) throw new Error("invalid response - sendTransaction");
                    const n = t;
                    return null != e && t.hash !== e && Cs.throwError("Transaction hash mismatch from Provider.sendTransaction.", v.errors.UNKNOWN_ERROR, {
                        expectedHash: t.hash,
                        returnedHash: e
                    }), n.wait = (e, n) => Bs(this, void 0, void 0, (function*() {
                        let i;
                        null == e && (e = 1), null == n && (n = 0), 0 !== e && null != r && (i = {
                            data: t.data,
                            from: t.from,
                            nonce: t.nonce,
                            to: t.to,
                            value: t.value,
                            startBlock: r
                        });
                        const o = yield this._waitForTransaction(t.hash, e, n, i);
                        return null == o && 0 === e ? null : (this._emitted["t:" + t.hash] = o.blockNumber, 
                        0 === o.status && Cs.throwError("transaction failed", v.errors.CALL_EXCEPTION, {
                            transactionHash: t.hash,
                            transaction: t,
                            receipt: o
                        }), o);
                    })), n;
                }
                sendTransaction(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const e = yield Promise.resolve(t).then((t => I(t))), r = this.formatter.transaction(t);
                        null == r.confirmations && (r.confirmations = 0);
                        const n = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        try {
                            const t = yield this.perform("sendTransaction", {
                                signedTransaction: e
                            });
                            return this._wrapTransaction(r, t, n);
                        } catch (t) {
                            throw t.transaction = r, t.transactionHash = r.hash, t;
                        }
                    }));
                }
                _getTransactionRequest(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        const e = yield t, r = {};
                        return [ "from", "to" ].forEach((t => {
                            null != e[t] && (r[t] = Promise.resolve(e[t]).then((t => t ? this._getAddress(t) : null)));
                        })), [ "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value" ].forEach((t => {
                            null != e[t] && (r[t] = Promise.resolve(e[t]).then((t => t ? J.from(t) : null)));
                        })), [ "type" ].forEach((t => {
                            null != e[t] && (r[t] = Promise.resolve(e[t]).then((t => null != t ? t : null)));
                        })), e.accessList && (r.accessList = this.formatter.accessList(e.accessList)), [ "data" ].forEach((t => {
                            null != e[t] && (r[t] = Promise.resolve(e[t]).then((t => t ? I(t) : null)));
                        })), this.formatter.transactionRequest(yield nt(r));
                    }));
                }
                _getFilter(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        t = yield t;
                        const e = {};
                        return null != t.address && (e.address = this._getAddress(t.address)), [ "blockHash", "topics" ].forEach((r => {
                            null != t[r] && (e[r] = t[r]);
                        })), [ "fromBlock", "toBlock" ].forEach((r => {
                            null != t[r] && (e[r] = this._getBlockTag(t[r]));
                        })), this.formatter.filter(yield nt(e));
                    }));
                }
                _call(t, e, r) {
                    return Bs(this, void 0, void 0, (function*() {
                        r >= 10 && Cs.throwError("CCIP read exceeded maximum redirections", v.errors.SERVER_ERROR, {
                            redirects: r,
                            transaction: t
                        });
                        const n = t.to, i = yield this.perform("call", {
                            transaction: t,
                            blockTag: e
                        });
                        if (r >= 0 && "latest" === e && null != n && "0x556f1830" === i.substring(0, 10) && T(i) % 32 == 4) try {
                            const o = B(i, 4), s = B(o, 0, 32);
                            J.from(s).eq(n) || Cs.throwError("CCIP Read sender did not match", v.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction: t,
                                data: i
                            });
                            const a = [], u = J.from(B(o, 32, 64)).toNumber(), l = J.from(B(o, u, u + 32)).toNumber(), c = B(o, u + 32);
                            for (let e = 0; e < l; e++) {
                                const r = Vs(c, 32 * e);
                                null == r && Cs.throwError("CCIP Read contained corrupt URL string", v.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction: t,
                                    data: i
                                }), a.push(r);
                            }
                            const h = Js(o, 64);
                            J.from(B(o, 100, 128)).isZero() || Cs.throwError("CCIP Read callback selector included junk", v.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction: t,
                                data: i
                            });
                            const f = B(o, 96, 100), d = Js(o, 128), p = yield this.ccipReadFetch(t, h, a);
                            null == p && Cs.throwError("CCIP Read disabled or provided no URLs", v.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction: t,
                                data: i
                            });
                            const m = {
                                to: n,
                                data: C([ f, Zs([ p, d ]) ])
                            };
                            return this._call(m, e, r + 1);
                        } catch (t) {
                            if (t.code === v.errors.SERVER_ERROR) throw t;
                        }
                        try {
                            return I(i);
                        } catch (r) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "call",
                                params: {
                                    transaction: t,
                                    blockTag: e
                                },
                                result: i,
                                error: r
                            });
                        }
                    }));
                }
                call(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const r = yield nt({
                            transaction: this._getTransactionRequest(t),
                            blockTag: this._getBlockTag(e),
                            ccipReadEnabled: Promise.resolve(t.ccipReadEnabled)
                        });
                        return this._call(r.transaction, r.blockTag, r.ccipReadEnabled ? 0 : -1);
                    }));
                }
                estimateGas(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const e = yield nt({
                            transaction: this._getTransactionRequest(t)
                        }), r = yield this.perform("estimateGas", e);
                        try {
                            return J.from(r);
                        } catch (t) {
                            return Cs.throwError("bad result from backend", v.errors.SERVER_ERROR, {
                                method: "estimateGas",
                                params: e,
                                result: r,
                                error: t
                            });
                        }
                    }));
                }
                _getAddress(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        "string" != typeof (t = yield t) && Cs.throwArgumentError("invalid address or ENS name", "name", t);
                        const e = yield this.resolveName(t);
                        return null == e && Cs.throwError("ENS name not configured", v.errors.UNSUPPORTED_OPERATION, {
                            operation: `resolveName(${JSON.stringify(t)})`
                        }), e;
                    }));
                }
                _getBlock(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork(), t = yield t;
                        let r = -128;
                        const n = {
                            includeTransactions: !!e
                        };
                        if (N(t, 32)) n.blockHash = t; else try {
                            n.blockTag = yield this._getBlockTag(t), N(n.blockTag) && (r = parseInt(n.blockTag.substring(2), 16));
                        } catch (e) {
                            Cs.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", t);
                        }
                        return Es((() => Bs(this, void 0, void 0, (function*() {
                            const t = yield this.perform("getBlock", n);
                            if (null == t) return null != n.blockHash && null == this._emitted["b:" + n.blockHash] || null != n.blockTag && r > this._emitted.block ? null : void 0;
                            if (e) {
                                let e = null;
                                for (let r = 0; r < t.transactions.length; r++) {
                                    const n = t.transactions[r];
                                    if (null == n.blockNumber) n.confirmations = 0; else if (null == n.confirmations) {
                                        null == e && (e = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval));
                                        let t = e - n.blockNumber + 1;
                                        t <= 0 && (t = 1), n.confirmations = t;
                                    }
                                }
                                const r = this.formatter.blockWithTransactions(t);
                                return r.transactions = r.transactions.map((t => this._wrapTransaction(t))), r;
                            }
                            return this.formatter.block(t);
                        }))), {
                            oncePoll: this
                        });
                    }));
                }
                getBlock(t) {
                    return this._getBlock(t, !1);
                }
                getBlockWithTransactions(t) {
                    return this._getBlock(t, !0);
                }
                getTransaction(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork(), t = yield t;
                        const e = {
                            transactionHash: this.formatter.hash(t, !0)
                        };
                        return Es((() => Bs(this, void 0, void 0, (function*() {
                            const r = yield this.perform("getTransaction", e);
                            if (null == r) return null == this._emitted["t:" + t] ? null : void 0;
                            const n = this.formatter.transactionResponse(r);
                            if (null == n.blockNumber) n.confirmations = 0; else if (null == n.confirmations) {
                                let t = (yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval)) - n.blockNumber + 1;
                                t <= 0 && (t = 1), n.confirmations = t;
                            }
                            return this._wrapTransaction(n);
                        }))), {
                            oncePoll: this
                        });
                    }));
                }
                getTransactionReceipt(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork(), t = yield t;
                        const e = {
                            transactionHash: this.formatter.hash(t, !0)
                        };
                        return Es((() => Bs(this, void 0, void 0, (function*() {
                            const r = yield this.perform("getTransactionReceipt", e);
                            if (null == r) return null == this._emitted["t:" + t] ? null : void 0;
                            if (null == r.blockHash) return;
                            const n = this.formatter.receipt(r);
                            if (null == n.blockNumber) n.confirmations = 0; else if (null == n.confirmations) {
                                let t = (yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval)) - n.blockNumber + 1;
                                t <= 0 && (t = 1), n.confirmations = t;
                            }
                            return n;
                        }))), {
                            oncePoll: this
                        });
                    }));
                }
                getLogs(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        yield this.getNetwork();
                        const e = yield nt({
                            filter: this._getFilter(t)
                        }), r = yield this.perform("getLogs", e);
                        return r.forEach((t => {
                            null == t.removed && (t.removed = !1);
                        })), Os.arrayOf(this.formatter.filterLog.bind(this.formatter))(r);
                    }));
                }
                getEtherPrice() {
                    return Bs(this, void 0, void 0, (function*() {
                        return yield this.getNetwork(), this.perform("getEtherPrice", {});
                    }));
                }
                _getBlockTag(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        if ("number" == typeof (t = yield t) && t < 0) {
                            t % 1 && Cs.throwArgumentError("invalid BlockTag", "blockTag", t);
                            let e = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                            return e += t, e < 0 && (e = 0), this.formatter.blockTag(e);
                        }
                        return this.formatter.blockTag(t);
                    }));
                }
                getResolver(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        let e = t;
                        for (;;) {
                            if ("" === e || "." === e) return null;
                            if ("eth" !== t && "eth" === e) return null;
                            const r = yield this._getResolver(e, "getResolver");
                            if (null != r) {
                                const n = new $s(this, r, t);
                                return e === t || (yield n.supportsWildcard()) ? n : null;
                            }
                            e = e.split(".").slice(1).join(".");
                        }
                    }));
                }
                _getResolver(t, e) {
                    return Bs(this, void 0, void 0, (function*() {
                        null == e && (e = "ENS");
                        const r = yield this.getNetwork();
                        r.ensAddress || Cs.throwError("network does not support ENS", v.errors.UNSUPPORTED_OPERATION, {
                            operation: e,
                            network: r.name
                        });
                        try {
                            const e = yield this.call({
                                to: r.ensAddress,
                                data: "0x0178b8bf" + ds(t).substring(2)
                            });
                            return this.formatter.callAddress(e);
                        } catch (t) {}
                        return null;
                    }));
                }
                resolveName(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        t = yield t;
                        try {
                            return Promise.resolve(this.formatter.address(t));
                        } catch (e) {
                            if (N(t)) throw e;
                        }
                        "string" != typeof t && Cs.throwArgumentError("invalid ENS name", "name", t);
                        const e = yield this.getResolver(t);
                        return e ? yield e.getAddress() : null;
                    }));
                }
                lookupAddress(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        t = yield t;
                        const e = (t = this.formatter.address(t)).substring(2).toLowerCase() + ".addr.reverse", r = yield this._getResolver(e, "lookupAddress");
                        if (null == r) return null;
                        const n = Vs(yield this.call({
                            to: r,
                            data: "0x691f3431" + ds(e).substring(2)
                        }), 0);
                        return (yield this.resolveName(n)) != t ? null : n;
                    }));
                }
                getAvatar(t) {
                    return Bs(this, void 0, void 0, (function*() {
                        let e = null;
                        if (N(t)) {
                            const r = this.formatter.address(t).substring(2).toLowerCase() + ".addr.reverse", n = yield this._getResolver(r, "getAvatar");
                            if (!n) return null;
                            e = new $s(this, n, r);
                            try {
                                const t = yield e.getAvatar();
                                if (t) return t.url;
                            } catch (t) {
                                if (t.code !== v.errors.CALL_EXCEPTION) throw t;
                            }
                            try {
                                const t = Vs(yield this.call({
                                    to: n,
                                    data: "0x691f3431" + ds(r).substring(2)
                                }), 0);
                                e = yield this.getResolver(t);
                            } catch (t) {
                                if (t.code !== v.errors.CALL_EXCEPTION) throw t;
                                return null;
                            }
                        } else if (e = yield this.getResolver(t), !e) return null;
                        const r = yield e.getAvatar();
                        return null == r ? null : r.url;
                    }));
                }
                perform(t, e) {
                    return Cs.throwError(t + " not implemented", v.errors.NOT_IMPLEMENTED, {
                        operation: t
                    });
                }
                _startEvent(t) {
                    this.polling = this._events.filter((t => t.pollable())).length > 0;
                }
                _stopEvent(t) {
                    this.polling = this._events.filter((t => t.pollable())).length > 0;
                }
                _addEventListener(t, e, r) {
                    const n = new Gs(Fs(t), e, r);
                    return this._events.push(n), this._startEvent(n), this;
                }
                on(t, e) {
                    return this._addEventListener(t, e, !1);
                }
                once(t, e) {
                    return this._addEventListener(t, e, !0);
                }
                emit(t, ...e) {
                    let r = !1, n = [], i = Fs(t);
                    return this._events = this._events.filter((t => t.tag !== i || (setTimeout((() => {
                        t.listener.apply(this, e);
                    }), 0), r = !0, !t.once || (n.push(t), !1)))), n.forEach((t => {
                        this._stopEvent(t);
                    })), r;
                }
                listenerCount(t) {
                    if (!t) return this._events.length;
                    let e = Fs(t);
                    return this._events.filter((t => t.tag === e)).length;
                }
                listeners(t) {
                    if (null == t) return this._events.map((t => t.listener));
                    let e = Fs(t);
                    return this._events.filter((t => t.tag === e)).map((t => t.listener));
                }
                off(t, e) {
                    if (null == e) return this.removeAllListeners(t);
                    const r = [];
                    let n = !1, i = Fs(t);
                    return this._events = this._events.filter((t => t.tag !== i || t.listener != e || (!!n || (n = !0, 
                    r.push(t), !1)))), r.forEach((t => {
                        this._stopEvent(t);
                    })), this;
                }
                removeAllListeners(t) {
                    let e = [];
                    if (null == t) e = this._events, this._events = []; else {
                        const r = Fs(t);
                        this._events = this._events.filter((t => t.tag !== r || (e.push(t), !1)));
                    }
                    return e.forEach((t => {
                        this._stopEvent(t);
                    })), this;
                }
            }
            var na = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const ia = new v(ks), oa = [ "call", "estimateGas" ];
            function sa(t, e) {
                if (null == t) return null;
                if ("string" == typeof t.message && t.message.match("reverted")) {
                    const r = N(t.data) ? t.data : null;
                    if (!e || r) return {
                        message: t.message,
                        data: r
                    };
                }
                if ("object" == typeof t) {
                    for (const r in t) {
                        const n = sa(t[r], e);
                        if (n) return n;
                    }
                    return null;
                }
                if ("string" == typeof t) try {
                    return sa(JSON.parse(t), e);
                } catch (t) {}
                return null;
            }
            function aa(t, e, r) {
                const n = r.transaction || r.signedTransaction;
                if ("call" === t) {
                    const t = sa(e, !0);
                    if (t) return t.data;
                    ia.throwError("missing revert data in call exception; Transaction reverted without a reason string", v.errors.CALL_EXCEPTION, {
                        data: "0x",
                        transaction: n,
                        error: e
                    });
                }
                if ("estimateGas" === t) {
                    let r = sa(e.body, !1);
                    null == r && (r = sa(e, !1)), r && ia.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                        reason: r.message,
                        method: t,
                        transaction: n,
                        error: e
                    });
                }
                let i = e.message;
                throw e.code === v.errors.SERVER_ERROR && e.error && "string" == typeof e.error.message ? i = e.error.message : "string" == typeof e.body ? i = e.body : "string" == typeof e.responseText && (i = e.responseText), 
                i = (i || "").toLowerCase(), i.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i) && ia.throwError("insufficient funds for intrinsic transaction cost", v.errors.INSUFFICIENT_FUNDS, {
                    error: e,
                    method: t,
                    transaction: n
                }), i.match(/nonce (is )?too low/i) && ia.throwError("nonce has already been used", v.errors.NONCE_EXPIRED, {
                    error: e,
                    method: t,
                    transaction: n
                }), i.match(/replacement transaction underpriced|transaction gas price.*too low/i) && ia.throwError("replacement fee too low", v.errors.REPLACEMENT_UNDERPRICED, {
                    error: e,
                    method: t,
                    transaction: n
                }), i.match(/only replay-protected/i) && ia.throwError("legacy pre-eip-155 transactions not supported", v.errors.UNSUPPORTED_OPERATION, {
                    error: e,
                    method: t,
                    transaction: n
                }), oa.indexOf(t) >= 0 && i.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/) && ia.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                    error: e,
                    method: t,
                    transaction: n
                }), e;
            }
            function ua(t) {
                return new Promise((function(e) {
                    setTimeout(e, t);
                }));
            }
            function la(t) {
                if (t.error) {
                    const e = new Error(t.error.message);
                    throw e.code = t.error.code, e.data = t.error.data, e;
                }
                return t.result;
            }
            function ca(t) {
                return t ? t.toLowerCase() : t;
            }
            const ha = {};
            class fa extends cr {
                constructor(t, e, r) {
                    if (super(), t !== ha) throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
                    et(this, "provider", e), null == r && (r = 0), "string" == typeof r ? (et(this, "_address", this.provider.formatter.address(r)), 
                    et(this, "_index", null)) : "number" == typeof r ? (et(this, "_index", r), et(this, "_address", null)) : ia.throwArgumentError("invalid address or index", "addressOrIndex", r);
                }
                connect(t) {
                    return ia.throwError("cannot alter JSON-RPC Signer connection", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "connect"
                    });
                }
                connectUnchecked() {
                    return new da(ha, this.provider, this._address || this._index);
                }
                getAddress() {
                    return this._address ? Promise.resolve(this._address) : this.provider.send("eth_accounts", []).then((t => (t.length <= this._index && ia.throwError("unknown account #" + this._index, v.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    }), this.provider.formatter.address(t[this._index]))));
                }
                sendUncheckedTransaction(t) {
                    t = ot(t);
                    const e = this.getAddress().then((t => (t && (t = t.toLowerCase()), t)));
                    if (null == t.gasLimit) {
                        const r = ot(t);
                        r.from = e, t.gasLimit = this.provider.estimateGas(r);
                    }
                    return null != t.to && (t.to = Promise.resolve(t.to).then((t => na(this, void 0, void 0, (function*() {
                        if (null == t) return null;
                        const e = yield this.provider.resolveName(t);
                        return null == e && ia.throwArgumentError("provided ENS name resolves to null", "tx.to", t), 
                        e;
                    }))))), nt({
                        tx: nt(t),
                        sender: e
                    }).then((({tx: e, sender: r}) => {
                        null != e.from ? e.from.toLowerCase() !== r && ia.throwArgumentError("from address mismatch", "transaction", t) : e.from = r;
                        const n = this.provider.constructor.hexlifyTransaction(e, {
                            from: !0
                        });
                        return this.provider.send("eth_sendTransaction", [ n ]).then((t => t), (t => ("string" == typeof t.message && t.message.match(/user denied/i) && ia.throwError("user rejected transaction", v.errors.ACTION_REJECTED, {
                            action: "sendTransaction",
                            transaction: e
                        }), aa("sendTransaction", t, n))));
                    }));
                }
                signTransaction(t) {
                    return ia.throwError("signing transactions is unsupported", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "signTransaction"
                    });
                }
                sendTransaction(t) {
                    return na(this, void 0, void 0, (function*() {
                        const e = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval), r = yield this.sendUncheckedTransaction(t);
                        try {
                            return yield Es((() => na(this, void 0, void 0, (function*() {
                                const t = yield this.provider.getTransaction(r);
                                if (null !== t) return this.provider._wrapTransaction(t, r, e);
                            }))), {
                                oncePoll: this.provider
                            });
                        } catch (t) {
                            throw t.transactionHash = r, t;
                        }
                    }));
                }
                signMessage(t) {
                    return na(this, void 0, void 0, (function*() {
                        const e = "string" == typeof t ? Kt(t) : t, r = yield this.getAddress();
                        try {
                            return yield this.provider.send("personal_sign", [ I(e), r.toLowerCase() ]);
                        } catch (e) {
                            throw "string" == typeof e.message && e.message.match(/user denied/i) && ia.throwError("user rejected signing", v.errors.ACTION_REJECTED, {
                                action: "signMessage",
                                from: r,
                                messageData: t
                            }), e;
                        }
                    }));
                }
                _legacySignMessage(t) {
                    return na(this, void 0, void 0, (function*() {
                        const e = "string" == typeof t ? Kt(t) : t, r = yield this.getAddress();
                        try {
                            return yield this.provider.send("eth_sign", [ r.toLowerCase(), I(e) ]);
                        } catch (e) {
                            throw "string" == typeof e.message && e.message.match(/user denied/i) && ia.throwError("user rejected signing", v.errors.ACTION_REJECTED, {
                                action: "_legacySignMessage",
                                from: r,
                                messageData: t
                            }), e;
                        }
                    }));
                }
                _signTypedData(t, e, r) {
                    return na(this, void 0, void 0, (function*() {
                        const n = yield pi.resolveNames(t, e, r, (t => this.provider.resolveName(t))), i = yield this.getAddress();
                        try {
                            return yield this.provider.send("eth_signTypedData_v4", [ i.toLowerCase(), JSON.stringify(pi.getPayload(n.domain, e, n.value)) ]);
                        } catch (t) {
                            throw "string" == typeof t.message && t.message.match(/user denied/i) && ia.throwError("user rejected signing", v.errors.ACTION_REJECTED, {
                                action: "_signTypedData",
                                from: i,
                                messageData: {
                                    domain: n.domain,
                                    types: e,
                                    value: n.value
                                }
                            }), t;
                        }
                    }));
                }
                unlock(t) {
                    return na(this, void 0, void 0, (function*() {
                        const e = this.provider, r = yield this.getAddress();
                        return e.send("personal_unlockAccount", [ r.toLowerCase(), t, null ]);
                    }));
                }
            }
            class da extends fa {
                sendTransaction(t) {
                    return this.sendUncheckedTransaction(t).then((t => ({
                        hash: t,
                        nonce: null,
                        gasLimit: null,
                        gasPrice: null,
                        data: null,
                        value: null,
                        chainId: null,
                        confirmations: 0,
                        from: null,
                        wait: e => this.provider.waitForTransaction(t, e)
                    })));
                }
            }
            const pa = {
                chainId: !0,
                data: !0,
                gasLimit: !0,
                gasPrice: !0,
                nonce: !0,
                to: !0,
                value: !0,
                type: !0,
                accessList: !0,
                maxFeePerGas: !0,
                maxPriorityFeePerGas: !0
            };
            class ma extends ra {
                constructor(t, e) {
                    let r = e;
                    null == r && (r = new Promise(((t, e) => {
                        setTimeout((() => {
                            this.detectNetwork().then((e => {
                                t(e);
                            }), (t => {
                                e(t);
                            }));
                        }), 0);
                    }))), super(r), t || (t = rt(this.constructor, "defaultUrl")()), et(this, "connection", "string" == typeof t ? Object.freeze({
                        url: t
                    }) : Object.freeze(ot(t))), this._nextId = 42;
                }
                get _cache() {
                    return null == this._eventLoopCache && (this._eventLoopCache = {}), this._eventLoopCache;
                }
                static defaultUrl() {
                    return "http://localhost:8545";
                }
                detectNetwork() {
                    return this._cache.detectNetwork || (this._cache.detectNetwork = this._uncachedDetectNetwork(), 
                    setTimeout((() => {
                        this._cache.detectNetwork = null;
                    }), 0)), this._cache.detectNetwork;
                }
                _uncachedDetectNetwork() {
                    return na(this, void 0, void 0, (function*() {
                        yield ua(0);
                        let t = null;
                        try {
                            t = yield this.send("eth_chainId", []);
                        } catch (e) {
                            try {
                                t = yield this.send("net_version", []);
                            } catch (t) {}
                        }
                        if (null != t) {
                            const e = rt(this.constructor, "getNetwork");
                            try {
                                return e(J.from(t).toNumber());
                            } catch (e) {
                                return ia.throwError("could not detect network", v.errors.NETWORK_ERROR, {
                                    chainId: t,
                                    event: "invalidNetwork",
                                    serverError: e
                                });
                            }
                        }
                        return ia.throwError("could not detect network", v.errors.NETWORK_ERROR, {
                            event: "noNetwork"
                        });
                    }));
                }
                getSigner(t) {
                    return new fa(ha, this, t);
                }
                getUncheckedSigner(t) {
                    return this.getSigner(t).connectUnchecked();
                }
                listAccounts() {
                    return this.send("eth_accounts", []).then((t => t.map((t => this.formatter.address(t)))));
                }
                send(t, e) {
                    const r = {
                        method: t,
                        params: e,
                        id: this._nextId++,
                        jsonrpc: "2.0"
                    };
                    this.emit("debug", {
                        action: "request",
                        request: lt(r),
                        provider: this
                    });
                    const n = [ "eth_chainId", "eth_blockNumber" ].indexOf(t) >= 0;
                    if (n && this._cache[t]) return this._cache[t];
                    const i = _s(this.connection, JSON.stringify(r), la).then((t => (this.emit("debug", {
                        action: "response",
                        request: r,
                        response: t,
                        provider: this
                    }), t)), (t => {
                        throw this.emit("debug", {
                            action: "response",
                            error: t,
                            request: r,
                            provider: this
                        }), t;
                    }));
                    return n && (this._cache[t] = i, setTimeout((() => {
                        this._cache[t] = null;
                    }), 0)), i;
                }
                prepareRequest(t, e) {
                    switch (t) {
                      case "getBlockNumber":
                        return [ "eth_blockNumber", [] ];

                      case "getGasPrice":
                        return [ "eth_gasPrice", [] ];

                      case "getBalance":
                        return [ "eth_getBalance", [ ca(e.address), e.blockTag ] ];

                      case "getTransactionCount":
                        return [ "eth_getTransactionCount", [ ca(e.address), e.blockTag ] ];

                      case "getCode":
                        return [ "eth_getCode", [ ca(e.address), e.blockTag ] ];

                      case "getStorageAt":
                        return [ "eth_getStorageAt", [ ca(e.address), F(e.position, 32), e.blockTag ] ];

                      case "sendTransaction":
                        return [ "eth_sendRawTransaction", [ e.signedTransaction ] ];

                      case "getBlock":
                        return e.blockTag ? [ "eth_getBlockByNumber", [ e.blockTag, !!e.includeTransactions ] ] : e.blockHash ? [ "eth_getBlockByHash", [ e.blockHash, !!e.includeTransactions ] ] : null;

                      case "getTransaction":
                        return [ "eth_getTransactionByHash", [ e.transactionHash ] ];

                      case "getTransactionReceipt":
                        return [ "eth_getTransactionReceipt", [ e.transactionHash ] ];

                      case "call":
                        return [ "eth_call", [ rt(this.constructor, "hexlifyTransaction")(e.transaction, {
                            from: !0
                        }), e.blockTag ] ];

                      case "estimateGas":
                        return [ "eth_estimateGas", [ rt(this.constructor, "hexlifyTransaction")(e.transaction, {
                            from: !0
                        }) ] ];

                      case "getLogs":
                        return e.filter && null != e.filter.address && (e.filter.address = ca(e.filter.address)), 
                        [ "eth_getLogs", [ e.filter ] ];
                    }
                    return null;
                }
                perform(t, e) {
                    return na(this, void 0, void 0, (function*() {
                        if ("call" === t || "estimateGas" === t) {
                            const t = e.transaction;
                            if (t && null != t.type && J.from(t.type).isZero() && null == t.maxFeePerGas && null == t.maxPriorityFeePerGas) {
                                const r = yield this.getFeeData();
                                null == r.maxFeePerGas && null == r.maxPriorityFeePerGas && ((e = ot(e)).transaction = ot(t), 
                                delete e.transaction.type);
                            }
                        }
                        const r = this.prepareRequest(t, e);
                        null == r && ia.throwError(t + " not implemented", v.errors.NOT_IMPLEMENTED, {
                            operation: t
                        });
                        try {
                            return yield this.send(r[0], r[1]);
                        } catch (r) {
                            return aa(t, r, e);
                        }
                    }));
                }
                _startEvent(t) {
                    "pending" === t.tag && this._startPending(), super._startEvent(t);
                }
                _startPending() {
                    if (null != this._pendingFilter) return;
                    const t = this, e = this.send("eth_newPendingTransactionFilter", []);
                    this._pendingFilter = e, e.then((function(r) {
                        return function n() {
                            t.send("eth_getFilterChanges", [ r ]).then((function(r) {
                                if (t._pendingFilter != e) return null;
                                let n = Promise.resolve();
                                return r.forEach((function(e) {
                                    t._emitted["t:" + e.toLowerCase()] = "pending", n = n.then((function() {
                                        return t.getTransaction(e).then((function(e) {
                                            return t.emit("pending", e), null;
                                        }));
                                    }));
                                })), n.then((function() {
                                    return ua(1e3);
                                }));
                            })).then((function() {
                                if (t._pendingFilter == e) return setTimeout((function() {
                                    n();
                                }), 0), null;
                                t.send("eth_uninstallFilter", [ r ]);
                            })).catch((t => {}));
                        }(), r;
                    })).catch((t => {}));
                }
                _stopEvent(t) {
                    "pending" === t.tag && 0 === this.listenerCount("pending") && (this._pendingFilter = null), 
                    super._stopEvent(t);
                }
                static hexlifyTransaction(t, e) {
                    const r = ot(pa);
                    if (e) for (const t in e) e[t] && (r[t] = !0);
                    it(t, r);
                    const n = {};
                    return [ "chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value" ].forEach((function(e) {
                        if (null == t[e]) return;
                        const r = R(J.from(t[e]));
                        "gasLimit" === e && (e = "gas"), n[e] = r;
                    })), [ "from", "to", "data" ].forEach((function(e) {
                        null != t[e] && (n[e] = I(t[e]));
                    })), t.accessList && (n.accessList = dn(t.accessList)), n;
                }
            }
            let ga = null;
            try {
                if (ga = WebSocket, null == ga) throw new Error("inject please");
            } catch (t) {
                const e = new v(ks);
                ga = function() {
                    e.throwError("WebSockets not supported in this environment", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "new WebSocket()"
                    });
                };
            }
            var ya = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const va = new v(ks);
            let ba = 1;
            class wa extends ma {
                constructor(t, e) {
                    "any" === e && va.throwError("WebSocketProvider does not support 'any' network yet", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "network:any"
                    }), super("string" == typeof t ? t : "_websocket", e), this._pollingInterval = -1, 
                    this._wsReady = !1, et(this, "_websocket", "string" == typeof t ? new ga(this.connection.url) : t), 
                    et(this, "_requests", {}), et(this, "_subs", {}), et(this, "_subIds", {}), et(this, "_detectNetwork", super.detectNetwork()), 
                    this.websocket.onopen = () => {
                        this._wsReady = !0, Object.keys(this._requests).forEach((t => {
                            this.websocket.send(this._requests[t].payload);
                        }));
                    }, this.websocket.onmessage = t => {
                        const e = t.data, r = JSON.parse(e);
                        if (null != r.id) {
                            const t = String(r.id), n = this._requests[t];
                            if (delete this._requests[t], void 0 !== r.result) n.callback(null, r.result), this.emit("debug", {
                                action: "response",
                                request: JSON.parse(n.payload),
                                response: r.result,
                                provider: this
                            }); else {
                                let t = null;
                                r.error ? (t = new Error(r.error.message || "unknown error"), et(t, "code", r.error.code || null), 
                                et(t, "response", e)) : t = new Error("unknown error"), n.callback(t, void 0), this.emit("debug", {
                                    action: "response",
                                    error: t,
                                    request: JSON.parse(n.payload),
                                    provider: this
                                });
                            }
                        } else if ("eth_subscription" === r.method) {
                            const t = this._subs[r.params.subscription];
                            t && t.processFunc(r.params.result);
                        } else console.warn("this should not happen");
                    };
                    const r = setInterval((() => {
                        this.emit("poll");
                    }), 1e3);
                    r.unref && r.unref();
                }
                get websocket() {
                    return this._websocket;
                }
                detectNetwork() {
                    return this._detectNetwork;
                }
                get pollingInterval() {
                    return 0;
                }
                resetEventsBlock(t) {
                    va.throwError("cannot reset events block on WebSocketProvider", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "resetEventBlock"
                    });
                }
                set pollingInterval(t) {
                    va.throwError("cannot set polling interval on WebSocketProvider", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "setPollingInterval"
                    });
                }
                poll() {
                    return ya(this, void 0, void 0, (function*() {
                        return null;
                    }));
                }
                set polling(t) {
                    t && va.throwError("cannot set polling on WebSocketProvider", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "setPolling"
                    });
                }
                send(t, e) {
                    const r = ba++;
                    return new Promise(((n, i) => {
                        const o = JSON.stringify({
                            method: t,
                            params: e,
                            id: r,
                            jsonrpc: "2.0"
                        });
                        this.emit("debug", {
                            action: "request",
                            request: JSON.parse(o),
                            provider: this
                        }), this._requests[String(r)] = {
                            callback: function(t, e) {
                                return t ? i(t) : n(e);
                            },
                            payload: o
                        }, this._wsReady && this.websocket.send(o);
                    }));
                }
                static defaultUrl() {
                    return "ws://localhost:8546";
                }
                _subscribe(t, e, r) {
                    return ya(this, void 0, void 0, (function*() {
                        let n = this._subIds[t];
                        null == n && (n = Promise.all(e).then((t => this.send("eth_subscribe", t))), this._subIds[t] = n);
                        const i = yield n;
                        this._subs[i] = {
                            tag: t,
                            processFunc: r
                        };
                    }));
                }
                _startEvent(t) {
                    switch (t.type) {
                      case "block":
                        this._subscribe("block", [ "newHeads" ], (t => {
                            const e = J.from(t.number).toNumber();
                            this._emitted.block = e, this.emit("block", e);
                        }));
                        break;

                      case "pending":
                        this._subscribe("pending", [ "newPendingTransactions" ], (t => {
                            this.emit("pending", t);
                        }));
                        break;

                      case "filter":
                        this._subscribe(t.tag, [ "logs", this._getFilter(t.filter) ], (e => {
                            null == e.removed && (e.removed = !1), this.emit(t.filter, this.formatter.filterLog(e));
                        }));
                        break;

                      case "tx":
                        {
                            const e = t => {
                                const e = t.hash;
                                this.getTransactionReceipt(e).then((t => {
                                    t && this.emit(e, t);
                                }));
                            };
                            e(t), this._subscribe("tx", [ "newHeads" ], (t => {
                                this._events.filter((t => "tx" === t.type)).forEach(e);
                            }));
                            break;
                        }

                      case "debug":
                      case "poll":
                      case "willPoll":
                      case "didPoll":
                      case "error":
                        break;

                      default:
                        console.log("unhandled:", t);
                    }
                }
                _stopEvent(t) {
                    let e = t.tag;
                    if ("tx" === t.type) {
                        if (this._events.filter((t => "tx" === t.type)).length) return;
                        e = "tx";
                    } else if (this.listenerCount(t.event)) return;
                    const r = this._subIds[e];
                    r && (delete this._subIds[e], r.then((t => {
                        this._subs[t] && (delete this._subs[t], this.send("eth_unsubscribe", [ t ]));
                    })));
                }
                destroy() {
                    return ya(this, void 0, void 0, (function*() {
                        this.websocket.readyState === ga.CONNECTING && (yield new Promise((t => {
                            this.websocket.onopen = function() {
                                t(!0);
                            }, this.websocket.onerror = function() {
                                t(!1);
                            };
                        }))), this.websocket.close(1e3);
                    }));
                }
            }
            var Aa = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const _a = new v(ks);
            class Ea extends ma {
                detectNetwork() {
                    const t = Object.create(null, {
                        detectNetwork: {
                            get: () => super.detectNetwork
                        }
                    });
                    return Aa(this, void 0, void 0, (function*() {
                        let e = this.network;
                        return null == e && (e = yield t.detectNetwork.call(this), e || _a.throwError("no network detected", v.errors.UNKNOWN_ERROR, {}), 
                        null == this._network && (et(this, "_network", e), this.emit("network", e, null))), 
                        e;
                    }));
                }
            }
            class Ma extends Ea {
                constructor(t, e) {
                    _a.checkAbstract(new.target, Ma), t = rt(new.target, "getNetwork")(t), e = rt(new.target, "getApiKey")(e);
                    super(rt(new.target, "getUrl")(t, e), t), "string" == typeof e ? et(this, "apiKey", e) : null != e && Object.keys(e).forEach((t => {
                        et(this, t, e[t]);
                    }));
                }
                _startPending() {
                    _a.warn("WARNING: API provider does not support pending filters");
                }
                isCommunityResource() {
                    return !1;
                }
                getSigner(t) {
                    return _a.throwError("API provider does not support signing", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "getSigner"
                    });
                }
                listAccounts() {
                    return Promise.resolve([]);
                }
                static getApiKey(t) {
                    return t;
                }
                static getUrl(t, e) {
                    return _a.throwError("not implemented; sub-classes must override getUrl", v.errors.NOT_IMPLEMENTED, {
                        operation: "getUrl"
                    });
                }
            }
            const Pa = new v(ks), ka = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
            class Sa extends wa {
                constructor(t, e) {
                    const r = new Oa(t, e);
                    super(r.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi."), r.network), 
                    et(this, "apiKey", r.apiKey);
                }
                isCommunityResource() {
                    return this.apiKey === ka;
                }
            }
            class Oa extends Ma {
                static getWebSocketProvider(t, e) {
                    return new Sa(t, e);
                }
                static getApiKey(t) {
                    return null == t ? ka : (t && "string" != typeof t && Pa.throwArgumentError("invalid apiKey", "apiKey", t), 
                    t);
                }
                static getUrl(t, e) {
                    let r = null;
                    switch (t.name) {
                      case "homestead":
                        r = "eth-mainnet.alchemyapi.io/v2/";
                        break;

                      case "goerli":
                        r = "eth-goerli.g.alchemy.com/v2/";
                        break;

                      case "matic":
                        r = "polygon-mainnet.g.alchemy.com/v2/";
                        break;

                      case "maticmum":
                        r = "polygon-mumbai.g.alchemy.com/v2/";
                        break;

                      case "arbitrum":
                        r = "arb-mainnet.g.alchemy.com/v2/";
                        break;

                      case "arbitrum-goerli":
                        r = "arb-goerli.g.alchemy.com/v2/";
                        break;

                      case "optimism":
                        r = "opt-mainnet.g.alchemy.com/v2/";
                        break;

                      case "optimism-goerli":
                        r = "opt-goerli.g.alchemy.com/v2/";
                        break;

                      default:
                        Pa.throwArgumentError("unsupported network", "network", arguments[0]);
                    }
                    return {
                        allowGzip: !0,
                        url: "https://" + r + e,
                        throttleCallback: (t, r) => (e === ka && Ts(), Promise.resolve(!0))
                    };
                }
                isCommunityResource() {
                    return this.apiKey === ka;
                }
            }
            const Na = new v(ks), xa = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
            function Ia(t) {
                switch (t) {
                  case "homestead":
                    return "rpc.ankr.com/eth/";

                  case "ropsten":
                    return "rpc.ankr.com/eth_ropsten/";

                  case "rinkeby":
                    return "rpc.ankr.com/eth_rinkeby/";

                  case "goerli":
                    return "rpc.ankr.com/eth_goerli/";

                  case "matic":
                    return "rpc.ankr.com/polygon/";

                  case "arbitrum":
                    return "rpc.ankr.com/arbitrum/";
                }
                return Na.throwArgumentError("unsupported network", "name", t);
            }
            class Ta extends Ma {
                isCommunityResource() {
                    return this.apiKey === xa;
                }
                static getApiKey(t) {
                    return null == t ? xa : t;
                }
                static getUrl(t, e) {
                    null == e && (e = xa);
                    const r = {
                        allowGzip: !0,
                        url: "https://" + Ia(t.name) + e,
                        throttleCallback: (t, r) => (e.apiKey === xa && Ts(), Promise.resolve(!0))
                    };
                    return null != e.projectSecret && (r.user = "", r.password = e.projectSecret), r;
                }
            }
            var Ba = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const Ca = new v(ks);
            class Ra extends Ma {
                static getApiKey(t) {
                    return null != t && Ca.throwArgumentError("apiKey not supported for cloudflare", "apiKey", t), 
                    null;
                }
                static getUrl(t, e) {
                    let r = null;
                    if ("homestead" === t.name) r = "https://cloudflare-eth.com/"; else Ca.throwArgumentError("unsupported network", "network", arguments[0]);
                    return r;
                }
                perform(t, e) {
                    const r = Object.create(null, {
                        perform: {
                            get: () => super.perform
                        }
                    });
                    return Ba(this, void 0, void 0, (function*() {
                        if ("getBlockNumber" === t) {
                            return (yield r.perform.call(this, "getBlock", {
                                blockTag: "latest"
                            })).number;
                        }
                        return r.perform.call(this, t, e);
                    }));
                }
            }
            var ja = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const Fa = new v(ks);
            function Ua(t) {
                const e = {};
                for (let r in t) {
                    if (null == t[r]) continue;
                    let n = t[r];
                    "type" === r && 0 === n || (n = {
                        type: !0,
                        gasLimit: !0,
                        gasPrice: !0,
                        maxFeePerGs: !0,
                        maxPriorityFeePerGas: !0,
                        nonce: !0,
                        value: !0
                    }[r] ? R(I(n)) : "accessList" === r ? "[" + dn(n).map((t => `{address:"${t.address}",storageKeys:["${t.storageKeys.join('","')}"]}`)).join(",") + "]" : I(n), 
                    e[r] = n);
                }
                return e;
            }
            function La(t) {
                if (0 == t.status && ("No records found" === t.message || "No transactions found" === t.message)) return t.result;
                if (1 != t.status || "string" != typeof t.message || !t.message.match(/^OK/)) {
                    const e = new Error("invalid response");
                    throw e.result = JSON.stringify(t), (t.result || "").toLowerCase().indexOf("rate limit") >= 0 && (e.throttleRetry = !0), 
                    e;
                }
                return t.result;
            }
            function Da(t) {
                if (t && 0 == t.status && "NOTOK" == t.message && (t.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                    const e = new Error("throttled response");
                    throw e.result = JSON.stringify(t), e.throttleRetry = !0, e;
                }
                if ("2.0" != t.jsonrpc) {
                    const e = new Error("invalid response");
                    throw e.result = JSON.stringify(t), e;
                }
                if (t.error) {
                    const e = new Error(t.error.message || "unknown error");
                    throw t.error.code && (e.code = t.error.code), t.error.data && (e.data = t.error.data), 
                    e;
                }
                return t.result;
            }
            function Ga(t) {
                if ("pending" === t) throw new Error("pending not supported");
                return "latest" === t ? t : parseInt(t.substring(2), 16);
            }
            function qa(t, e, r) {
                if ("call" === t && e.code === v.errors.SERVER_ERROR) {
                    const t = e.error;
                    if (t && (t.message.match(/reverted/i) || t.message.match(/VM execution error/i))) {
                        let r = t.data;
                        if (r && (r = "0x" + r.replace(/^.*0x/i, "")), N(r)) return r;
                        Fa.throwError("missing revert data in call exception", v.errors.CALL_EXCEPTION, {
                            error: e,
                            data: "0x"
                        });
                    }
                }
                let n = e.message;
                throw e.code === v.errors.SERVER_ERROR && (e.error && "string" == typeof e.error.message ? n = e.error.message : "string" == typeof e.body ? n = e.body : "string" == typeof e.responseText && (n = e.responseText)), 
                n = (n || "").toLowerCase(), n.match(/insufficient funds/) && Fa.throwError("insufficient funds for intrinsic transaction cost", v.errors.INSUFFICIENT_FUNDS, {
                    error: e,
                    method: t,
                    transaction: r
                }), n.match(/same hash was already imported|transaction nonce is too low|nonce too low/) && Fa.throwError("nonce has already been used", v.errors.NONCE_EXPIRED, {
                    error: e,
                    method: t,
                    transaction: r
                }), n.match(/another transaction with same nonce/) && Fa.throwError("replacement fee too low", v.errors.REPLACEMENT_UNDERPRICED, {
                    error: e,
                    method: t,
                    transaction: r
                }), n.match(/execution failed due to an exception|execution reverted/) && Fa.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", v.errors.UNPREDICTABLE_GAS_LIMIT, {
                    error: e,
                    method: t,
                    transaction: r
                }), e;
            }
            class za extends ra {
                constructor(t, e) {
                    super(t), et(this, "baseUrl", this.getBaseUrl()), et(this, "apiKey", e || null);
                }
                getBaseUrl() {
                    switch (this.network ? this.network.name : "invalid") {
                      case "homestead":
                        return "https://api.etherscan.io";

                      case "goerli":
                        return "https://api-goerli.etherscan.io";

                      case "sepolia":
                        return "https://api-sepolia.etherscan.io";

                      case "matic":
                        return "https://api.polygonscan.com";

                      case "maticmum":
                        return "https://api-testnet.polygonscan.com";

                      case "arbitrum":
                        return "https://api.arbiscan.io";

                      case "arbitrum-goerli":
                        return "https://api-goerli.arbiscan.io";

                      case "optimism":
                        return "https://api-optimistic.etherscan.io";

                      case "optimism-goerli":
                        return "https://api-goerli-optimistic.etherscan.io";
                    }
                    return Fa.throwArgumentError("unsupported network", "network", this.network.name);
                }
                getUrl(t, e) {
                    const r = Object.keys(e).reduce(((t, r) => {
                        const n = e[r];
                        return null != n && (t += `&${r}=${n}`), t;
                    }), ""), n = this.apiKey ? `&apikey=${this.apiKey}` : "";
                    return `${this.baseUrl}/api?module=${t}${r}${n}`;
                }
                getPostUrl() {
                    return `${this.baseUrl}/api`;
                }
                getPostData(t, e) {
                    return e.module = t, e.apikey = this.apiKey, e;
                }
                fetch(t, e, r) {
                    return ja(this, void 0, void 0, (function*() {
                        const n = r ? this.getPostUrl() : this.getUrl(t, e), i = r ? this.getPostData(t, e) : null, o = "proxy" === t ? Da : La;
                        this.emit("debug", {
                            action: "request",
                            request: n,
                            provider: this
                        });
                        const s = {
                            url: n,
                            throttleSlotInterval: 1e3,
                            throttleCallback: (t, e) => (this.isCommunityResource() && Ts(), Promise.resolve(!0))
                        };
                        let a = null;
                        i && (s.headers = {
                            "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                        }, a = Object.keys(i).map((t => `${t}=${i[t]}`)).join("&"));
                        const u = yield _s(s, a, o || Da);
                        return this.emit("debug", {
                            action: "response",
                            request: n,
                            response: lt(u),
                            provider: this
                        }), u;
                    }));
                }
                detectNetwork() {
                    return ja(this, void 0, void 0, (function*() {
                        return this.network;
                    }));
                }
                perform(t, e) {
                    const r = Object.create(null, {
                        perform: {
                            get: () => super.perform
                        }
                    });
                    return ja(this, void 0, void 0, (function*() {
                        switch (t) {
                          case "getBlockNumber":
                            return this.fetch("proxy", {
                                action: "eth_blockNumber"
                            });

                          case "getGasPrice":
                            return this.fetch("proxy", {
                                action: "eth_gasPrice"
                            });

                          case "getBalance":
                            return this.fetch("account", {
                                action: "balance",
                                address: e.address,
                                tag: e.blockTag
                            });

                          case "getTransactionCount":
                            return this.fetch("proxy", {
                                action: "eth_getTransactionCount",
                                address: e.address,
                                tag: e.blockTag
                            });

                          case "getCode":
                            return this.fetch("proxy", {
                                action: "eth_getCode",
                                address: e.address,
                                tag: e.blockTag
                            });

                          case "getStorageAt":
                            return this.fetch("proxy", {
                                action: "eth_getStorageAt",
                                address: e.address,
                                position: e.position,
                                tag: e.blockTag
                            });

                          case "sendTransaction":
                            return this.fetch("proxy", {
                                action: "eth_sendRawTransaction",
                                hex: e.signedTransaction
                            }, !0).catch((t => qa("sendTransaction", t, e.signedTransaction)));

                          case "getBlock":
                            if (e.blockTag) return this.fetch("proxy", {
                                action: "eth_getBlockByNumber",
                                tag: e.blockTag,
                                boolean: e.includeTransactions ? "true" : "false"
                            });
                            throw new Error("getBlock by blockHash not implemented");

                          case "getTransaction":
                            return this.fetch("proxy", {
                                action: "eth_getTransactionByHash",
                                txhash: e.transactionHash
                            });

                          case "getTransactionReceipt":
                            return this.fetch("proxy", {
                                action: "eth_getTransactionReceipt",
                                txhash: e.transactionHash
                            });

                          case "call":
                            {
                                if ("latest" !== e.blockTag) throw new Error("EtherscanProvider does not support blockTag for call");
                                const t = Ua(e.transaction);
                                t.module = "proxy", t.action = "eth_call";
                                try {
                                    return yield this.fetch("proxy", t, !0);
                                } catch (t) {
                                    return qa("call", t, e.transaction);
                                }
                            }

                          case "estimateGas":
                            {
                                const t = Ua(e.transaction);
                                t.module = "proxy", t.action = "eth_estimateGas";
                                try {
                                    return yield this.fetch("proxy", t, !0);
                                } catch (t) {
                                    return qa("estimateGas", t, e.transaction);
                                }
                            }

                          case "getLogs":
                            {
                                const t = {
                                    action: "getLogs"
                                };
                                if (e.filter.fromBlock && (t.fromBlock = Ga(e.filter.fromBlock)), e.filter.toBlock && (t.toBlock = Ga(e.filter.toBlock)), 
                                e.filter.address && (t.address = e.filter.address), e.filter.topics && e.filter.topics.length > 0 && (e.filter.topics.length > 1 && Fa.throwError("unsupported topic count", v.errors.UNSUPPORTED_OPERATION, {
                                    topics: e.filter.topics
                                }), 1 === e.filter.topics.length)) {
                                    const r = e.filter.topics[0];
                                    "string" == typeof r && 66 === r.length || Fa.throwError("unsupported topic format", v.errors.UNSUPPORTED_OPERATION, {
                                        topic0: r
                                    }), t.topic0 = r;
                                }
                                const r = yield this.fetch("logs", t);
                                let n = {};
                                for (let t = 0; t < r.length; t++) {
                                    const e = r[t];
                                    if (null == e.blockHash) {
                                        if (null == n[e.blockNumber]) {
                                            const t = yield this.getBlock(e.blockNumber);
                                            t && (n[e.blockNumber] = t.hash);
                                        }
                                        e.blockHash = n[e.blockNumber];
                                    }
                                }
                                return r;
                            }

                          case "getEtherPrice":
                            return "homestead" !== this.network.name ? 0 : parseFloat((yield this.fetch("stats", {
                                action: "ethprice"
                            })).ethusd);
                        }
                        return r.perform.call(this, t, e);
                    }));
                }
                getHistory(t, e, r) {
                    return ja(this, void 0, void 0, (function*() {
                        const n = {
                            action: "txlist",
                            address: yield this.resolveName(t),
                            startblock: null == e ? 0 : e,
                            endblock: null == r ? 99999999 : r,
                            sort: "asc"
                        };
                        return (yield this.fetch("account", n)).map((t => {
                            [ "contractAddress", "to" ].forEach((function(e) {
                                "" == t[e] && delete t[e];
                            })), null == t.creates && null != t.contractAddress && (t.creates = t.contractAddress);
                            const e = this.formatter.transactionResponse(t);
                            return t.timeStamp && (e.timestamp = parseInt(t.timeStamp)), e;
                        }));
                    }));
                }
                isCommunityResource() {
                    return null == this.apiKey;
                }
            }
            function Ha(t) {
                for (let e = (t = t.slice()).length - 1; e > 0; e--) {
                    const r = Math.floor(Math.random() * (e + 1)), n = t[e];
                    t[e] = t[r], t[r] = n;
                }
                return t;
            }
            var Ka = function(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            };
            const Wa = new v(ks);
            function Va() {
                return (new Date).getTime();
            }
            function Ja(t) {
                let e = null;
                for (let r = 0; r < t.length; r++) {
                    const n = t[r];
                    if (null == n) return null;
                    e ? e.name === n.name && e.chainId === n.chainId && (e.ensAddress === n.ensAddress || null == e.ensAddress && null == n.ensAddress) || Wa.throwArgumentError("provider mismatch", "networks", t) : e = n;
                }
                return e;
            }
            function Qa(t, e) {
                t = t.slice().sort();
                const r = Math.floor(t.length / 2);
                if (t.length % 2) return t[r];
                const n = t[r - 1], i = t[r];
                return null != e && Math.abs(n - i) > e ? null : (n + i) / 2;
            }
            function Xa(t) {
                if (null === t) return "null";
                if ("number" == typeof t || "boolean" == typeof t) return JSON.stringify(t);
                if ("string" == typeof t) return t;
                if (J.isBigNumber(t)) return t.toString();
                if (Array.isArray(t)) return JSON.stringify(t.map((t => Xa(t))));
                if ("object" == typeof t) {
                    const e = Object.keys(t);
                    return e.sort(), "{" + e.map((e => {
                        let r = t[e];
                        return r = "function" == typeof r ? "[function]" : Xa(r), JSON.stringify(e) + ":" + r;
                    })).join(",") + "}";
                }
                throw new Error("unknown value type: " + typeof t);
            }
            let Ya = 1;
            function Za(t) {
                let e = null, r = null, n = new Promise((n => {
                    e = function() {
                        r && (clearTimeout(r), r = null), n();
                    }, r = setTimeout(e, t);
                }));
                return {
                    cancel: e,
                    getPromise: function() {
                        return n;
                    },
                    wait: t => (n = n.then(t), n)
                };
            }
            const $a = [ v.errors.CALL_EXCEPTION, v.errors.INSUFFICIENT_FUNDS, v.errors.NONCE_EXPIRED, v.errors.REPLACEMENT_UNDERPRICED, v.errors.UNPREDICTABLE_GAS_LIMIT ], tu = [ "address", "args", "errorArgs", "errorSignature", "method", "transaction" ];
            function eu(t, e) {
                const r = {
                    weight: t.weight
                };
                return Object.defineProperty(r, "provider", {
                    get: () => t.provider
                }), t.start && (r.start = t.start), e && (r.duration = e - t.start), t.done && (t.error ? r.error = t.error : r.result = t.result || null), 
                r;
            }
            function ru(t, e, r) {
                let n = Xa;
                switch (e) {
                  case "getBlockNumber":
                    return function(e) {
                        const r = e.map((t => t.result));
                        let n = Qa(e.map((t => t.result)), 2);
                        if (null != n) return n = Math.ceil(n), r.indexOf(n + 1) >= 0 && n++, n >= t._highestBlockNumber && (t._highestBlockNumber = n), 
                        t._highestBlockNumber;
                    };

                  case "getGasPrice":
                    return function(t) {
                        const e = t.map((t => t.result));
                        return e.sort(), e[Math.floor(e.length / 2)];
                    };

                  case "getEtherPrice":
                    return function(t) {
                        return Qa(t.map((t => t.result)));
                    };

                  case "getBalance":
                  case "getTransactionCount":
                  case "getCode":
                  case "getStorageAt":
                  case "call":
                  case "estimateGas":
                  case "getLogs":
                    break;

                  case "getTransaction":
                  case "getTransactionReceipt":
                    n = function(t) {
                        return null == t ? null : ((t = ot(t)).confirmations = -1, Xa(t));
                    };
                    break;

                  case "getBlock":
                    n = r.includeTransactions ? function(t) {
                        return null == t ? null : ((t = ot(t)).transactions = t.transactions.map((t => ((t = ot(t)).confirmations = -1, 
                        t))), Xa(t));
                    } : function(t) {
                        return null == t ? null : Xa(t);
                    };
                    break;

                  default:
                    throw new Error("unknown method: " + e);
                }
                return function(t, e) {
                    return function(r) {
                        const n = {};
                        r.forEach((e => {
                            const r = t(e.result);
                            n[r] || (n[r] = {
                                count: 0,
                                result: e.result
                            }), n[r].count++;
                        }));
                        const i = Object.keys(n);
                        for (let t = 0; t < i.length; t++) {
                            const r = n[i[t]];
                            if (r.count >= e) return r.result;
                        }
                    };
                }(n, t.quorum);
            }
            function nu(t, e) {
                return Ka(this, void 0, void 0, (function*() {
                    const r = t.provider;
                    return null != r.blockNumber && r.blockNumber >= e || -1 === e ? r : Es((() => new Promise(((n, i) => {
                        setTimeout((function() {
                            return r.blockNumber >= e ? n(r) : t.cancelled ? n(null) : n(void 0);
                        }), 0);
                    }))), {
                        oncePoll: r
                    });
                }));
            }
            function iu(t, e, r, n) {
                return Ka(this, void 0, void 0, (function*() {
                    let i = t.provider;
                    switch (r) {
                      case "getBlockNumber":
                      case "getGasPrice":
                        return i[r]();

                      case "getEtherPrice":
                        if (i.getEtherPrice) return i.getEtherPrice();
                        break;

                      case "getBalance":
                      case "getTransactionCount":
                      case "getCode":
                        return n.blockTag && N(n.blockTag) && (i = yield nu(t, e)), i[r](n.address, n.blockTag || "latest");

                      case "getStorageAt":
                        return n.blockTag && N(n.blockTag) && (i = yield nu(t, e)), i.getStorageAt(n.address, n.position, n.blockTag || "latest");

                      case "getBlock":
                        return n.blockTag && N(n.blockTag) && (i = yield nu(t, e)), i[n.includeTransactions ? "getBlockWithTransactions" : "getBlock"](n.blockTag || n.blockHash);

                      case "call":
                      case "estimateGas":
                        return n.blockTag && N(n.blockTag) && (i = yield nu(t, e)), "call" === r && n.blockTag ? i[r](n.transaction, n.blockTag) : i[r](n.transaction);

                      case "getTransaction":
                      case "getTransactionReceipt":
                        return i[r](n.transactionHash);

                      case "getLogs":
                        {
                            let r = n.filter;
                            return (r.fromBlock && N(r.fromBlock) || r.toBlock && N(r.toBlock)) && (i = yield nu(t, e)), 
                            i.getLogs(r);
                        }
                    }
                    return Wa.throwError("unknown method error", v.errors.UNKNOWN_ERROR, {
                        method: r,
                        params: n
                    });
                }));
            }
            class ou extends ra {
                constructor(t, e) {
                    0 === t.length && Wa.throwArgumentError("missing providers", "providers", t);
                    const r = t.map(((t, e) => {
                        if (or.isProvider(t)) {
                            const e = xs(t) ? 2e3 : 750, r = 1;
                            return Object.freeze({
                                provider: t,
                                weight: 1,
                                stallTimeout: e,
                                priority: r
                            });
                        }
                        const r = ot(t);
                        null == r.priority && (r.priority = 1), null == r.stallTimeout && (r.stallTimeout = xs(t) ? 2e3 : 750), 
                        null == r.weight && (r.weight = 1);
                        const n = r.weight;
                        return (n % 1 || n > 512 || n < 1) && Wa.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${e}].weight`, n), 
                        Object.freeze(r);
                    })), n = r.reduce(((t, e) => t + e.weight), 0);
                    null == e ? e = n / 2 : e > n && Wa.throwArgumentError("quorum will always fail; larger than total weight", "quorum", e);
                    let i = Ja(r.map((t => t.provider.network)));
                    null == i && (i = new Promise(((t, e) => {
                        setTimeout((() => {
                            this.detectNetwork().then(t, e);
                        }), 0);
                    }))), super(i), et(this, "providerConfigs", Object.freeze(r)), et(this, "quorum", e), 
                    this._highestBlockNumber = -1;
                }
                detectNetwork() {
                    return Ka(this, void 0, void 0, (function*() {
                        return Ja(yield Promise.all(this.providerConfigs.map((t => t.provider.getNetwork()))));
                    }));
                }
                perform(t, e) {
                    return Ka(this, void 0, void 0, (function*() {
                        if ("sendTransaction" === t) {
                            const t = yield Promise.all(this.providerConfigs.map((t => t.provider.sendTransaction(e.signedTransaction).then((t => t.hash), (t => t)))));
                            for (let e = 0; e < t.length; e++) {
                                const r = t[e];
                                if ("string" == typeof r) return r;
                            }
                            throw t[0];
                        }
                        -1 === this._highestBlockNumber && "getBlockNumber" !== t && (yield this.getBlockNumber());
                        const r = ru(this, t, e), n = Ha(this.providerConfigs.map(ot));
                        n.sort(((t, e) => t.priority - e.priority));
                        const i = this._highestBlockNumber;
                        let o = 0, s = !0;
                        for (;;) {
                            const a = Va();
                            let u = n.filter((t => t.runner && a - t.start < t.stallTimeout)).reduce(((t, e) => t + e.weight), 0);
                            for (;u < this.quorum && o < n.length; ) {
                                const r = n[o++], s = Ya++;
                                r.start = Va(), r.staller = Za(r.stallTimeout), r.staller.wait((() => {
                                    r.staller = null;
                                })), r.runner = iu(r, i, t, e).then((n => {
                                    r.done = !0, r.result = n, this.listenerCount("debug") && this.emit("debug", {
                                        action: "request",
                                        rid: s,
                                        backend: eu(r, Va()),
                                        request: {
                                            method: t,
                                            params: lt(e)
                                        },
                                        provider: this
                                    });
                                }), (n => {
                                    r.done = !0, r.error = n, this.listenerCount("debug") && this.emit("debug", {
                                        action: "request",
                                        rid: s,
                                        backend: eu(r, Va()),
                                        request: {
                                            method: t,
                                            params: lt(e)
                                        },
                                        provider: this
                                    });
                                })), this.listenerCount("debug") && this.emit("debug", {
                                    action: "request",
                                    rid: s,
                                    backend: eu(r, null),
                                    request: {
                                        method: t,
                                        params: lt(e)
                                    },
                                    provider: this
                                }), u += r.weight;
                            }
                            const l = [];
                            n.forEach((t => {
                                !t.done && t.runner && (l.push(t.runner), t.staller && l.push(t.staller.getPromise()));
                            })), l.length && (yield Promise.race(l));
                            const c = n.filter((t => t.done && null == t.error));
                            if (c.length >= this.quorum) {
                                const t = r(c);
                                if (void 0 !== t) return n.forEach((t => {
                                    t.staller && t.staller.cancel(), t.cancelled = !0;
                                })), t;
                                s || (yield Za(100).getPromise()), s = !1;
                            }
                            const h = n.reduce(((t, e) => {
                                if (!e.done || null == e.error) return t;
                                const r = e.error.code;
                                return $a.indexOf(r) >= 0 && (t[r] || (t[r] = {
                                    error: e.error,
                                    weight: 0
                                }), t[r].weight += e.weight), t;
                            }), {});
                            if (Object.keys(h).forEach((t => {
                                const e = h[t];
                                if (e.weight < this.quorum) return;
                                n.forEach((t => {
                                    t.staller && t.staller.cancel(), t.cancelled = !0;
                                }));
                                const r = e.error, i = {};
                                tu.forEach((t => {
                                    null != r[t] && (i[t] = r[t]);
                                })), Wa.throwError(r.reason || r.message, t, i);
                            })), 0 === n.filter((t => !t.done)).length) break;
                        }
                        return n.forEach((t => {
                            t.staller && t.staller.cancel(), t.cancelled = !0;
                        })), Wa.throwError("failed to meet quorum", v.errors.SERVER_ERROR, {
                            method: t,
                            params: e,
                            results: n.map((t => eu(t))),
                            provider: this
                        });
                    }));
                }
            }
            const su = null, au = new v(ks), uu = "84842078b09946638c03157f83405213";
            class lu extends wa {
                constructor(t, e) {
                    const r = new cu(t, e), n = r.connection;
                    n.password && au.throwError("INFURA WebSocket project secrets unsupported", v.errors.UNSUPPORTED_OPERATION, {
                        operation: "InfuraProvider.getWebSocketProvider()"
                    });
                    super(n.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/"), t), et(this, "apiKey", r.projectId), 
                    et(this, "projectId", r.projectId), et(this, "projectSecret", r.projectSecret);
                }
                isCommunityResource() {
                    return this.projectId === uu;
                }
            }
            class cu extends Ma {
                static getWebSocketProvider(t, e) {
                    return new lu(t, e);
                }
                static getApiKey(t) {
                    const e = {
                        apiKey: uu,
                        projectId: uu,
                        projectSecret: null
                    };
                    return null == t || ("string" == typeof t ? e.projectId = t : null != t.projectSecret ? (au.assertArgument("string" == typeof t.projectId, "projectSecret requires a projectId", "projectId", t.projectId), 
                    au.assertArgument("string" == typeof t.projectSecret, "invalid projectSecret", "projectSecret", "[REDACTED]"), 
                    e.projectId = t.projectId, e.projectSecret = t.projectSecret) : t.projectId && (e.projectId = t.projectId), 
                    e.apiKey = e.projectId), e;
                }
                static getUrl(t, e) {
                    let r = null;
                    switch (t ? t.name : "unknown") {
                      case "homestead":
                        r = "mainnet.infura.io";
                        break;

                      case "goerli":
                        r = "goerli.infura.io";
                        break;

                      case "sepolia":
                        r = "sepolia.infura.io";
                        break;

                      case "matic":
                        r = "polygon-mainnet.infura.io";
                        break;

                      case "maticmum":
                        r = "polygon-mumbai.infura.io";
                        break;

                      case "optimism":
                        r = "optimism-mainnet.infura.io";
                        break;

                      case "optimism-goerli":
                        r = "optimism-goerli.infura.io";
                        break;

                      case "arbitrum":
                        r = "arbitrum-mainnet.infura.io";
                        break;

                      case "arbitrum-goerli":
                        r = "arbitrum-goerli.infura.io";
                        break;

                      default:
                        au.throwError("unsupported network", v.errors.INVALID_ARGUMENT, {
                            argument: "network",
                            value: t
                        });
                    }
                    const n = {
                        allowGzip: !0,
                        url: "https://" + r + "/v3/" + e.projectId,
                        throttleCallback: (t, r) => (e.projectId === uu && Ts(), Promise.resolve(!0))
                    };
                    return null != e.projectSecret && (n.user = "", n.password = e.projectSecret), n;
                }
                isCommunityResource() {
                    return this.projectId === uu;
                }
            }
            class hu extends ma {
                send(t, e) {
                    const r = {
                        method: t,
                        params: e,
                        id: this._nextId++,
                        jsonrpc: "2.0"
                    };
                    null == this._pendingBatch && (this._pendingBatch = []);
                    const n = {
                        request: r,
                        resolve: null,
                        reject: null
                    }, i = new Promise(((t, e) => {
                        n.resolve = t, n.reject = e;
                    }));
                    return this._pendingBatch.push(n), this._pendingBatchAggregator || (this._pendingBatchAggregator = setTimeout((() => {
                        const t = this._pendingBatch;
                        this._pendingBatch = null, this._pendingBatchAggregator = null;
                        const e = t.map((t => t.request));
                        return this.emit("debug", {
                            action: "requestBatch",
                            request: lt(e),
                            provider: this
                        }), _s(this.connection, JSON.stringify(e)).then((r => {
                            this.emit("debug", {
                                action: "response",
                                request: e,
                                response: r,
                                provider: this
                            }), t.forEach(((t, e) => {
                                const n = r[e];
                                if (n.error) {
                                    const e = new Error(n.error.message);
                                    e.code = n.error.code, e.data = n.error.data, t.reject(e);
                                } else t.resolve(n.result);
                            }));
                        }), (r => {
                            this.emit("debug", {
                                action: "response",
                                error: r,
                                request: e,
                                provider: this
                            }), t.forEach((t => {
                                t.reject(r);
                            }));
                        }));
                    }), 10)), i;
                }
            }
            const fu = new v(ks);
            class du extends Ma {
                static getApiKey(t) {
                    return t && "string" != typeof t && fu.throwArgumentError("invalid apiKey", "apiKey", t), 
                    t || "ETHERS_JS_SHARED";
                }
                static getUrl(t, e) {
                    fu.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
                    let r = null;
                    switch (t.name) {
                      case "homestead":
                        r = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                        break;

                      case "ropsten":
                        r = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                        break;

                      case "rinkeby":
                        r = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                        break;

                      case "goerli":
                        r = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                        break;

                      case "kovan":
                        r = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                        break;

                      default:
                        fu.throwArgumentError("unsupported network", "network", arguments[0]);
                    }
                    return r + "?apiKey=" + e;
                }
            }
            const pu = new v(ks), mu = "62e1ad51b37b8e00394bda3b";
            class gu extends Ma {
                static getApiKey(t) {
                    const e = {
                        applicationId: null,
                        loadBalancer: !0,
                        applicationSecretKey: null
                    };
                    return null == t ? e.applicationId = mu : "string" == typeof t ? e.applicationId = t : null != t.applicationSecretKey ? (e.applicationId = t.applicationId, 
                    e.applicationSecretKey = t.applicationSecretKey) : t.applicationId ? e.applicationId = t.applicationId : pu.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", t), 
                    e;
                }
                static getUrl(t, e) {
                    let r = null;
                    switch (t ? t.name : "unknown") {
                      case "goerli":
                        r = "eth-goerli.gateway.pokt.network";
                        break;

                      case "homestead":
                        r = "eth-mainnet.gateway.pokt.network";
                        break;

                      case "kovan":
                        r = "poa-kovan.gateway.pokt.network";
                        break;

                      case "matic":
                        r = "poly-mainnet.gateway.pokt.network";
                        break;

                      case "maticmum":
                        r = "polygon-mumbai-rpc.gateway.pokt.network";
                        break;

                      case "rinkeby":
                        r = "eth-rinkeby.gateway.pokt.network";
                        break;

                      case "ropsten":
                        r = "eth-ropsten.gateway.pokt.network";
                        break;

                      default:
                        pu.throwError("unsupported network", v.errors.INVALID_ARGUMENT, {
                            argument: "network",
                            value: t
                        });
                    }
                    const n = {
                        headers: {},
                        url: `https://${r}/v1/lb/${e.applicationId}`
                    };
                    return null != e.applicationSecretKey && (n.user = "", n.password = e.applicationSecretKey), 
                    n;
                }
                isCommunityResource() {
                    return this.applicationId === mu;
                }
            }
            const yu = new v(ks);
            let vu = 1;
            function bu(t, e) {
                const r = "Web3LegacyFetcher";
                return function(t, n) {
                    const i = {
                        method: t,
                        params: n,
                        id: vu++,
                        jsonrpc: "2.0"
                    };
                    return new Promise(((t, n) => {
                        this.emit("debug", {
                            action: "request",
                            fetcher: r,
                            request: lt(i),
                            provider: this
                        }), e(i, ((e, o) => {
                            if (e) return this.emit("debug", {
                                action: "response",
                                fetcher: r,
                                error: e,
                                request: i,
                                provider: this
                            }), n(e);
                            if (this.emit("debug", {
                                action: "response",
                                fetcher: r,
                                request: i,
                                response: o,
                                provider: this
                            }), o.error) {
                                const t = new Error(o.error.message);
                                return t.code = o.error.code, t.data = o.error.data, n(t);
                            }
                            t(o.result);
                        }));
                    }));
                };
            }
            class wu extends ma {
                constructor(t, e) {
                    null == t && yu.throwArgumentError("missing provider", "provider", t);
                    let r = null, n = null, i = null;
                    "function" == typeof t ? (r = "unknown:", n = t) : (r = t.host || t.path || "", 
                    !r && t.isMetaMask && (r = "metamask"), i = t, t.request ? ("" === r && (r = "eip-1193:"), 
                    n = function(t) {
                        return function(e, r) {
                            null == r && (r = []);
                            const n = {
                                method: e,
                                params: r
                            };
                            return this.emit("debug", {
                                action: "request",
                                fetcher: "Eip1193Fetcher",
                                request: lt(n),
                                provider: this
                            }), t.request(n).then((t => (this.emit("debug", {
                                action: "response",
                                fetcher: "Eip1193Fetcher",
                                request: n,
                                response: t,
                                provider: this
                            }), t)), (t => {
                                throw this.emit("debug", {
                                    action: "response",
                                    fetcher: "Eip1193Fetcher",
                                    request: n,
                                    error: t,
                                    provider: this
                                }), t;
                            }));
                        };
                    }(t)) : t.sendAsync ? n = bu(0, t.sendAsync.bind(t)) : t.send ? n = bu(0, t.send.bind(t)) : yu.throwArgumentError("unsupported provider", "provider", t), 
                    r || (r = "unknown:")), super(r, e), et(this, "jsonRpcFetchFunc", n), et(this, "provider", i);
                }
                send(t, e) {
                    return this.jsonRpcFetchFunc(t, e);
                }
            }
            const Au = new v(ks);
            function _u(t, e) {
                if (null == t && (t = "homestead"), "string" == typeof t) {
                    const e = t.match(/^(ws|http)s?:/i);
                    if (e) switch (e[1].toLowerCase()) {
                      case "http":
                      case "https":
                        return new ma(t);

                      case "ws":
                      case "wss":
                        return new wa(t);

                      default:
                        Au.throwArgumentError("unsupported URL scheme", "network", t);
                    }
                }
                const r = Uo(t);
                return r && r._defaultProvider || Au.throwError("unsupported getDefaultProvider network", v.errors.NETWORK_ERROR, {
                    operation: "getDefaultProvider",
                    network: t
                }), r._defaultProvider({
                    FallbackProvider: ou,
                    AlchemyProvider: Oa,
                    AnkrProvider: Ta,
                    CloudflareProvider: Ra,
                    EtherscanProvider: za,
                    InfuraProvider: cu,
                    JsonRpcProvider: ma,
                    NodesmithProvider: du,
                    PocketProvider: gu,
                    Web3Provider: wu,
                    IpcProvider: su
                }, e);
            }
            const Eu = new RegExp("^bytes([0-9]+)$"), Mu = new RegExp("^(u?int)([0-9]*)$"), Pu = new RegExp("^(.*)\\[([0-9]*)\\]$"), ku = "0000000000000000000000000000000000000000000000000000000000000000", Su = new v("solidity/5.7.0");
            function Ou(t, e, r) {
                switch (t) {
                  case "address":
                    return r ? O(e, 32) : P(e);

                  case "string":
                    return Kt(e);

                  case "bytes":
                    return P(e);

                  case "bool":
                    return e = e ? "0x01" : "0x00", r ? O(e, 32) : P(e);
                }
                let n = t.match(Mu);
                if (n) {
                    let i = parseInt(n[2] || "256");
                    return (n[2] && String(i) !== n[2] || i % 8 != 0 || 0 === i || i > 256) && Su.throwArgumentError("invalid number type", "type", t), 
                    r && (i = 256), O(e = J.from(e).toTwos(i), i / 8);
                }
                if (n = t.match(Eu), n) {
                    const i = parseInt(n[1]);
                    return (String(i) !== n[1] || 0 === i || i > 32) && Su.throwArgumentError("invalid bytes type", "type", t), 
                    P(e).byteLength !== i && Su.throwArgumentError(`invalid value for ${t}`, "value", e), 
                    r ? P((e + ku).substring(0, 66)) : e;
                }
                if (n = t.match(Pu), n && Array.isArray(e)) {
                    const r = n[1];
                    parseInt(n[2] || String(e.length)) != e.length && Su.throwArgumentError(`invalid array length for ${t}`, "value", e);
                    const i = [];
                    return e.forEach((function(t) {
                        i.push(Ou(r, t, !0));
                    })), k(i);
                }
                return Su.throwArgumentError("invalid type", "type", t);
            }
            function Nu(t, e) {
                t.length != e.length && Su.throwArgumentError("wrong number of values; expected ${ types.length }", "values", e);
                const r = [];
                return t.forEach((function(t, n) {
                    r.push(Ou(t, e[n]));
                })), I(k(r));
            }
            function xu(t, e) {
                return bt(Nu(t, e));
            }
            function Iu(t, e) {
                return wi(Nu(t, e));
            }
            function Tu(t, e) {
                e || (e = function(t) {
                    return [ parseInt(t, 16) ];
                });
                let r = 0, n = {};
                return t.split(",").forEach((t => {
                    let i = t.split(":");
                    r += parseInt(i[0], 16), n[r] = e(i[1]);
                })), n;
            }
            function Bu(t) {
                let e = 0;
                return t.split(",").map((t => {
                    let r = t.split("-");
                    1 === r.length ? r[1] = "0" : "" === r[1] && (r[1] = "1");
                    let n = e + parseInt(r[0], 16);
                    return e = parseInt(r[1], 16), {
                        l: n,
                        h: e
                    };
                }));
            }
            function Cu(t, e) {
                let r = 0;
                for (let n = 0; n < e.length; n++) {
                    let i = e[n];
                    if (r += i.l, t >= r && t <= r + i.h && (t - r) % (i.d || 1) == 0) {
                        if (i.e && -1 !== i.e.indexOf(t - r)) continue;
                        return i;
                    }
                }
                return null;
            }
            const Ru = Bu("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"), ju = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((t => parseInt(t, 16))), Fu = [ {
                h: 25,
                s: 32,
                l: 65
            }, {
                h: 30,
                s: 32,
                e: [ 23 ],
                l: 127
            }, {
                h: 54,
                s: 1,
                e: [ 48 ],
                l: 64,
                d: 2
            }, {
                h: 14,
                s: 1,
                l: 57,
                d: 2
            }, {
                h: 44,
                s: 1,
                l: 17,
                d: 2
            }, {
                h: 10,
                s: 1,
                e: [ 2, 6, 8 ],
                l: 61,
                d: 2
            }, {
                h: 16,
                s: 1,
                l: 68,
                d: 2
            }, {
                h: 84,
                s: 1,
                e: [ 18, 24, 66 ],
                l: 19,
                d: 2
            }, {
                h: 26,
                s: 32,
                e: [ 17 ],
                l: 435
            }, {
                h: 22,
                s: 1,
                l: 71,
                d: 2
            }, {
                h: 15,
                s: 80,
                l: 40
            }, {
                h: 31,
                s: 32,
                l: 16
            }, {
                h: 32,
                s: 1,
                l: 80,
                d: 2
            }, {
                h: 52,
                s: 1,
                l: 42,
                d: 2
            }, {
                h: 12,
                s: 1,
                l: 55,
                d: 2
            }, {
                h: 40,
                s: 1,
                e: [ 38 ],
                l: 15,
                d: 2
            }, {
                h: 14,
                s: 1,
                l: 48,
                d: 2
            }, {
                h: 37,
                s: 48,
                l: 49
            }, {
                h: 148,
                s: 1,
                l: 6351,
                d: 2
            }, {
                h: 88,
                s: 1,
                l: 160,
                d: 2
            }, {
                h: 15,
                s: 16,
                l: 704
            }, {
                h: 25,
                s: 26,
                l: 854
            }, {
                h: 25,
                s: 32,
                l: 55915
            }, {
                h: 37,
                s: 40,
                l: 1247
            }, {
                h: 25,
                s: -119711,
                l: 53248
            }, {
                h: 25,
                s: -119763,
                l: 52
            }, {
                h: 25,
                s: -119815,
                l: 52
            }, {
                h: 25,
                s: -119867,
                e: [ 1, 4, 5, 7, 8, 11, 12, 17 ],
                l: 52
            }, {
                h: 25,
                s: -119919,
                l: 52
            }, {
                h: 24,
                s: -119971,
                e: [ 2, 7, 8, 17 ],
                l: 52
            }, {
                h: 24,
                s: -120023,
                e: [ 2, 7, 13, 15, 16, 17 ],
                l: 52
            }, {
                h: 25,
                s: -120075,
                l: 52
            }, {
                h: 25,
                s: -120127,
                l: 52
            }, {
                h: 25,
                s: -120179,
                l: 52
            }, {
                h: 25,
                s: -120231,
                l: 52
            }, {
                h: 25,
                s: -120283,
                l: 52
            }, {
                h: 25,
                s: -120335,
                l: 52
            }, {
                h: 24,
                s: -119543,
                e: [ 17 ],
                l: 56
            }, {
                h: 24,
                s: -119601,
                e: [ 17 ],
                l: 58
            }, {
                h: 24,
                s: -119659,
                e: [ 17 ],
                l: 58
            }, {
                h: 24,
                s: -119717,
                e: [ 17 ],
                l: 58
            }, {
                h: 24,
                s: -119775,
                e: [ 17 ],
                l: 58
            } ], Uu = Tu("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"), Lu = Tu("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"), Du = Tu("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", (function(t) {
                if (t.length % 4 != 0) throw new Error("bad data");
                let e = [];
                for (let r = 0; r < t.length; r += 4) e.push(parseInt(t.substring(r, r + 4), 16));
                return e;
            })), Gu = Bu("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
            function qu(t) {
                if (t.match(/^[a-z0-9-]*$/i) && t.length <= 59) return t.toLowerCase();
                let e = Xt(t);
                var r;
                r = e.map((t => {
                    if (ju.indexOf(t) >= 0) return [];
                    if (t >= 65024 && t <= 65039) return [];
                    let e = function(t) {
                        let e = Cu(t, Fu);
                        if (e) return [ t + e.s ];
                        let r = Uu[t];
                        if (r) return r;
                        let n = Lu[t];
                        return n ? [ t + n[0] ] : Du[t] || null;
                    }(t);
                    return e || [ t ];
                })), e = r.reduce(((t, e) => (e.forEach((e => {
                    t.push(e);
                })), t)), []), e = Xt(Jt(e), Dt.NFKC), e.forEach((t => {
                    if (Cu(t, Gu)) throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
                })), e.forEach((t => {
                    if (Cu(t, Ru)) throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
                }));
                let n = Jt(e);
                if ("-" === n.substring(0, 1) || "--" === n.substring(2, 4) || "-" === n.substring(n.length - 1)) throw new Error("invalid hyphen");
                return n;
            }
            function zu(t) {
                const e = Kt(t);
                if (e.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
                return I(k([ e, No ]).slice(0, 32));
            }
            function Hu(t) {
                const e = P(t);
                if (32 !== e.length) throw new Error("invalid bytes32 - not 32 bytes long");
                if (0 !== e[31]) throw new Error("invalid bytes32 string - no null terminator");
                let r = 31;
                for (;0 === e[r - 1]; ) r--;
                return Qt(e.slice(0, r));
            }
            const Ku = new v("units/5.7.0"), Wu = [ "wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether" ];
            function Vu(t) {
                const e = String(t).split(".");
                (e.length > 2 || !e[0].match(/^-?[0-9]*$/) || e[1] && !e[1].match(/^[0-9]*$/) || "." === t || "-." === t) && Ku.throwArgumentError("invalid value", "value", t);
                let r = e[0], n = "";
                for ("-" === r.substring(0, 1) && (n = "-", r = r.substring(1)); "0" === r.substring(0, 1); ) r = r.substring(1);
                "" === r && (r = "0");
                let i = "";
                for (2 === e.length && (i = "." + (e[1] || "0")); i.length > 2 && "0" === i[i.length - 1]; ) i = i.substring(0, i.length - 1);
                const o = [];
                for (;r.length; ) {
                    if (r.length <= 3) {
                        o.unshift(r);
                        break;
                    }
                    {
                        const t = r.length - 3;
                        o.unshift(r.substring(t)), r = r.substring(0, t);
                    }
                }
                return n + o.join(",") + i;
            }
            function Ju(t, e) {
                if ("string" == typeof e) {
                    const t = Wu.indexOf(e);
                    -1 !== t && (e = 3 * t);
                }
                return Hn(t, null != e ? e : 18);
            }
            function Qu(t, e) {
                if ("string" != typeof t && Ku.throwArgumentError("value must be a string", "value", t), 
                "string" == typeof e) {
                    const t = Wu.indexOf(e);
                    -1 !== t && (e = 3 * t);
                }
                return Kn(t, null != e ? e : 18);
            }
            function Xu(t) {
                return Ju(t, 18);
            }
            function Yu(t) {
                return Qu(t, 18);
            }
            const Zu = "ethers/5.7.2", $u = new v(Zu);
            try {
                const t = window;
                null == t._ethers && (t._ethers = u);
            } catch (t) {}
        },
        3715: (t, e, r) => {
            var n = e;
            n.utils = r(6436), n.common = r(5772), n.sha = r(9041), n.ripemd = r(2949), n.hmac = r(2344), 
            n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, 
            n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
        },
        5772: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(9746);
            function o() {
                this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, 
                this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, 
                this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, 
                this._delta32 = this.blockSize / 32;
            }
            e.BlockHash = o, o.prototype.update = function(t, e) {
                if (t = n.toArray(t, e), this.pending ? this.pending = this.pending.concat(t) : this.pending = t, 
                this.pendingTotal += t.length, this.pending.length >= this._delta8) {
                    var r = (t = this.pending).length % this._delta8;
                    this.pending = t.slice(t.length - r, t.length), 0 === this.pending.length && (this.pending = null), 
                    t = n.join32(t, 0, t.length - r, this.endian);
                    for (var i = 0; i < t.length; i += this._delta32) this._update(t, i, i + this._delta32);
                }
                return this;
            }, o.prototype.digest = function(t) {
                return this.update(this._pad()), i(null === this.pending), this._digest(t);
            }, o.prototype._pad = function() {
                var t = this.pendingTotal, e = this._delta8, r = e - (t + this.padLength) % e, n = new Array(r + this.padLength);
                n[0] = 128;
                for (var i = 1; i < r; i++) n[i] = 0;
                if (t <<= 3, "big" === this.endian) {
                    for (var o = 8; o < this.padLength; o++) n[i++] = 0;
                    n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = t >>> 24 & 255, n[i++] = t >>> 16 & 255, 
                    n[i++] = t >>> 8 & 255, n[i++] = 255 & t;
                } else for (n[i++] = 255 & t, n[i++] = t >>> 8 & 255, n[i++] = t >>> 16 & 255, n[i++] = t >>> 24 & 255, 
                n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++) n[i++] = 0;
                return n;
            };
        },
        2344: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(9746);
            function o(t, e, r) {
                if (!(this instanceof o)) return new o(t, e, r);
                this.Hash = t, this.blockSize = t.blockSize / 8, this.outSize = t.outSize / 8, this.inner = null, 
                this.outer = null, this._init(n.toArray(e, r));
            }
            t.exports = o, o.prototype._init = function(t) {
                t.length > this.blockSize && (t = (new this.Hash).update(t).digest()), i(t.length <= this.blockSize);
                for (var e = t.length; e < this.blockSize; e++) t.push(0);
                for (e = 0; e < t.length; e++) t[e] ^= 54;
                for (this.inner = (new this.Hash).update(t), e = 0; e < t.length; e++) t[e] ^= 106;
                this.outer = (new this.Hash).update(t);
            }, o.prototype.update = function(t, e) {
                return this.inner.update(t, e), this;
            }, o.prototype.digest = function(t) {
                return this.outer.update(this.inner.digest()), this.outer.digest(t);
            };
        },
        2949: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(5772), o = n.rotl32, s = n.sum32, a = n.sum32_3, u = n.sum32_4, l = i.BlockHash;
            function c() {
                if (!(this instanceof c)) return new c;
                l.call(this), this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], 
                this.endian = "little";
            }
            function h(t, e, r, n) {
                return t <= 15 ? e ^ r ^ n : t <= 31 ? e & r | ~e & n : t <= 47 ? (e | ~r) ^ n : t <= 63 ? e & n | r & ~n : e ^ (r | ~n);
            }
            function f(t) {
                return t <= 15 ? 0 : t <= 31 ? 1518500249 : t <= 47 ? 1859775393 : t <= 63 ? 2400959708 : 2840853838;
            }
            function d(t) {
                return t <= 15 ? 1352829926 : t <= 31 ? 1548603684 : t <= 47 ? 1836072691 : t <= 63 ? 2053994217 : 0;
            }
            n.inherits(c, l), e.ripemd160 = c, c.blockSize = 512, c.outSize = 160, c.hmacStrength = 192, 
            c.padLength = 64, c.prototype._update = function(t, e) {
                for (var r = this.h[0], n = this.h[1], i = this.h[2], l = this.h[3], c = this.h[4], v = r, b = n, w = i, A = l, _ = c, E = 0; E < 80; E++) {
                    var M = s(o(u(r, h(E, n, i, l), t[p[E] + e], f(E)), g[E]), c);
                    r = c, c = l, l = o(i, 10), i = n, n = M, M = s(o(u(v, h(79 - E, b, w, A), t[m[E] + e], d(E)), y[E]), _), 
                    v = _, _ = A, A = o(w, 10), w = b, b = M;
                }
                M = a(this.h[1], i, A), this.h[1] = a(this.h[2], l, _), this.h[2] = a(this.h[3], c, v), 
                this.h[3] = a(this.h[4], r, b), this.h[4] = a(this.h[0], n, w), this.h[0] = M;
            }, c.prototype._digest = function(t) {
                return "hex" === t ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
            };
            var p = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ], m = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ], g = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ], y = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
        },
        9041: (t, e, r) => {
            "use strict";
            e.sha1 = r(4761), e.sha224 = r(799), e.sha256 = r(9344), e.sha384 = r(772), e.sha512 = r(5900);
        },
        4761: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(5772), o = r(7038), s = n.rotl32, a = n.sum32, u = n.sum32_5, l = o.ft_1, c = i.BlockHash, h = [ 1518500249, 1859775393, 2400959708, 3395469782 ];
            function f() {
                if (!(this instanceof f)) return new f;
                c.call(this), this.h = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ], 
                this.W = new Array(80);
            }
            n.inherits(f, c), t.exports = f, f.blockSize = 512, f.outSize = 160, f.hmacStrength = 80, 
            f.padLength = 64, f.prototype._update = function(t, e) {
                for (var r = this.W, n = 0; n < 16; n++) r[n] = t[e + n];
                for (;n < r.length; n++) r[n] = s(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
                var i = this.h[0], o = this.h[1], c = this.h[2], f = this.h[3], d = this.h[4];
                for (n = 0; n < r.length; n++) {
                    var p = ~~(n / 20), m = u(s(i, 5), l(p, o, c, f), d, r[n], h[p]);
                    d = f, f = c, c = s(o, 30), o = i, i = m;
                }
                this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], c), 
                this.h[3] = a(this.h[3], f), this.h[4] = a(this.h[4], d);
            }, f.prototype._digest = function(t) {
                return "hex" === t ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
            };
        },
        799: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(9344);
            function o() {
                if (!(this instanceof o)) return new o;
                i.call(this), this.h = [ 3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428 ];
            }
            n.inherits(o, i), t.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, 
            o.padLength = 64, o.prototype._digest = function(t) {
                return "hex" === t ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
            };
        },
        9344: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(5772), o = r(7038), s = r(9746), a = n.sum32, u = n.sum32_4, l = n.sum32_5, c = o.ch32, h = o.maj32, f = o.s0_256, d = o.s1_256, p = o.g0_256, m = o.g1_256, g = i.BlockHash, y = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
            function v() {
                if (!(this instanceof v)) return new v;
                g.call(this), this.h = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ], 
                this.k = y, this.W = new Array(64);
            }
            n.inherits(v, g), t.exports = v, v.blockSize = 512, v.outSize = 256, v.hmacStrength = 192, 
            v.padLength = 64, v.prototype._update = function(t, e) {
                for (var r = this.W, n = 0; n < 16; n++) r[n] = t[e + n];
                for (;n < r.length; n++) r[n] = u(m(r[n - 2]), r[n - 7], p(r[n - 15]), r[n - 16]);
                var i = this.h[0], o = this.h[1], g = this.h[2], y = this.h[3], v = this.h[4], b = this.h[5], w = this.h[6], A = this.h[7];
                for (s(this.k.length === r.length), n = 0; n < r.length; n++) {
                    var _ = l(A, d(v), c(v, b, w), this.k[n], r[n]), E = a(f(i), h(i, o, g));
                    A = w, w = b, b = v, v = a(y, _), y = g, g = o, o = i, i = a(_, E);
                }
                this.h[0] = a(this.h[0], i), this.h[1] = a(this.h[1], o), this.h[2] = a(this.h[2], g), 
                this.h[3] = a(this.h[3], y), this.h[4] = a(this.h[4], v), this.h[5] = a(this.h[5], b), 
                this.h[6] = a(this.h[6], w), this.h[7] = a(this.h[7], A);
            }, v.prototype._digest = function(t) {
                return "hex" === t ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
            };
        },
        772: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(5900);
            function o() {
                if (!(this instanceof o)) return new o;
                i.call(this), this.h = [ 3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428 ];
            }
            n.inherits(o, i), t.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, 
            o.padLength = 128, o.prototype._digest = function(t) {
                return "hex" === t ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
            };
        },
        5900: (t, e, r) => {
            "use strict";
            var n = r(6436), i = r(5772), o = r(9746), s = n.rotr64_hi, a = n.rotr64_lo, u = n.shr64_hi, l = n.shr64_lo, c = n.sum64, h = n.sum64_hi, f = n.sum64_lo, d = n.sum64_4_hi, p = n.sum64_4_lo, m = n.sum64_5_hi, g = n.sum64_5_lo, y = i.BlockHash, v = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
            function b() {
                if (!(this instanceof b)) return new b;
                y.call(this), this.h = [ 1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209 ], 
                this.k = v, this.W = new Array(160);
            }
            function w(t, e, r, n, i) {
                var o = t & r ^ ~t & i;
                return o < 0 && (o += 4294967296), o;
            }
            function A(t, e, r, n, i, o) {
                var s = e & n ^ ~e & o;
                return s < 0 && (s += 4294967296), s;
            }
            function _(t, e, r, n, i) {
                var o = t & r ^ t & i ^ r & i;
                return o < 0 && (o += 4294967296), o;
            }
            function E(t, e, r, n, i, o) {
                var s = e & n ^ e & o ^ n & o;
                return s < 0 && (s += 4294967296), s;
            }
            function M(t, e) {
                var r = s(t, e, 28) ^ s(e, t, 2) ^ s(e, t, 7);
                return r < 0 && (r += 4294967296), r;
            }
            function P(t, e) {
                var r = a(t, e, 28) ^ a(e, t, 2) ^ a(e, t, 7);
                return r < 0 && (r += 4294967296), r;
            }
            function k(t, e) {
                var r = s(t, e, 14) ^ s(t, e, 18) ^ s(e, t, 9);
                return r < 0 && (r += 4294967296), r;
            }
            function S(t, e) {
                var r = a(t, e, 14) ^ a(t, e, 18) ^ a(e, t, 9);
                return r < 0 && (r += 4294967296), r;
            }
            function O(t, e) {
                var r = s(t, e, 1) ^ s(t, e, 8) ^ u(t, e, 7);
                return r < 0 && (r += 4294967296), r;
            }
            function N(t, e) {
                var r = a(t, e, 1) ^ a(t, e, 8) ^ l(t, e, 7);
                return r < 0 && (r += 4294967296), r;
            }
            function x(t, e) {
                var r = s(t, e, 19) ^ s(e, t, 29) ^ u(t, e, 6);
                return r < 0 && (r += 4294967296), r;
            }
            function I(t, e) {
                var r = a(t, e, 19) ^ a(e, t, 29) ^ l(t, e, 6);
                return r < 0 && (r += 4294967296), r;
            }
            n.inherits(b, y), t.exports = b, b.blockSize = 1024, b.outSize = 512, b.hmacStrength = 192, 
            b.padLength = 128, b.prototype._prepareBlock = function(t, e) {
                for (var r = this.W, n = 0; n < 32; n++) r[n] = t[e + n];
                for (;n < r.length; n += 2) {
                    var i = x(r[n - 4], r[n - 3]), o = I(r[n - 4], r[n - 3]), s = r[n - 14], a = r[n - 13], u = O(r[n - 30], r[n - 29]), l = N(r[n - 30], r[n - 29]), c = r[n - 32], h = r[n - 31];
                    r[n] = d(i, o, s, a, u, l, c, h), r[n + 1] = p(i, o, s, a, u, l, c, h);
                }
            }, b.prototype._update = function(t, e) {
                this._prepareBlock(t, e);
                var r = this.W, n = this.h[0], i = this.h[1], s = this.h[2], a = this.h[3], u = this.h[4], l = this.h[5], d = this.h[6], p = this.h[7], y = this.h[8], v = this.h[9], b = this.h[10], O = this.h[11], N = this.h[12], x = this.h[13], I = this.h[14], T = this.h[15];
                o(this.k.length === r.length);
                for (var B = 0; B < r.length; B += 2) {
                    var C = I, R = T, j = k(y, v), F = S(y, v), U = w(y, v, b, O, N), L = A(y, v, b, O, N, x), D = this.k[B], G = this.k[B + 1], q = r[B], z = r[B + 1], H = m(C, R, j, F, U, L, D, G, q, z), K = g(C, R, j, F, U, L, D, G, q, z);
                    C = M(n, i), R = P(n, i), j = _(n, i, s, a, u), F = E(n, i, s, a, u, l);
                    var W = h(C, R, j, F), V = f(C, R, j, F);
                    I = N, T = x, N = b, x = O, b = y, O = v, y = h(d, p, H, K), v = f(p, p, H, K), 
                    d = u, p = l, u = s, l = a, s = n, a = i, n = h(H, K, W, V), i = f(H, K, W, V);
                }
                c(this.h, 0, n, i), c(this.h, 2, s, a), c(this.h, 4, u, l), c(this.h, 6, d, p), 
                c(this.h, 8, y, v), c(this.h, 10, b, O), c(this.h, 12, N, x), c(this.h, 14, I, T);
            }, b.prototype._digest = function(t) {
                return "hex" === t ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
            };
        },
        7038: (t, e, r) => {
            "use strict";
            var n = r(6436).rotr32;
            function i(t, e, r) {
                return t & e ^ ~t & r;
            }
            function o(t, e, r) {
                return t & e ^ t & r ^ e & r;
            }
            function s(t, e, r) {
                return t ^ e ^ r;
            }
            e.ft_1 = function(t, e, r, n) {
                return 0 === t ? i(e, r, n) : 1 === t || 3 === t ? s(e, r, n) : 2 === t ? o(e, r, n) : void 0;
            }, e.ch32 = i, e.maj32 = o, e.p32 = s, e.s0_256 = function(t) {
                return n(t, 2) ^ n(t, 13) ^ n(t, 22);
            }, e.s1_256 = function(t) {
                return n(t, 6) ^ n(t, 11) ^ n(t, 25);
            }, e.g0_256 = function(t) {
                return n(t, 7) ^ n(t, 18) ^ t >>> 3;
            }, e.g1_256 = function(t) {
                return n(t, 17) ^ n(t, 19) ^ t >>> 10;
            };
        },
        6436: (t, e, r) => {
            "use strict";
            var n = r(9746), i = r(4378);
            function o(t, e) {
                return 55296 == (64512 & t.charCodeAt(e)) && (!(e < 0 || e + 1 >= t.length) && 56320 == (64512 & t.charCodeAt(e + 1)));
            }
            function s(t) {
                return (t >>> 24 | t >>> 8 & 65280 | t << 8 & 16711680 | (255 & t) << 24) >>> 0;
            }
            function a(t) {
                return 1 === t.length ? "0" + t : t;
            }
            function u(t) {
                return 7 === t.length ? "0" + t : 6 === t.length ? "00" + t : 5 === t.length ? "000" + t : 4 === t.length ? "0000" + t : 3 === t.length ? "00000" + t : 2 === t.length ? "000000" + t : 1 === t.length ? "0000000" + t : t;
            }
            e.inherits = i, e.toArray = function(t, e) {
                if (Array.isArray(t)) return t.slice();
                if (!t) return [];
                var r = [];
                if ("string" == typeof t) if (e) {
                    if ("hex" === e) for ((t = t.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t = "0" + t), 
                    i = 0; i < t.length; i += 2) r.push(parseInt(t[i] + t[i + 1], 16));
                } else for (var n = 0, i = 0; i < t.length; i++) {
                    var s = t.charCodeAt(i);
                    s < 128 ? r[n++] = s : s < 2048 ? (r[n++] = s >> 6 | 192, r[n++] = 63 & s | 128) : o(t, i) ? (s = 65536 + ((1023 & s) << 10) + (1023 & t.charCodeAt(++i)), 
                    r[n++] = s >> 18 | 240, r[n++] = s >> 12 & 63 | 128, r[n++] = s >> 6 & 63 | 128, 
                    r[n++] = 63 & s | 128) : (r[n++] = s >> 12 | 224, r[n++] = s >> 6 & 63 | 128, r[n++] = 63 & s | 128);
                } else for (i = 0; i < t.length; i++) r[i] = 0 | t[i];
                return r;
            }, e.toHex = function(t) {
                for (var e = "", r = 0; r < t.length; r++) e += a(t[r].toString(16));
                return e;
            }, e.htonl = s, e.toHex32 = function(t, e) {
                for (var r = "", n = 0; n < t.length; n++) {
                    var i = t[n];
                    "little" === e && (i = s(i)), r += u(i.toString(16));
                }
                return r;
            }, e.zero2 = a, e.zero8 = u, e.join32 = function(t, e, r, i) {
                var o = r - e;
                n(o % 4 == 0);
                for (var s = new Array(o / 4), a = 0, u = e; a < s.length; a++, u += 4) {
                    var l;
                    l = "big" === i ? t[u] << 24 | t[u + 1] << 16 | t[u + 2] << 8 | t[u + 3] : t[u + 3] << 24 | t[u + 2] << 16 | t[u + 1] << 8 | t[u], 
                    s[a] = l >>> 0;
                }
                return s;
            }, e.split32 = function(t, e) {
                for (var r = new Array(4 * t.length), n = 0, i = 0; n < t.length; n++, i += 4) {
                    var o = t[n];
                    "big" === e ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, 
                    r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, 
                    r[i] = 255 & o);
                }
                return r;
            }, e.rotr32 = function(t, e) {
                return t >>> e | t << 32 - e;
            }, e.rotl32 = function(t, e) {
                return t << e | t >>> 32 - e;
            }, e.sum32 = function(t, e) {
                return t + e >>> 0;
            }, e.sum32_3 = function(t, e, r) {
                return t + e + r >>> 0;
            }, e.sum32_4 = function(t, e, r, n) {
                return t + e + r + n >>> 0;
            }, e.sum32_5 = function(t, e, r, n, i) {
                return t + e + r + n + i >>> 0;
            }, e.sum64 = function(t, e, r, n) {
                var i = t[e], o = n + t[e + 1] >>> 0, s = (o < n ? 1 : 0) + r + i;
                t[e] = s >>> 0, t[e + 1] = o;
            }, e.sum64_hi = function(t, e, r, n) {
                return (e + n >>> 0 < e ? 1 : 0) + t + r >>> 0;
            }, e.sum64_lo = function(t, e, r, n) {
                return e + n >>> 0;
            }, e.sum64_4_hi = function(t, e, r, n, i, o, s, a) {
                var u = 0, l = e;
                return u += (l = l + n >>> 0) < e ? 1 : 0, u += (l = l + o >>> 0) < o ? 1 : 0, t + r + i + s + (u += (l = l + a >>> 0) < a ? 1 : 0) >>> 0;
            }, e.sum64_4_lo = function(t, e, r, n, i, o, s, a) {
                return e + n + o + a >>> 0;
            }, e.sum64_5_hi = function(t, e, r, n, i, o, s, a, u, l) {
                var c = 0, h = e;
                return c += (h = h + n >>> 0) < e ? 1 : 0, c += (h = h + o >>> 0) < o ? 1 : 0, c += (h = h + a >>> 0) < a ? 1 : 0, 
                t + r + i + s + u + (c += (h = h + l >>> 0) < l ? 1 : 0) >>> 0;
            }, e.sum64_5_lo = function(t, e, r, n, i, o, s, a, u, l) {
                return e + n + o + a + l >>> 0;
            }, e.rotr64_hi = function(t, e, r) {
                return (e << 32 - r | t >>> r) >>> 0;
            }, e.rotr64_lo = function(t, e, r) {
                return (t << 32 - r | e >>> r) >>> 0;
            }, e.shr64_hi = function(t, e, r) {
                return t >>> r;
            }, e.shr64_lo = function(t, e, r) {
                return (t << 32 - r | e >>> r) >>> 0;
            };
        },
        4378: (t, e, r) => {
            try {
                var n = r(3837);
                if ("function" != typeof n.inherits) throw "";
                t.exports = n.inherits;
            } catch (e) {
                t.exports = r(5717);
            }
        },
        5717: t => {
            "function" == typeof Object.create ? t.exports = function(t, e) {
                e && (t.super_ = e, t.prototype = Object.create(e.prototype, {
                    constructor: {
                        value: t,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }));
            } : t.exports = function(t, e) {
                if (e) {
                    t.super_ = e;
                    var r = function() {};
                    r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
                }
            };
        },
        1094: (t, e, r) => {
            var n;
            !function() {
                "use strict";
                var i = "input is invalid type", o = "object" == typeof window, s = o ? window : {};
                s.JS_SHA3_NO_WINDOW && (o = !1);
                var a = !o && "object" == typeof self;
                !s.JS_SHA3_NO_NODE_JS && "object" == typeof process && process.versions && process.versions.node ? s = global : a && (s = self);
                var u = !s.JS_SHA3_NO_COMMON_JS && t.exports, l = r.amdO, c = !s.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, h = "0123456789abcdef".split(""), f = [ 4, 1024, 262144, 67108864 ], d = [ 0, 8, 16, 24 ], p = [ 1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648 ], m = [ 224, 256, 384, 512 ], g = [ 128, 256 ], y = [ "hex", "buffer", "arrayBuffer", "array", "digest" ], v = {
                    128: 168,
                    256: 136
                };
                !s.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(t) {
                    return "[object Array]" === Object.prototype.toString.call(t);
                }), !c || !s.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(t) {
                    return "object" == typeof t && t.buffer && t.buffer.constructor === ArrayBuffer;
                });
                for (var b = function(t, e, r) {
                    return function(n) {
                        return new C(t, e, t).update(n)[r]();
                    };
                }, w = function(t, e, r) {
                    return function(n, i) {
                        return new C(t, e, i).update(n)[r]();
                    };
                }, A = function(t, e, r) {
                    return function(e, n, i, o) {
                        return k["cshake" + t].update(e, n, i, o)[r]();
                    };
                }, _ = function(t, e, r) {
                    return function(e, n, i, o) {
                        return k["kmac" + t].update(e, n, i, o)[r]();
                    };
                }, E = function(t, e, r, n) {
                    for (var i = 0; i < y.length; ++i) {
                        var o = y[i];
                        t[o] = e(r, n, o);
                    }
                    return t;
                }, M = function(t, e) {
                    var r = b(t, e, "hex");
                    return r.create = function() {
                        return new C(t, e, t);
                    }, r.update = function(t) {
                        return r.create().update(t);
                    }, E(r, b, t, e);
                }, P = [ {
                    name: "keccak",
                    padding: [ 1, 256, 65536, 16777216 ],
                    bits: m,
                    createMethod: M
                }, {
                    name: "sha3",
                    padding: [ 6, 1536, 393216, 100663296 ],
                    bits: m,
                    createMethod: M
                }, {
                    name: "shake",
                    padding: [ 31, 7936, 2031616, 520093696 ],
                    bits: g,
                    createMethod: function(t, e) {
                        var r = w(t, e, "hex");
                        return r.create = function(r) {
                            return new C(t, e, r);
                        }, r.update = function(t, e) {
                            return r.create(e).update(t);
                        }, E(r, w, t, e);
                    }
                }, {
                    name: "cshake",
                    padding: f,
                    bits: g,
                    createMethod: function(t, e) {
                        var r = v[t], n = A(t, 0, "hex");
                        return n.create = function(n, i, o) {
                            return i || o ? new C(t, e, n).bytepad([ i, o ], r) : k["shake" + t].create(n);
                        }, n.update = function(t, e, r, i) {
                            return n.create(e, r, i).update(t);
                        }, E(n, A, t, e);
                    }
                }, {
                    name: "kmac",
                    padding: f,
                    bits: g,
                    createMethod: function(t, e) {
                        var r = v[t], n = _(t, 0, "hex");
                        return n.create = function(n, i, o) {
                            return new R(t, e, i).bytepad([ "KMAC", o ], r).bytepad([ n ], r);
                        }, n.update = function(t, e, r, i) {
                            return n.create(t, r, i).update(e);
                        }, E(n, _, t, e);
                    }
                } ], k = {}, S = [], O = 0; O < P.length; ++O) for (var N = P[O], x = N.bits, I = 0; I < x.length; ++I) {
                    var T = N.name + "_" + x[I];
                    if (S.push(T), k[T] = N.createMethod(x[I], N.padding), "sha3" !== N.name) {
                        var B = N.name + x[I];
                        S.push(B), k[B] = k[T];
                    }
                }
                function C(t, e, r) {
                    this.blocks = [], this.s = [], this.padding = e, this.outputBits = r, this.reset = !0, 
                    this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (t << 1) >> 5, 
                    this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;
                    for (var n = 0; n < 50; ++n) this.s[n] = 0;
                }
                function R(t, e, r) {
                    C.call(this, t, e, r);
                }
                C.prototype.update = function(t) {
                    if (this.finalized) throw new Error("finalize already called");
                    var e, r = typeof t;
                    if ("string" !== r) {
                        if ("object" !== r) throw new Error(i);
                        if (null === t) throw new Error(i);
                        if (c && t.constructor === ArrayBuffer) t = new Uint8Array(t); else if (!(Array.isArray(t) || c && ArrayBuffer.isView(t))) throw new Error(i);
                        e = !0;
                    }
                    for (var n, o, s = this.blocks, a = this.byteCount, u = t.length, l = this.blockCount, h = 0, f = this.s; h < u; ) {
                        if (this.reset) for (this.reset = !1, s[0] = this.block, n = 1; n < l + 1; ++n) s[n] = 0;
                        if (e) for (n = this.start; h < u && n < a; ++h) s[n >> 2] |= t[h] << d[3 & n++]; else for (n = this.start; h < u && n < a; ++h) (o = t.charCodeAt(h)) < 128 ? s[n >> 2] |= o << d[3 & n++] : o < 2048 ? (s[n >> 2] |= (192 | o >> 6) << d[3 & n++], 
                        s[n >> 2] |= (128 | 63 & o) << d[3 & n++]) : o < 55296 || o >= 57344 ? (s[n >> 2] |= (224 | o >> 12) << d[3 & n++], 
                        s[n >> 2] |= (128 | o >> 6 & 63) << d[3 & n++], s[n >> 2] |= (128 | 63 & o) << d[3 & n++]) : (o = 65536 + ((1023 & o) << 10 | 1023 & t.charCodeAt(++h)), 
                        s[n >> 2] |= (240 | o >> 18) << d[3 & n++], s[n >> 2] |= (128 | o >> 12 & 63) << d[3 & n++], 
                        s[n >> 2] |= (128 | o >> 6 & 63) << d[3 & n++], s[n >> 2] |= (128 | 63 & o) << d[3 & n++]);
                        if (this.lastByteIndex = n, n >= a) {
                            for (this.start = n - a, this.block = s[l], n = 0; n < l; ++n) f[n] ^= s[n];
                            j(f), this.reset = !0;
                        } else this.start = n;
                    }
                    return this;
                }, C.prototype.encode = function(t, e) {
                    var r = 255 & t, n = 1, i = [ r ];
                    for (r = 255 & (t >>= 8); r > 0; ) i.unshift(r), r = 255 & (t >>= 8), ++n;
                    return e ? i.push(n) : i.unshift(n), this.update(i), i.length;
                }, C.prototype.encodeString = function(t) {
                    var e, r = typeof t;
                    if ("string" !== r) {
                        if ("object" !== r) throw new Error(i);
                        if (null === t) throw new Error(i);
                        if (c && t.constructor === ArrayBuffer) t = new Uint8Array(t); else if (!(Array.isArray(t) || c && ArrayBuffer.isView(t))) throw new Error(i);
                        e = !0;
                    }
                    var n = 0, o = t.length;
                    if (e) n = o; else for (var s = 0; s < t.length; ++s) {
                        var a = t.charCodeAt(s);
                        a < 128 ? n += 1 : a < 2048 ? n += 2 : a < 55296 || a >= 57344 ? n += 3 : (a = 65536 + ((1023 & a) << 10 | 1023 & t.charCodeAt(++s)), 
                        n += 4);
                    }
                    return n += this.encode(8 * n), this.update(t), n;
                }, C.prototype.bytepad = function(t, e) {
                    for (var r = this.encode(e), n = 0; n < t.length; ++n) r += this.encodeString(t[n]);
                    var i = e - r % e, o = [];
                    return o.length = i, this.update(o), this;
                }, C.prototype.finalize = function() {
                    if (!this.finalized) {
                        this.finalized = !0;
                        var t = this.blocks, e = this.lastByteIndex, r = this.blockCount, n = this.s;
                        if (t[e >> 2] |= this.padding[3 & e], this.lastByteIndex === this.byteCount) for (t[0] = t[r], 
                        e = 1; e < r + 1; ++e) t[e] = 0;
                        for (t[r - 1] |= 2147483648, e = 0; e < r; ++e) n[e] ^= t[e];
                        j(n);
                    }
                }, C.prototype.toString = C.prototype.hex = function() {
                    this.finalize();
                    for (var t, e = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = ""; s < n; ) {
                        for (o = 0; o < e && s < n; ++o, ++s) t = r[o], a += h[t >> 4 & 15] + h[15 & t] + h[t >> 12 & 15] + h[t >> 8 & 15] + h[t >> 20 & 15] + h[t >> 16 & 15] + h[t >> 28 & 15] + h[t >> 24 & 15];
                        s % e == 0 && (j(r), o = 0);
                    }
                    return i && (t = r[o], a += h[t >> 4 & 15] + h[15 & t], i > 1 && (a += h[t >> 12 & 15] + h[t >> 8 & 15]), 
                    i > 2 && (a += h[t >> 20 & 15] + h[t >> 16 & 15])), a;
                }, C.prototype.arrayBuffer = function() {
                    this.finalize();
                    var t, e = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = this.outputBits >> 3;
                    t = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(a);
                    for (var u = new Uint32Array(t); s < n; ) {
                        for (o = 0; o < e && s < n; ++o, ++s) u[s] = r[o];
                        s % e == 0 && j(r);
                    }
                    return i && (u[o] = r[o], t = t.slice(0, a)), t;
                }, C.prototype.buffer = C.prototype.arrayBuffer, C.prototype.digest = C.prototype.array = function() {
                    this.finalize();
                    for (var t, e, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, s = 0, a = 0, u = []; a < i; ) {
                        for (s = 0; s < r && a < i; ++s, ++a) t = a << 2, e = n[s], u[t] = 255 & e, u[t + 1] = e >> 8 & 255, 
                        u[t + 2] = e >> 16 & 255, u[t + 3] = e >> 24 & 255;
                        a % r == 0 && j(n);
                    }
                    return o && (t = a << 2, e = n[s], u[t] = 255 & e, o > 1 && (u[t + 1] = e >> 8 & 255), 
                    o > 2 && (u[t + 2] = e >> 16 & 255)), u;
                }, R.prototype = new C, R.prototype.finalize = function() {
                    return this.encode(this.outputBits, !0), C.prototype.finalize.call(this);
                };
                var j = function(t) {
                    var e, r, n, i, o, s, a, u, l, c, h, f, d, m, g, y, v, b, w, A, _, E, M, P, k, S, O, N, x, I, T, B, C, R, j, F, U, L, D, G, q, z, H, K, W, V, J, Q, X, Y, Z, $, tt, et, rt, nt, it, ot, st, at, ut, lt, ct;
                    for (n = 0; n < 48; n += 2) i = t[0] ^ t[10] ^ t[20] ^ t[30] ^ t[40], o = t[1] ^ t[11] ^ t[21] ^ t[31] ^ t[41], 
                    s = t[2] ^ t[12] ^ t[22] ^ t[32] ^ t[42], a = t[3] ^ t[13] ^ t[23] ^ t[33] ^ t[43], 
                    u = t[4] ^ t[14] ^ t[24] ^ t[34] ^ t[44], l = t[5] ^ t[15] ^ t[25] ^ t[35] ^ t[45], 
                    c = t[6] ^ t[16] ^ t[26] ^ t[36] ^ t[46], h = t[7] ^ t[17] ^ t[27] ^ t[37] ^ t[47], 
                    e = (f = t[8] ^ t[18] ^ t[28] ^ t[38] ^ t[48]) ^ (s << 1 | a >>> 31), r = (d = t[9] ^ t[19] ^ t[29] ^ t[39] ^ t[49]) ^ (a << 1 | s >>> 31), 
                    t[0] ^= e, t[1] ^= r, t[10] ^= e, t[11] ^= r, t[20] ^= e, t[21] ^= r, t[30] ^= e, 
                    t[31] ^= r, t[40] ^= e, t[41] ^= r, e = i ^ (u << 1 | l >>> 31), r = o ^ (l << 1 | u >>> 31), 
                    t[2] ^= e, t[3] ^= r, t[12] ^= e, t[13] ^= r, t[22] ^= e, t[23] ^= r, t[32] ^= e, 
                    t[33] ^= r, t[42] ^= e, t[43] ^= r, e = s ^ (c << 1 | h >>> 31), r = a ^ (h << 1 | c >>> 31), 
                    t[4] ^= e, t[5] ^= r, t[14] ^= e, t[15] ^= r, t[24] ^= e, t[25] ^= r, t[34] ^= e, 
                    t[35] ^= r, t[44] ^= e, t[45] ^= r, e = u ^ (f << 1 | d >>> 31), r = l ^ (d << 1 | f >>> 31), 
                    t[6] ^= e, t[7] ^= r, t[16] ^= e, t[17] ^= r, t[26] ^= e, t[27] ^= r, t[36] ^= e, 
                    t[37] ^= r, t[46] ^= e, t[47] ^= r, e = c ^ (i << 1 | o >>> 31), r = h ^ (o << 1 | i >>> 31), 
                    t[8] ^= e, t[9] ^= r, t[18] ^= e, t[19] ^= r, t[28] ^= e, t[29] ^= r, t[38] ^= e, 
                    t[39] ^= r, t[48] ^= e, t[49] ^= r, m = t[0], g = t[1], V = t[11] << 4 | t[10] >>> 28, 
                    J = t[10] << 4 | t[11] >>> 28, N = t[20] << 3 | t[21] >>> 29, x = t[21] << 3 | t[20] >>> 29, 
                    at = t[31] << 9 | t[30] >>> 23, ut = t[30] << 9 | t[31] >>> 23, z = t[40] << 18 | t[41] >>> 14, 
                    H = t[41] << 18 | t[40] >>> 14, R = t[2] << 1 | t[3] >>> 31, j = t[3] << 1 | t[2] >>> 31, 
                    y = t[13] << 12 | t[12] >>> 20, v = t[12] << 12 | t[13] >>> 20, Q = t[22] << 10 | t[23] >>> 22, 
                    X = t[23] << 10 | t[22] >>> 22, I = t[33] << 13 | t[32] >>> 19, T = t[32] << 13 | t[33] >>> 19, 
                    lt = t[42] << 2 | t[43] >>> 30, ct = t[43] << 2 | t[42] >>> 30, et = t[5] << 30 | t[4] >>> 2, 
                    rt = t[4] << 30 | t[5] >>> 2, F = t[14] << 6 | t[15] >>> 26, U = t[15] << 6 | t[14] >>> 26, 
                    b = t[25] << 11 | t[24] >>> 21, w = t[24] << 11 | t[25] >>> 21, Y = t[34] << 15 | t[35] >>> 17, 
                    Z = t[35] << 15 | t[34] >>> 17, B = t[45] << 29 | t[44] >>> 3, C = t[44] << 29 | t[45] >>> 3, 
                    P = t[6] << 28 | t[7] >>> 4, k = t[7] << 28 | t[6] >>> 4, nt = t[17] << 23 | t[16] >>> 9, 
                    it = t[16] << 23 | t[17] >>> 9, L = t[26] << 25 | t[27] >>> 7, D = t[27] << 25 | t[26] >>> 7, 
                    A = t[36] << 21 | t[37] >>> 11, _ = t[37] << 21 | t[36] >>> 11, $ = t[47] << 24 | t[46] >>> 8, 
                    tt = t[46] << 24 | t[47] >>> 8, K = t[8] << 27 | t[9] >>> 5, W = t[9] << 27 | t[8] >>> 5, 
                    S = t[18] << 20 | t[19] >>> 12, O = t[19] << 20 | t[18] >>> 12, ot = t[29] << 7 | t[28] >>> 25, 
                    st = t[28] << 7 | t[29] >>> 25, G = t[38] << 8 | t[39] >>> 24, q = t[39] << 8 | t[38] >>> 24, 
                    E = t[48] << 14 | t[49] >>> 18, M = t[49] << 14 | t[48] >>> 18, t[0] = m ^ ~y & b, 
                    t[1] = g ^ ~v & w, t[10] = P ^ ~S & N, t[11] = k ^ ~O & x, t[20] = R ^ ~F & L, t[21] = j ^ ~U & D, 
                    t[30] = K ^ ~V & Q, t[31] = W ^ ~J & X, t[40] = et ^ ~nt & ot, t[41] = rt ^ ~it & st, 
                    t[2] = y ^ ~b & A, t[3] = v ^ ~w & _, t[12] = S ^ ~N & I, t[13] = O ^ ~x & T, t[22] = F ^ ~L & G, 
                    t[23] = U ^ ~D & q, t[32] = V ^ ~Q & Y, t[33] = J ^ ~X & Z, t[42] = nt ^ ~ot & at, 
                    t[43] = it ^ ~st & ut, t[4] = b ^ ~A & E, t[5] = w ^ ~_ & M, t[14] = N ^ ~I & B, 
                    t[15] = x ^ ~T & C, t[24] = L ^ ~G & z, t[25] = D ^ ~q & H, t[34] = Q ^ ~Y & $, 
                    t[35] = X ^ ~Z & tt, t[44] = ot ^ ~at & lt, t[45] = st ^ ~ut & ct, t[6] = A ^ ~E & m, 
                    t[7] = _ ^ ~M & g, t[16] = I ^ ~B & P, t[17] = T ^ ~C & k, t[26] = G ^ ~z & R, t[27] = q ^ ~H & j, 
                    t[36] = Y ^ ~$ & K, t[37] = Z ^ ~tt & W, t[46] = at ^ ~lt & et, t[47] = ut ^ ~ct & rt, 
                    t[8] = E ^ ~m & y, t[9] = M ^ ~g & v, t[18] = B ^ ~P & S, t[19] = C ^ ~k & O, t[28] = z ^ ~R & F, 
                    t[29] = H ^ ~j & U, t[38] = $ ^ ~K & V, t[39] = tt ^ ~W & J, t[48] = lt ^ ~et & nt, 
                    t[49] = ct ^ ~rt & it, t[0] ^= p[n], t[1] ^= p[n + 1];
                };
                if (u) t.exports = k; else {
                    for (O = 0; O < S.length; ++O) s[S[O]] = k[S[O]];
                    l && (void 0 === (n = function() {
                        return k;
                    }.call(e, r, e, t)) || (t.exports = n));
                }
            }();
        },
        9746: t => {
            function e(t, e) {
                if (!t) throw new Error(e || "Assertion failed");
            }
            t.exports = e, e.equal = function(t, e, r) {
                if (t != e) throw new Error(r || "Assertion failed: " + t + " != " + e);
            };
        },
        7635: function(t) {
            "use strict";
            !function(e) {
                const r = 2147483647;
                function n(t) {
                    const e = new Uint32Array([ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ]);
                    let r = 1779033703, n = 3144134277, i = 1013904242, o = 2773480762, s = 1359893119, a = 2600822924, u = 528734635, l = 1541459225;
                    const c = new Uint32Array(64);
                    function h(t) {
                        let h = 0, f = t.length;
                        for (;f >= 64; ) {
                            let d, p, m, g, y, v = r, b = n, w = i, A = o, _ = s, E = a, M = u, P = l;
                            for (p = 0; p < 16; p++) m = h + 4 * p, c[p] = (255 & t[m]) << 24 | (255 & t[m + 1]) << 16 | (255 & t[m + 2]) << 8 | 255 & t[m + 3];
                            for (p = 16; p < 64; p++) d = c[p - 2], g = (d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10, 
                            d = c[p - 15], y = (d >>> 7 | d << 25) ^ (d >>> 18 | d << 14) ^ d >>> 3, c[p] = (g + c[p - 7] | 0) + (y + c[p - 16] | 0) | 0;
                            for (p = 0; p < 64; p++) g = (((_ >>> 6 | _ << 26) ^ (_ >>> 11 | _ << 21) ^ (_ >>> 25 | _ << 7)) + (_ & E ^ ~_ & M) | 0) + (P + (e[p] + c[p] | 0) | 0) | 0, 
                            y = ((v >>> 2 | v << 30) ^ (v >>> 13 | v << 19) ^ (v >>> 22 | v << 10)) + (v & b ^ v & w ^ b & w) | 0, 
                            P = M, M = E, E = _, _ = A + g | 0, A = w, w = b, b = v, v = g + y | 0;
                            r = r + v | 0, n = n + b | 0, i = i + w | 0, o = o + A | 0, s = s + _ | 0, a = a + E | 0, 
                            u = u + M | 0, l = l + P | 0, h += 64, f -= 64;
                        }
                    }
                    h(t);
                    let f, d = t.length % 64, p = t.length / 536870912 | 0, m = t.length << 3, g = d < 56 ? 56 : 120, y = t.slice(t.length - d, t.length);
                    for (y.push(128), f = d + 1; f < g; f++) y.push(0);
                    return y.push(p >>> 24 & 255), y.push(p >>> 16 & 255), y.push(p >>> 8 & 255), y.push(p >>> 0 & 255), 
                    y.push(m >>> 24 & 255), y.push(m >>> 16 & 255), y.push(m >>> 8 & 255), y.push(m >>> 0 & 255), 
                    h(y), [ r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, r >>> 0 & 255, n >>> 24 & 255, n >>> 16 & 255, n >>> 8 & 255, n >>> 0 & 255, i >>> 24 & 255, i >>> 16 & 255, i >>> 8 & 255, i >>> 0 & 255, o >>> 24 & 255, o >>> 16 & 255, o >>> 8 & 255, o >>> 0 & 255, s >>> 24 & 255, s >>> 16 & 255, s >>> 8 & 255, s >>> 0 & 255, a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, a >>> 0 & 255, u >>> 24 & 255, u >>> 16 & 255, u >>> 8 & 255, u >>> 0 & 255, l >>> 24 & 255, l >>> 16 & 255, l >>> 8 & 255, l >>> 0 & 255 ];
                }
                function i(t, e, r) {
                    t = t.length <= 64 ? t : n(t);
                    const i = 64 + e.length + 4, o = new Array(i), s = new Array(64);
                    let a, u = [];
                    for (a = 0; a < 64; a++) o[a] = 54;
                    for (a = 0; a < t.length; a++) o[a] ^= t[a];
                    for (a = 0; a < e.length; a++) o[64 + a] = e[a];
                    for (a = i - 4; a < i; a++) o[a] = 0;
                    for (a = 0; a < 64; a++) s[a] = 92;
                    for (a = 0; a < t.length; a++) s[a] ^= t[a];
                    function l() {
                        for (let t = i - 1; t >= i - 4; t--) {
                            if (o[t]++, o[t] <= 255) return;
                            o[t] = 0;
                        }
                    }
                    for (;r >= 32; ) l(), u = u.concat(n(s.concat(n(o)))), r -= 32;
                    return r > 0 && (l(), u = u.concat(n(s.concat(n(o))).slice(0, r))), u;
                }
                function o(t, e, r, n, i) {
                    let o;
                    for (l(t, 16 * (2 * r - 1), i, 0, 16), o = 0; o < 2 * r; o++) u(t, 16 * o, i, 16), 
                    a(i, n), l(i, 0, t, e + 16 * o, 16);
                    for (o = 0; o < r; o++) l(t, e + 2 * o * 16, t, 16 * o, 16);
                    for (o = 0; o < r; o++) l(t, e + 16 * (2 * o + 1), t, 16 * (o + r), 16);
                }
                function s(t, e) {
                    return t << e | t >>> 32 - e;
                }
                function a(t, e) {
                    l(t, 0, e, 0, 16);
                    for (let t = 8; t > 0; t -= 2) e[4] ^= s(e[0] + e[12], 7), e[8] ^= s(e[4] + e[0], 9), 
                    e[12] ^= s(e[8] + e[4], 13), e[0] ^= s(e[12] + e[8], 18), e[9] ^= s(e[5] + e[1], 7), 
                    e[13] ^= s(e[9] + e[5], 9), e[1] ^= s(e[13] + e[9], 13), e[5] ^= s(e[1] + e[13], 18), 
                    e[14] ^= s(e[10] + e[6], 7), e[2] ^= s(e[14] + e[10], 9), e[6] ^= s(e[2] + e[14], 13), 
                    e[10] ^= s(e[6] + e[2], 18), e[3] ^= s(e[15] + e[11], 7), e[7] ^= s(e[3] + e[15], 9), 
                    e[11] ^= s(e[7] + e[3], 13), e[15] ^= s(e[11] + e[7], 18), e[1] ^= s(e[0] + e[3], 7), 
                    e[2] ^= s(e[1] + e[0], 9), e[3] ^= s(e[2] + e[1], 13), e[0] ^= s(e[3] + e[2], 18), 
                    e[6] ^= s(e[5] + e[4], 7), e[7] ^= s(e[6] + e[5], 9), e[4] ^= s(e[7] + e[6], 13), 
                    e[5] ^= s(e[4] + e[7], 18), e[11] ^= s(e[10] + e[9], 7), e[8] ^= s(e[11] + e[10], 9), 
                    e[9] ^= s(e[8] + e[11], 13), e[10] ^= s(e[9] + e[8], 18), e[12] ^= s(e[15] + e[14], 7), 
                    e[13] ^= s(e[12] + e[15], 9), e[14] ^= s(e[13] + e[12], 13), e[15] ^= s(e[14] + e[13], 18);
                    for (let r = 0; r < 16; ++r) t[r] += e[r];
                }
                function u(t, e, r, n) {
                    for (let i = 0; i < n; i++) r[i] ^= t[e + i];
                }
                function l(t, e, r, n, i) {
                    for (;i--; ) r[n++] = t[e++];
                }
                function c(t) {
                    if (!t || "number" != typeof t.length) return !1;
                    for (let e = 0; e < t.length; e++) {
                        const r = t[e];
                        if ("number" != typeof r || r % 1 || r < 0 || r >= 256) return !1;
                    }
                    return !0;
                }
                function h(t, e) {
                    if ("number" != typeof t || t % 1) throw new Error("invalid " + e);
                    return t;
                }
                function f(t, e, n, s, a, f, d) {
                    if (n = h(n, "N"), s = h(s, "r"), a = h(a, "p"), f = h(f, "dkLen"), 0 === n || 0 != (n & n - 1)) throw new Error("N must be power of 2");
                    if (n > r / 128 / s) throw new Error("N too large");
                    if (s > r / 128 / a) throw new Error("r too large");
                    if (!c(t)) throw new Error("password must be an array or buffer");
                    if (t = Array.prototype.slice.call(t), !c(e)) throw new Error("salt must be an array or buffer");
                    e = Array.prototype.slice.call(e);
                    let p = i(t, e, 128 * a * s);
                    const m = new Uint32Array(32 * a * s);
                    for (let t = 0; t < m.length; t++) {
                        const e = 4 * t;
                        m[t] = (255 & p[e + 3]) << 24 | (255 & p[e + 2]) << 16 | (255 & p[e + 1]) << 8 | (255 & p[e + 0]) << 0;
                    }
                    const g = new Uint32Array(64 * s), y = new Uint32Array(32 * s * n), v = 32 * s, b = new Uint32Array(16), w = new Uint32Array(16), A = a * n * 2;
                    let _, E, M = 0, P = null, k = !1, S = 0, O = 0;
                    const N = d ? parseInt(1e3 / s) : 4294967295, x = "undefined" != typeof setImmediate ? setImmediate : setTimeout, I = function() {
                        if (k) return d(new Error("cancelled"), M / A);
                        let e;
                        switch (S) {
                          case 0:
                            E = 32 * O * s, l(m, E, g, 0, v), S = 1, _ = 0;

                          case 1:
                            e = n - _, e > N && (e = N);
                            for (let t = 0; t < e; t++) l(g, 0, y, (_ + t) * v, v), o(g, v, s, b, w);
                            if (_ += e, M += e, d) {
                                const t = parseInt(1e3 * M / A);
                                if (t !== P) {
                                    if (k = d(null, M / A), k) break;
                                    P = t;
                                }
                            }
                            if (_ < n) break;
                            _ = 0, S = 2;

                          case 2:
                            e = n - _, e > N && (e = N);
                            for (let t = 0; t < e; t++) {
                                const t = g[16 * (2 * s - 1)] & n - 1;
                                u(y, t * v, g, v), o(g, v, s, b, w);
                            }
                            if (_ += e, M += e, d) {
                                const t = parseInt(1e3 * M / A);
                                if (t !== P) {
                                    if (k = d(null, M / A), k) break;
                                    P = t;
                                }
                            }
                            if (_ < n) break;
                            if (l(g, 0, m, E, v), O++, O < a) {
                                S = 0;
                                break;
                            }
                            p = [];
                            for (let t = 0; t < m.length; t++) p.push(m[t] >> 0 & 255), p.push(m[t] >> 8 & 255), 
                            p.push(m[t] >> 16 & 255), p.push(m[t] >> 24 & 255);
                            const r = i(t, p, f);
                            return d && d(null, 1, r), r;
                        }
                        d && x(I);
                    };
                    if (!d) for (;;) {
                        const t = I();
                        if (null != t) return t;
                    }
                    I();
                }
                const d = {
                    scrypt: function(t, e, r, n, i, o, s) {
                        return new Promise((function(a, u) {
                            let l = 0;
                            s && s(0), f(t, e, r, n, i, o, (function(t, e, r) {
                                if (t) u(t); else if (r) s && 1 !== l && s(1), a(new Uint8Array(r)); else if (s && e !== l) return l = e, 
                                s(e);
                            }));
                        }));
                    },
                    syncScrypt: function(t, e, r, n, i, o) {
                        return new Uint8Array(f(t, e, r, n, i, o));
                    }
                };
                t.exports = d;
            }();
        },
        655: (t, e, r) => {
            "use strict";
            r.r(e), r.d(e, {
                __assign: () => o,
                __asyncDelegator: () => P,
                __asyncGenerator: () => M,
                __asyncValues: () => k,
                __await: () => E,
                __awaiter: () => p,
                __classPrivateFieldGet: () => I,
                __classPrivateFieldIn: () => B,
                __classPrivateFieldSet: () => T,
                __createBinding: () => g,
                __decorate: () => a,
                __esDecorate: () => l,
                __exportStar: () => y,
                __extends: () => i,
                __generator: () => m,
                __importDefault: () => x,
                __importStar: () => N,
                __makeTemplateObject: () => S,
                __metadata: () => d,
                __param: () => u,
                __propKey: () => h,
                __read: () => b,
                __rest: () => s,
                __runInitializers: () => c,
                __setFunctionName: () => f,
                __spread: () => w,
                __spreadArray: () => _,
                __spreadArrays: () => A,
                __values: () => v,
                default: () => C
            });
            var n = function(t, e) {
                return n = Object.setPrototypeOf || {
                    __proto__: []
                } instanceof Array && function(t, e) {
                    t.__proto__ = e;
                } || function(t, e) {
                    for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                }, n(t, e);
            };
            function i(t, e) {
                if ("function" != typeof e && null !== e) throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
                function r() {
                    this.constructor = t;
                }
                n(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, 
                new r);
            }
            var o = function() {
                return o = Object.assign || function(t) {
                    for (var e, r = 1, n = arguments.length; r < n; r++) for (var i in e = arguments[r]) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
                    return t;
                }, o.apply(this, arguments);
            };
            function s(t, e) {
                var r = {};
                for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e.indexOf(n) < 0 && (r[n] = t[n]);
                if (null != t && "function" == typeof Object.getOwnPropertySymbols) {
                    var i = 0;
                    for (n = Object.getOwnPropertySymbols(t); i < n.length; i++) e.indexOf(n[i]) < 0 && Object.prototype.propertyIsEnumerable.call(t, n[i]) && (r[n[i]] = t[n[i]]);
                }
                return r;
            }
            function a(t, e, r, n) {
                var i, o = arguments.length, s = o < 3 ? e : null === n ? n = Object.getOwnPropertyDescriptor(e, r) : n;
                if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) s = Reflect.decorate(t, e, r, n); else for (var a = t.length - 1; a >= 0; a--) (i = t[a]) && (s = (o < 3 ? i(s) : o > 3 ? i(e, r, s) : i(e, r)) || s);
                return o > 3 && s && Object.defineProperty(e, r, s), s;
            }
            function u(t, e) {
                return function(r, n) {
                    e(r, n, t);
                };
            }
            function l(t, e, r, n, i, o) {
                function s(t) {
                    if (void 0 !== t && "function" != typeof t) throw new TypeError("Function expected");
                    return t;
                }
                for (var a, u = n.kind, l = "getter" === u ? "get" : "setter" === u ? "set" : "value", c = !e && t ? n.static ? t : t.prototype : null, h = e || (c ? Object.getOwnPropertyDescriptor(c, n.name) : {}), f = !1, d = r.length - 1; d >= 0; d--) {
                    var p = {};
                    for (var m in n) p[m] = "access" === m ? {} : n[m];
                    for (var m in n.access) p.access[m] = n.access[m];
                    p.addInitializer = function(t) {
                        if (f) throw new TypeError("Cannot add initializers after decoration has completed");
                        o.push(s(t || null));
                    };
                    var g = (0, r[d])("accessor" === u ? {
                        get: h.get,
                        set: h.set
                    } : h[l], p);
                    if ("accessor" === u) {
                        if (void 0 === g) continue;
                        if (null === g || "object" != typeof g) throw new TypeError("Object expected");
                        (a = s(g.get)) && (h.get = a), (a = s(g.set)) && (h.set = a), (a = s(g.init)) && i.unshift(a);
                    } else (a = s(g)) && ("field" === u ? i.unshift(a) : h[l] = a);
                }
                c && Object.defineProperty(c, n.name, h), f = !0;
            }
            function c(t, e, r) {
                for (var n = arguments.length > 2, i = 0; i < e.length; i++) r = n ? e[i].call(t, r) : e[i].call(t);
                return n ? r : void 0;
            }
            function h(t) {
                return "symbol" == typeof t ? t : "".concat(t);
            }
            function f(t, e, r) {
                return "symbol" == typeof e && (e = e.description ? "[".concat(e.description, "]") : ""), 
                Object.defineProperty(t, "name", {
                    configurable: !0,
                    value: r ? "".concat(r, " ", e) : e
                });
            }
            function d(t, e) {
                if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(t, e);
            }
            function p(t, e, r, n) {
                return new (r || (r = Promise))((function(i, o) {
                    function s(t) {
                        try {
                            u(n.next(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function a(t) {
                        try {
                            u(n.throw(t));
                        } catch (t) {
                            o(t);
                        }
                    }
                    function u(t) {
                        var e;
                        t.done ? i(t.value) : (e = t.value, e instanceof r ? e : new r((function(t) {
                            t(e);
                        }))).then(s, a);
                    }
                    u((n = n.apply(t, e || [])).next());
                }));
            }
            function m(t, e) {
                var r, n, i, o, s = {
                    label: 0,
                    sent: function() {
                        if (1 & i[0]) throw i[1];
                        return i[1];
                    },
                    trys: [],
                    ops: []
                };
                return o = {
                    next: a(0),
                    throw: a(1),
                    return: a(2)
                }, "function" == typeof Symbol && (o[Symbol.iterator] = function() {
                    return this;
                }), o;
                function a(a) {
                    return function(u) {
                        return function(a) {
                            if (r) throw new TypeError("Generator is already executing.");
                            for (;o && (o = 0, a[0] && (s = 0)), s; ) try {
                                if (r = 1, n && (i = 2 & a[0] ? n.return : a[0] ? n.throw || ((i = n.return) && i.call(n), 
                                0) : n.next) && !(i = i.call(n, a[1])).done) return i;
                                switch (n = 0, i && (a = [ 2 & a[0], i.value ]), a[0]) {
                                  case 0:
                                  case 1:
                                    i = a;
                                    break;

                                  case 4:
                                    return s.label++, {
                                        value: a[1],
                                        done: !1
                                    };

                                  case 5:
                                    s.label++, n = a[1], a = [ 0 ];
                                    continue;

                                  case 7:
                                    a = s.ops.pop(), s.trys.pop();
                                    continue;

                                  default:
                                    if (!(i = s.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                                        s = 0;
                                        continue;
                                    }
                                    if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                                        s.label = a[1];
                                        break;
                                    }
                                    if (6 === a[0] && s.label < i[1]) {
                                        s.label = i[1], i = a;
                                        break;
                                    }
                                    if (i && s.label < i[2]) {
                                        s.label = i[2], s.ops.push(a);
                                        break;
                                    }
                                    i[2] && s.ops.pop(), s.trys.pop();
                                    continue;
                                }
                                a = e.call(t, s);
                            } catch (t) {
                                a = [ 6, t ], n = 0;
                            } finally {
                                r = i = 0;
                            }
                            if (5 & a[0]) throw a[1];
                            return {
                                value: a[0] ? a[1] : void 0,
                                done: !0
                            };
                        }([ a, u ]);
                    };
                }
            }
            var g = Object.create ? function(t, e, r, n) {
                void 0 === n && (n = r);
                var i = Object.getOwnPropertyDescriptor(e, r);
                i && !("get" in i ? !e.__esModule : i.writable || i.configurable) || (i = {
                    enumerable: !0,
                    get: function() {
                        return e[r];
                    }
                }), Object.defineProperty(t, n, i);
            } : function(t, e, r, n) {
                void 0 === n && (n = r), t[n] = e[r];
            };
            function y(t, e) {
                for (var r in t) "default" === r || Object.prototype.hasOwnProperty.call(e, r) || g(e, t, r);
            }
            function v(t) {
                var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
                if (r) return r.call(t);
                if (t && "number" == typeof t.length) return {
                    next: function() {
                        return t && n >= t.length && (t = void 0), {
                            value: t && t[n++],
                            done: !t
                        };
                    }
                };
                throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }
            function b(t, e) {
                var r = "function" == typeof Symbol && t[Symbol.iterator];
                if (!r) return t;
                var n, i, o = r.call(t), s = [];
                try {
                    for (;(void 0 === e || e-- > 0) && !(n = o.next()).done; ) s.push(n.value);
                } catch (t) {
                    i = {
                        error: t
                    };
                } finally {
                    try {
                        n && !n.done && (r = o.return) && r.call(o);
                    } finally {
                        if (i) throw i.error;
                    }
                }
                return s;
            }
            function w() {
                for (var t = [], e = 0; e < arguments.length; e++) t = t.concat(b(arguments[e]));
                return t;
            }
            function A() {
                for (var t = 0, e = 0, r = arguments.length; e < r; e++) t += arguments[e].length;
                var n = Array(t), i = 0;
                for (e = 0; e < r; e++) for (var o = arguments[e], s = 0, a = o.length; s < a; s++, 
                i++) n[i] = o[s];
                return n;
            }
            function _(t, e, r) {
                if (r || 2 === arguments.length) for (var n, i = 0, o = e.length; i < o; i++) !n && i in e || (n || (n = Array.prototype.slice.call(e, 0, i)), 
                n[i] = e[i]);
                return t.concat(n || Array.prototype.slice.call(e));
            }
            function E(t) {
                return this instanceof E ? (this.v = t, this) : new E(t);
            }
            function M(t, e, r) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var n, i = r.apply(t, e || []), o = [];
                return n = {}, s("next"), s("throw"), s("return"), n[Symbol.asyncIterator] = function() {
                    return this;
                }, n;
                function s(t) {
                    i[t] && (n[t] = function(e) {
                        return new Promise((function(r, n) {
                            o.push([ t, e, r, n ]) > 1 || a(t, e);
                        }));
                    });
                }
                function a(t, e) {
                    try {
                        (r = i[t](e)).value instanceof E ? Promise.resolve(r.value.v).then(u, l) : c(o[0][2], r);
                    } catch (t) {
                        c(o[0][3], t);
                    }
                    var r;
                }
                function u(t) {
                    a("next", t);
                }
                function l(t) {
                    a("throw", t);
                }
                function c(t, e) {
                    t(e), o.shift(), o.length && a(o[0][0], o[0][1]);
                }
            }
            function P(t) {
                var e, r;
                return e = {}, n("next"), n("throw", (function(t) {
                    throw t;
                })), n("return"), e[Symbol.iterator] = function() {
                    return this;
                }, e;
                function n(n, i) {
                    e[n] = t[n] ? function(e) {
                        return (r = !r) ? {
                            value: E(t[n](e)),
                            done: !1
                        } : i ? i(e) : e;
                    } : i;
                }
            }
            function k(t) {
                if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                var e, r = t[Symbol.asyncIterator];
                return r ? r.call(t) : (t = v(t), e = {}, n("next"), n("throw"), n("return"), e[Symbol.asyncIterator] = function() {
                    return this;
                }, e);
                function n(r) {
                    e[r] = t[r] && function(e) {
                        return new Promise((function(n, i) {
                            (function(t, e, r, n) {
                                Promise.resolve(n).then((function(e) {
                                    t({
                                        value: e,
                                        done: r
                                    });
                                }), e);
                            })(n, i, (e = t[r](e)).done, e.value);
                        }));
                    };
                }
            }
            function S(t, e) {
                return Object.defineProperty ? Object.defineProperty(t, "raw", {
                    value: e
                }) : t.raw = e, t;
            }
            var O = Object.create ? function(t, e) {
                Object.defineProperty(t, "default", {
                    enumerable: !0,
                    value: e
                });
            } : function(t, e) {
                t.default = e;
            };
            function N(t) {
                if (t && t.__esModule) return t;
                var e = {};
                if (null != t) for (var r in t) "default" !== r && Object.prototype.hasOwnProperty.call(t, r) && g(e, t, r);
                return O(e, t), e;
            }
            function x(t) {
                return t && t.__esModule ? t : {
                    default: t
                };
            }
            function I(t, e, r, n) {
                if ("a" === r && !n) throw new TypeError("Private accessor was defined without a getter");
                if ("function" == typeof e ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
                return "m" === r ? n : "a" === r ? n.call(t) : n ? n.value : e.get(t);
            }
            function T(t, e, r, n, i) {
                if ("m" === n) throw new TypeError("Private method is not writable");
                if ("a" === n && !i) throw new TypeError("Private accessor was defined without a setter");
                if ("function" == typeof e ? t !== e || !i : !e.has(t)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
                return "a" === n ? i.call(t, r) : i ? i.value = r : e.set(t, r), r;
            }
            function B(t, e) {
                if (null === e || "object" != typeof e && "function" != typeof e) throw new TypeError("Cannot use 'in' operator on non-object");
                return "function" == typeof t ? e === t : t.has(e);
            }
            const C = {
                __extends: i,
                __assign: o,
                __rest: s,
                __decorate: a,
                __param: u,
                __metadata: d,
                __awaiter: p,
                __generator: m,
                __createBinding: g,
                __exportStar: y,
                __values: v,
                __read: b,
                __spread: w,
                __spreadArrays: A,
                __spreadArray: _,
                __await: E,
                __asyncGenerator: M,
                __asyncDelegator: P,
                __asyncValues: k,
                __makeTemplateObject: S,
                __importStar: N,
                __importDefault: x,
                __classPrivateFieldGet: I,
                __classPrivateFieldSet: T,
                __classPrivateFieldIn: B
            };
        },
        3785: function(t, e, r) {
            !function(t, e) {
                "use strict";
                function n(t, e) {
                    if (!t) throw new Error(e || "Assertion failed");
                }
                function i(t, e) {
                    t.super_ = e;
                    var r = function() {};
                    r.prototype = e.prototype, t.prototype = new r, t.prototype.constructor = t;
                }
                function o(t, e, r) {
                    if (o.isBN(t)) return t;
                    this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ("le" !== e && "be" !== e || (r = e, 
                    e = 10), this._init(t || 0, e || 10, r || "be"));
                }
                var s;
                "object" == typeof t ? t.exports = o : e.BN = o, o.BN = o, o.wordSize = 26;
                try {
                    s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r(4300).Buffer;
                } catch (t) {}
                function a(t, e) {
                    var r = t.charCodeAt(e);
                    return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void n(!1, "Invalid character in " + t);
                }
                function u(t, e, r) {
                    var n = a(t, r);
                    return r - 1 >= e && (n |= a(t, r - 1) << 4), n;
                }
                function l(t, e, r, i) {
                    for (var o = 0, s = 0, a = Math.min(t.length, r), u = e; u < a; u++) {
                        var l = t.charCodeAt(u) - 48;
                        o *= i, s = l >= 49 ? l - 49 + 10 : l >= 17 ? l - 17 + 10 : l, n(l >= 0 && s < i, "Invalid character"), 
                        o += s;
                    }
                    return o;
                }
                function c(t, e) {
                    t.words = e.words, t.length = e.length, t.negative = e.negative, t.red = e.red;
                }
                if (o.isBN = function(t) {
                    return t instanceof o || null !== t && "object" == typeof t && t.constructor.wordSize === o.wordSize && Array.isArray(t.words);
                }, o.max = function(t, e) {
                    return t.cmp(e) > 0 ? t : e;
                }, o.min = function(t, e) {
                    return t.cmp(e) < 0 ? t : e;
                }, o.prototype._init = function(t, e, r) {
                    if ("number" == typeof t) return this._initNumber(t, e, r);
                    if ("object" == typeof t) return this._initArray(t, e, r);
                    "hex" === e && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
                    var i = 0;
                    "-" === (t = t.toString().replace(/\s+/g, ""))[0] && (i++, this.negative = 1), i < t.length && (16 === e ? this._parseHex(t, i, r) : (this._parseBase(t, e, i), 
                    "le" === r && this._initArray(this.toArray(), e, r)));
                }, o.prototype._initNumber = function(t, e, r) {
                    t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [ 67108863 & t ], 
                    this.length = 1) : t < 4503599627370496 ? (this.words = [ 67108863 & t, t / 67108864 & 67108863 ], 
                    this.length = 2) : (n(t < 9007199254740992), this.words = [ 67108863 & t, t / 67108864 & 67108863, 1 ], 
                    this.length = 3), "le" === r && this._initArray(this.toArray(), e, r);
                }, o.prototype._initArray = function(t, e, r) {
                    if (n("number" == typeof t.length), t.length <= 0) return this.words = [ 0 ], this.length = 1, 
                    this;
                    this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
                    for (var i = 0; i < this.length; i++) this.words[i] = 0;
                    var o, s, a = 0;
                    if ("be" === r) for (i = t.length - 1, o = 0; i >= 0; i -= 3) s = t[i] | t[i - 1] << 8 | t[i - 2] << 16, 
                    this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, 
                    (a += 24) >= 26 && (a -= 26, o++); else if ("le" === r) for (i = 0, o = 0; i < t.length; i += 3) s = t[i] | t[i + 1] << 8 | t[i + 2] << 16, 
                    this.words[o] |= s << a & 67108863, this.words[o + 1] = s >>> 26 - a & 67108863, 
                    (a += 24) >= 26 && (a -= 26, o++);
                    return this._strip();
                }, o.prototype._parseHex = function(t, e, r) {
                    this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
                    for (var n = 0; n < this.length; n++) this.words[n] = 0;
                    var i, o = 0, s = 0;
                    if ("be" === r) for (n = t.length - 1; n >= e; n -= 2) i = u(t, e, n) << o, this.words[s] |= 67108863 & i, 
                    o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8; else for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) i = u(t, e, n) << o, 
                    this.words[s] |= 67108863 & i, o >= 18 ? (o -= 18, s += 1, this.words[s] |= i >>> 26) : o += 8;
                    this._strip();
                }, o.prototype._parseBase = function(t, e, r) {
                    this.words = [ 0 ], this.length = 1;
                    for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
                    n--, i = i / e | 0;
                    for (var o = t.length - r, s = o % n, a = Math.min(o, o - s) + r, u = 0, c = r; c < a; c += n) u = l(t, c, c + n, e), 
                    this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                    if (0 !== s) {
                        var h = 1;
                        for (u = l(t, c, t.length, e), c = 0; c < s; c++) h *= e;
                        this.imuln(h), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                    }
                    this._strip();
                }, o.prototype.copy = function(t) {
                    t.words = new Array(this.length);
                    for (var e = 0; e < this.length; e++) t.words[e] = this.words[e];
                    t.length = this.length, t.negative = this.negative, t.red = this.red;
                }, o.prototype._move = function(t) {
                    c(t, this);
                }, o.prototype.clone = function() {
                    var t = new o(null);
                    return this.copy(t), t;
                }, o.prototype._expand = function(t) {
                    for (;this.length < t; ) this.words[this.length++] = 0;
                    return this;
                }, o.prototype._strip = function() {
                    for (;this.length > 1 && 0 === this.words[this.length - 1]; ) this.length--;
                    return this._normSign();
                }, o.prototype._normSign = function() {
                    return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
                }, "undefined" != typeof Symbol && "function" == typeof Symbol.for) try {
                    o.prototype[Symbol.for("nodejs.util.inspect.custom")] = h;
                } catch (t) {
                    o.prototype.inspect = h;
                } else o.prototype.inspect = h;
                function h() {
                    return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                }
                var f = [ "", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000" ], d = [ 0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ], p = [ 0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176 ];
                o.prototype.toString = function(t, e) {
                    var r;
                    if (e = 0 | e || 1, 16 === (t = t || 10) || "hex" === t) {
                        r = "";
                        for (var i = 0, o = 0, s = 0; s < this.length; s++) {
                            var a = this.words[s], u = (16777215 & (a << i | o)).toString(16);
                            o = a >>> 24 - i & 16777215, (i += 2) >= 26 && (i -= 26, s--), r = 0 !== o || s !== this.length - 1 ? f[6 - u.length] + u + r : u + r;
                        }
                        for (0 !== o && (r = o.toString(16) + r); r.length % e != 0; ) r = "0" + r;
                        return 0 !== this.negative && (r = "-" + r), r;
                    }
                    if (t === (0 | t) && t >= 2 && t <= 36) {
                        var l = d[t], c = p[t];
                        r = "";
                        var h = this.clone();
                        for (h.negative = 0; !h.isZero(); ) {
                            var m = h.modrn(c).toString(t);
                            r = (h = h.idivn(c)).isZero() ? m + r : f[l - m.length] + m + r;
                        }
                        for (this.isZero() && (r = "0" + r); r.length % e != 0; ) r = "0" + r;
                        return 0 !== this.negative && (r = "-" + r), r;
                    }
                    n(!1, "Base should be between 2 and 36");
                }, o.prototype.toNumber = function() {
                    var t = this.words[0];
                    return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), 
                    0 !== this.negative ? -t : t;
                }, o.prototype.toJSON = function() {
                    return this.toString(16, 2);
                }, s && (o.prototype.toBuffer = function(t, e) {
                    return this.toArrayLike(s, t, e);
                }), o.prototype.toArray = function(t, e) {
                    return this.toArrayLike(Array, t, e);
                };
                function m(t, e, r) {
                    r.negative = e.negative ^ t.negative;
                    var n = t.length + e.length | 0;
                    r.length = n, n = n - 1 | 0;
                    var i = 0 | t.words[0], o = 0 | e.words[0], s = i * o, a = 67108863 & s, u = s / 67108864 | 0;
                    r.words[0] = a;
                    for (var l = 1; l < n; l++) {
                        for (var c = u >>> 26, h = 67108863 & u, f = Math.min(l, e.length - 1), d = Math.max(0, l - t.length + 1); d <= f; d++) {
                            var p = l - d | 0;
                            c += (s = (i = 0 | t.words[p]) * (o = 0 | e.words[d]) + h) / 67108864 | 0, h = 67108863 & s;
                        }
                        r.words[l] = 0 | h, u = 0 | c;
                    }
                    return 0 !== u ? r.words[l] = 0 | u : r.length--, r._strip();
                }
                o.prototype.toArrayLike = function(t, e, r) {
                    this._strip();
                    var i = this.byteLength(), o = r || Math.max(1, i);
                    n(i <= o, "byte array longer than desired length"), n(o > 0, "Requested array length <= 0");
                    var s = function(t, e) {
                        return t.allocUnsafe ? t.allocUnsafe(e) : new t(e);
                    }(t, o);
                    return this["_toArrayLike" + ("le" === e ? "LE" : "BE")](s, i), s;
                }, o.prototype._toArrayLikeLE = function(t, e) {
                    for (var r = 0, n = 0, i = 0, o = 0; i < this.length; i++) {
                        var s = this.words[i] << o | n;
                        t[r++] = 255 & s, r < t.length && (t[r++] = s >> 8 & 255), r < t.length && (t[r++] = s >> 16 & 255), 
                        6 === o ? (r < t.length && (t[r++] = s >> 24 & 255), n = 0, o = 0) : (n = s >>> 24, 
                        o += 2);
                    }
                    if (r < t.length) for (t[r++] = n; r < t.length; ) t[r++] = 0;
                }, o.prototype._toArrayLikeBE = function(t, e) {
                    for (var r = t.length - 1, n = 0, i = 0, o = 0; i < this.length; i++) {
                        var s = this.words[i] << o | n;
                        t[r--] = 255 & s, r >= 0 && (t[r--] = s >> 8 & 255), r >= 0 && (t[r--] = s >> 16 & 255), 
                        6 === o ? (r >= 0 && (t[r--] = s >> 24 & 255), n = 0, o = 0) : (n = s >>> 24, o += 2);
                    }
                    if (r >= 0) for (t[r--] = n; r >= 0; ) t[r--] = 0;
                }, Math.clz32 ? o.prototype._countBits = function(t) {
                    return 32 - Math.clz32(t);
                } : o.prototype._countBits = function(t) {
                    var e = t, r = 0;
                    return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, 
                    e >>>= 4), e >= 2 && (r += 2, e >>>= 2), r + e;
                }, o.prototype._zeroBits = function(t) {
                    if (0 === t) return 26;
                    var e = t, r = 0;
                    return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 
                    0 == (15 & e) && (r += 4, e >>>= 4), 0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, 
                    r;
                }, o.prototype.bitLength = function() {
                    var t = this.words[this.length - 1], e = this._countBits(t);
                    return 26 * (this.length - 1) + e;
                }, o.prototype.zeroBits = function() {
                    if (this.isZero()) return 0;
                    for (var t = 0, e = 0; e < this.length; e++) {
                        var r = this._zeroBits(this.words[e]);
                        if (t += r, 26 !== r) break;
                    }
                    return t;
                }, o.prototype.byteLength = function() {
                    return Math.ceil(this.bitLength() / 8);
                }, o.prototype.toTwos = function(t) {
                    return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
                }, o.prototype.fromTwos = function(t) {
                    return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
                }, o.prototype.isNeg = function() {
                    return 0 !== this.negative;
                }, o.prototype.neg = function() {
                    return this.clone().ineg();
                }, o.prototype.ineg = function() {
                    return this.isZero() || (this.negative ^= 1), this;
                }, o.prototype.iuor = function(t) {
                    for (;this.length < t.length; ) this.words[this.length++] = 0;
                    for (var e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
                    return this._strip();
                }, o.prototype.ior = function(t) {
                    return n(0 == (this.negative | t.negative)), this.iuor(t);
                }, o.prototype.or = function(t) {
                    return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
                }, o.prototype.uor = function(t) {
                    return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
                }, o.prototype.iuand = function(t) {
                    var e;
                    e = this.length > t.length ? t : this;
                    for (var r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
                    return this.length = e.length, this._strip();
                }, o.prototype.iand = function(t) {
                    return n(0 == (this.negative | t.negative)), this.iuand(t);
                }, o.prototype.and = function(t) {
                    return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
                }, o.prototype.uand = function(t) {
                    return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
                }, o.prototype.iuxor = function(t) {
                    var e, r;
                    this.length > t.length ? (e = this, r = t) : (e = t, r = this);
                    for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
                    if (this !== e) for (;n < e.length; n++) this.words[n] = e.words[n];
                    return this.length = e.length, this._strip();
                }, o.prototype.ixor = function(t) {
                    return n(0 == (this.negative | t.negative)), this.iuxor(t);
                }, o.prototype.xor = function(t) {
                    return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
                }, o.prototype.uxor = function(t) {
                    return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
                }, o.prototype.inotn = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e = 0 | Math.ceil(t / 26), r = t % 26;
                    this._expand(e), r > 0 && e--;
                    for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
                    return r > 0 && (this.words[i] = ~this.words[i] & 67108863 >> 26 - r), this._strip();
                }, o.prototype.notn = function(t) {
                    return this.clone().inotn(t);
                }, o.prototype.setn = function(t, e) {
                    n("number" == typeof t && t >= 0);
                    var r = t / 26 | 0, i = t % 26;
                    return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << i : this.words[r] & ~(1 << i), 
                    this._strip();
                }, o.prototype.iadd = function(t) {
                    var e, r, n;
                    if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), 
                    this.negative ^= 1, this._normSign();
                    if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), 
                    t.negative = 1, e._normSign();
                    this.length > t.length ? (r = this, n = t) : (r = t, n = this);
                    for (var i = 0, o = 0; o < n.length; o++) e = (0 | r.words[o]) + (0 | n.words[o]) + i, 
                    this.words[o] = 67108863 & e, i = e >>> 26;
                    for (;0 !== i && o < r.length; o++) e = (0 | r.words[o]) + i, this.words[o] = 67108863 & e, 
                    i = e >>> 26;
                    if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++; else if (r !== this) for (;o < r.length; o++) this.words[o] = r.words[o];
                    return this;
                }, o.prototype.add = function(t) {
                    var e;
                    return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), 
                    t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, 
                    e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
                }, o.prototype.isub = function(t) {
                    if (0 !== t.negative) {
                        t.negative = 0;
                        var e = this.iadd(t);
                        return t.negative = 1, e._normSign();
                    }
                    if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, 
                    this._normSign();
                    var r, n, i = this.cmp(t);
                    if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
                    i > 0 ? (r = this, n = t) : (r = t, n = this);
                    for (var o = 0, s = 0; s < n.length; s++) o = (e = (0 | r.words[s]) - (0 | n.words[s]) + o) >> 26, 
                    this.words[s] = 67108863 & e;
                    for (;0 !== o && s < r.length; s++) o = (e = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & e;
                    if (0 === o && s < r.length && r !== this) for (;s < r.length; s++) this.words[s] = r.words[s];
                    return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), 
                    this._strip();
                }, o.prototype.sub = function(t) {
                    return this.clone().isub(t);
                };
                var g = function(t, e, r) {
                    var n, i, o, s = t.words, a = e.words, u = r.words, l = 0, c = 0 | s[0], h = 8191 & c, f = c >>> 13, d = 0 | s[1], p = 8191 & d, m = d >>> 13, g = 0 | s[2], y = 8191 & g, v = g >>> 13, b = 0 | s[3], w = 8191 & b, A = b >>> 13, _ = 0 | s[4], E = 8191 & _, M = _ >>> 13, P = 0 | s[5], k = 8191 & P, S = P >>> 13, O = 0 | s[6], N = 8191 & O, x = O >>> 13, I = 0 | s[7], T = 8191 & I, B = I >>> 13, C = 0 | s[8], R = 8191 & C, j = C >>> 13, F = 0 | s[9], U = 8191 & F, L = F >>> 13, D = 0 | a[0], G = 8191 & D, q = D >>> 13, z = 0 | a[1], H = 8191 & z, K = z >>> 13, W = 0 | a[2], V = 8191 & W, J = W >>> 13, Q = 0 | a[3], X = 8191 & Q, Y = Q >>> 13, Z = 0 | a[4], $ = 8191 & Z, tt = Z >>> 13, et = 0 | a[5], rt = 8191 & et, nt = et >>> 13, it = 0 | a[6], ot = 8191 & it, st = it >>> 13, at = 0 | a[7], ut = 8191 & at, lt = at >>> 13, ct = 0 | a[8], ht = 8191 & ct, ft = ct >>> 13, dt = 0 | a[9], pt = 8191 & dt, mt = dt >>> 13;
                    r.negative = t.negative ^ e.negative, r.length = 19;
                    var gt = (l + (n = Math.imul(h, G)) | 0) + ((8191 & (i = (i = Math.imul(h, q)) + Math.imul(f, G) | 0)) << 13) | 0;
                    l = ((o = Math.imul(f, q)) + (i >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, 
                    n = Math.imul(p, G), i = (i = Math.imul(p, q)) + Math.imul(m, G) | 0, o = Math.imul(m, q);
                    var yt = (l + (n = n + Math.imul(h, H) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, K) | 0) + Math.imul(f, H) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, K) | 0) + (i >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, 
                    n = Math.imul(y, G), i = (i = Math.imul(y, q)) + Math.imul(v, G) | 0, o = Math.imul(v, q), 
                    n = n + Math.imul(p, H) | 0, i = (i = i + Math.imul(p, K) | 0) + Math.imul(m, H) | 0, 
                    o = o + Math.imul(m, K) | 0;
                    var vt = (l + (n = n + Math.imul(h, V) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, J) | 0) + Math.imul(f, V) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, J) | 0) + (i >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, 
                    n = Math.imul(w, G), i = (i = Math.imul(w, q)) + Math.imul(A, G) | 0, o = Math.imul(A, q), 
                    n = n + Math.imul(y, H) | 0, i = (i = i + Math.imul(y, K) | 0) + Math.imul(v, H) | 0, 
                    o = o + Math.imul(v, K) | 0, n = n + Math.imul(p, V) | 0, i = (i = i + Math.imul(p, J) | 0) + Math.imul(m, V) | 0, 
                    o = o + Math.imul(m, J) | 0;
                    var bt = (l + (n = n + Math.imul(h, X) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, Y) | 0) + Math.imul(f, X) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, Y) | 0) + (i >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, 
                    n = Math.imul(E, G), i = (i = Math.imul(E, q)) + Math.imul(M, G) | 0, o = Math.imul(M, q), 
                    n = n + Math.imul(w, H) | 0, i = (i = i + Math.imul(w, K) | 0) + Math.imul(A, H) | 0, 
                    o = o + Math.imul(A, K) | 0, n = n + Math.imul(y, V) | 0, i = (i = i + Math.imul(y, J) | 0) + Math.imul(v, V) | 0, 
                    o = o + Math.imul(v, J) | 0, n = n + Math.imul(p, X) | 0, i = (i = i + Math.imul(p, Y) | 0) + Math.imul(m, X) | 0, 
                    o = o + Math.imul(m, Y) | 0;
                    var wt = (l + (n = n + Math.imul(h, $) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, tt) | 0) + Math.imul(f, $) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, tt) | 0) + (i >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, 
                    n = Math.imul(k, G), i = (i = Math.imul(k, q)) + Math.imul(S, G) | 0, o = Math.imul(S, q), 
                    n = n + Math.imul(E, H) | 0, i = (i = i + Math.imul(E, K) | 0) + Math.imul(M, H) | 0, 
                    o = o + Math.imul(M, K) | 0, n = n + Math.imul(w, V) | 0, i = (i = i + Math.imul(w, J) | 0) + Math.imul(A, V) | 0, 
                    o = o + Math.imul(A, J) | 0, n = n + Math.imul(y, X) | 0, i = (i = i + Math.imul(y, Y) | 0) + Math.imul(v, X) | 0, 
                    o = o + Math.imul(v, Y) | 0, n = n + Math.imul(p, $) | 0, i = (i = i + Math.imul(p, tt) | 0) + Math.imul(m, $) | 0, 
                    o = o + Math.imul(m, tt) | 0;
                    var At = (l + (n = n + Math.imul(h, rt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, nt) | 0) + Math.imul(f, rt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, nt) | 0) + (i >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, 
                    n = Math.imul(N, G), i = (i = Math.imul(N, q)) + Math.imul(x, G) | 0, o = Math.imul(x, q), 
                    n = n + Math.imul(k, H) | 0, i = (i = i + Math.imul(k, K) | 0) + Math.imul(S, H) | 0, 
                    o = o + Math.imul(S, K) | 0, n = n + Math.imul(E, V) | 0, i = (i = i + Math.imul(E, J) | 0) + Math.imul(M, V) | 0, 
                    o = o + Math.imul(M, J) | 0, n = n + Math.imul(w, X) | 0, i = (i = i + Math.imul(w, Y) | 0) + Math.imul(A, X) | 0, 
                    o = o + Math.imul(A, Y) | 0, n = n + Math.imul(y, $) | 0, i = (i = i + Math.imul(y, tt) | 0) + Math.imul(v, $) | 0, 
                    o = o + Math.imul(v, tt) | 0, n = n + Math.imul(p, rt) | 0, i = (i = i + Math.imul(p, nt) | 0) + Math.imul(m, rt) | 0, 
                    o = o + Math.imul(m, nt) | 0;
                    var _t = (l + (n = n + Math.imul(h, ot) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, st) | 0) + Math.imul(f, ot) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, st) | 0) + (i >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, 
                    n = Math.imul(T, G), i = (i = Math.imul(T, q)) + Math.imul(B, G) | 0, o = Math.imul(B, q), 
                    n = n + Math.imul(N, H) | 0, i = (i = i + Math.imul(N, K) | 0) + Math.imul(x, H) | 0, 
                    o = o + Math.imul(x, K) | 0, n = n + Math.imul(k, V) | 0, i = (i = i + Math.imul(k, J) | 0) + Math.imul(S, V) | 0, 
                    o = o + Math.imul(S, J) | 0, n = n + Math.imul(E, X) | 0, i = (i = i + Math.imul(E, Y) | 0) + Math.imul(M, X) | 0, 
                    o = o + Math.imul(M, Y) | 0, n = n + Math.imul(w, $) | 0, i = (i = i + Math.imul(w, tt) | 0) + Math.imul(A, $) | 0, 
                    o = o + Math.imul(A, tt) | 0, n = n + Math.imul(y, rt) | 0, i = (i = i + Math.imul(y, nt) | 0) + Math.imul(v, rt) | 0, 
                    o = o + Math.imul(v, nt) | 0, n = n + Math.imul(p, ot) | 0, i = (i = i + Math.imul(p, st) | 0) + Math.imul(m, ot) | 0, 
                    o = o + Math.imul(m, st) | 0;
                    var Et = (l + (n = n + Math.imul(h, ut) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, lt) | 0) + Math.imul(f, ut) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, lt) | 0) + (i >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, 
                    n = Math.imul(R, G), i = (i = Math.imul(R, q)) + Math.imul(j, G) | 0, o = Math.imul(j, q), 
                    n = n + Math.imul(T, H) | 0, i = (i = i + Math.imul(T, K) | 0) + Math.imul(B, H) | 0, 
                    o = o + Math.imul(B, K) | 0, n = n + Math.imul(N, V) | 0, i = (i = i + Math.imul(N, J) | 0) + Math.imul(x, V) | 0, 
                    o = o + Math.imul(x, J) | 0, n = n + Math.imul(k, X) | 0, i = (i = i + Math.imul(k, Y) | 0) + Math.imul(S, X) | 0, 
                    o = o + Math.imul(S, Y) | 0, n = n + Math.imul(E, $) | 0, i = (i = i + Math.imul(E, tt) | 0) + Math.imul(M, $) | 0, 
                    o = o + Math.imul(M, tt) | 0, n = n + Math.imul(w, rt) | 0, i = (i = i + Math.imul(w, nt) | 0) + Math.imul(A, rt) | 0, 
                    o = o + Math.imul(A, nt) | 0, n = n + Math.imul(y, ot) | 0, i = (i = i + Math.imul(y, st) | 0) + Math.imul(v, ot) | 0, 
                    o = o + Math.imul(v, st) | 0, n = n + Math.imul(p, ut) | 0, i = (i = i + Math.imul(p, lt) | 0) + Math.imul(m, ut) | 0, 
                    o = o + Math.imul(m, lt) | 0;
                    var Mt = (l + (n = n + Math.imul(h, ht) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, ft) | 0) + Math.imul(f, ht) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, ft) | 0) + (i >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863, 
                    n = Math.imul(U, G), i = (i = Math.imul(U, q)) + Math.imul(L, G) | 0, o = Math.imul(L, q), 
                    n = n + Math.imul(R, H) | 0, i = (i = i + Math.imul(R, K) | 0) + Math.imul(j, H) | 0, 
                    o = o + Math.imul(j, K) | 0, n = n + Math.imul(T, V) | 0, i = (i = i + Math.imul(T, J) | 0) + Math.imul(B, V) | 0, 
                    o = o + Math.imul(B, J) | 0, n = n + Math.imul(N, X) | 0, i = (i = i + Math.imul(N, Y) | 0) + Math.imul(x, X) | 0, 
                    o = o + Math.imul(x, Y) | 0, n = n + Math.imul(k, $) | 0, i = (i = i + Math.imul(k, tt) | 0) + Math.imul(S, $) | 0, 
                    o = o + Math.imul(S, tt) | 0, n = n + Math.imul(E, rt) | 0, i = (i = i + Math.imul(E, nt) | 0) + Math.imul(M, rt) | 0, 
                    o = o + Math.imul(M, nt) | 0, n = n + Math.imul(w, ot) | 0, i = (i = i + Math.imul(w, st) | 0) + Math.imul(A, ot) | 0, 
                    o = o + Math.imul(A, st) | 0, n = n + Math.imul(y, ut) | 0, i = (i = i + Math.imul(y, lt) | 0) + Math.imul(v, ut) | 0, 
                    o = o + Math.imul(v, lt) | 0, n = n + Math.imul(p, ht) | 0, i = (i = i + Math.imul(p, ft) | 0) + Math.imul(m, ht) | 0, 
                    o = o + Math.imul(m, ft) | 0;
                    var Pt = (l + (n = n + Math.imul(h, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(h, mt) | 0) + Math.imul(f, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(f, mt) | 0) + (i >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, 
                    n = Math.imul(U, H), i = (i = Math.imul(U, K)) + Math.imul(L, H) | 0, o = Math.imul(L, K), 
                    n = n + Math.imul(R, V) | 0, i = (i = i + Math.imul(R, J) | 0) + Math.imul(j, V) | 0, 
                    o = o + Math.imul(j, J) | 0, n = n + Math.imul(T, X) | 0, i = (i = i + Math.imul(T, Y) | 0) + Math.imul(B, X) | 0, 
                    o = o + Math.imul(B, Y) | 0, n = n + Math.imul(N, $) | 0, i = (i = i + Math.imul(N, tt) | 0) + Math.imul(x, $) | 0, 
                    o = o + Math.imul(x, tt) | 0, n = n + Math.imul(k, rt) | 0, i = (i = i + Math.imul(k, nt) | 0) + Math.imul(S, rt) | 0, 
                    o = o + Math.imul(S, nt) | 0, n = n + Math.imul(E, ot) | 0, i = (i = i + Math.imul(E, st) | 0) + Math.imul(M, ot) | 0, 
                    o = o + Math.imul(M, st) | 0, n = n + Math.imul(w, ut) | 0, i = (i = i + Math.imul(w, lt) | 0) + Math.imul(A, ut) | 0, 
                    o = o + Math.imul(A, lt) | 0, n = n + Math.imul(y, ht) | 0, i = (i = i + Math.imul(y, ft) | 0) + Math.imul(v, ht) | 0, 
                    o = o + Math.imul(v, ft) | 0;
                    var kt = (l + (n = n + Math.imul(p, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, mt) | 0) + Math.imul(m, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(m, mt) | 0) + (i >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, 
                    n = Math.imul(U, V), i = (i = Math.imul(U, J)) + Math.imul(L, V) | 0, o = Math.imul(L, J), 
                    n = n + Math.imul(R, X) | 0, i = (i = i + Math.imul(R, Y) | 0) + Math.imul(j, X) | 0, 
                    o = o + Math.imul(j, Y) | 0, n = n + Math.imul(T, $) | 0, i = (i = i + Math.imul(T, tt) | 0) + Math.imul(B, $) | 0, 
                    o = o + Math.imul(B, tt) | 0, n = n + Math.imul(N, rt) | 0, i = (i = i + Math.imul(N, nt) | 0) + Math.imul(x, rt) | 0, 
                    o = o + Math.imul(x, nt) | 0, n = n + Math.imul(k, ot) | 0, i = (i = i + Math.imul(k, st) | 0) + Math.imul(S, ot) | 0, 
                    o = o + Math.imul(S, st) | 0, n = n + Math.imul(E, ut) | 0, i = (i = i + Math.imul(E, lt) | 0) + Math.imul(M, ut) | 0, 
                    o = o + Math.imul(M, lt) | 0, n = n + Math.imul(w, ht) | 0, i = (i = i + Math.imul(w, ft) | 0) + Math.imul(A, ht) | 0, 
                    o = o + Math.imul(A, ft) | 0;
                    var St = (l + (n = n + Math.imul(y, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(y, mt) | 0) + Math.imul(v, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(v, mt) | 0) + (i >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, 
                    n = Math.imul(U, X), i = (i = Math.imul(U, Y)) + Math.imul(L, X) | 0, o = Math.imul(L, Y), 
                    n = n + Math.imul(R, $) | 0, i = (i = i + Math.imul(R, tt) | 0) + Math.imul(j, $) | 0, 
                    o = o + Math.imul(j, tt) | 0, n = n + Math.imul(T, rt) | 0, i = (i = i + Math.imul(T, nt) | 0) + Math.imul(B, rt) | 0, 
                    o = o + Math.imul(B, nt) | 0, n = n + Math.imul(N, ot) | 0, i = (i = i + Math.imul(N, st) | 0) + Math.imul(x, ot) | 0, 
                    o = o + Math.imul(x, st) | 0, n = n + Math.imul(k, ut) | 0, i = (i = i + Math.imul(k, lt) | 0) + Math.imul(S, ut) | 0, 
                    o = o + Math.imul(S, lt) | 0, n = n + Math.imul(E, ht) | 0, i = (i = i + Math.imul(E, ft) | 0) + Math.imul(M, ht) | 0, 
                    o = o + Math.imul(M, ft) | 0;
                    var Ot = (l + (n = n + Math.imul(w, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, mt) | 0) + Math.imul(A, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(A, mt) | 0) + (i >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, 
                    n = Math.imul(U, $), i = (i = Math.imul(U, tt)) + Math.imul(L, $) | 0, o = Math.imul(L, tt), 
                    n = n + Math.imul(R, rt) | 0, i = (i = i + Math.imul(R, nt) | 0) + Math.imul(j, rt) | 0, 
                    o = o + Math.imul(j, nt) | 0, n = n + Math.imul(T, ot) | 0, i = (i = i + Math.imul(T, st) | 0) + Math.imul(B, ot) | 0, 
                    o = o + Math.imul(B, st) | 0, n = n + Math.imul(N, ut) | 0, i = (i = i + Math.imul(N, lt) | 0) + Math.imul(x, ut) | 0, 
                    o = o + Math.imul(x, lt) | 0, n = n + Math.imul(k, ht) | 0, i = (i = i + Math.imul(k, ft) | 0) + Math.imul(S, ht) | 0, 
                    o = o + Math.imul(S, ft) | 0;
                    var Nt = (l + (n = n + Math.imul(E, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(E, mt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(M, mt) | 0) + (i >>> 13) | 0) + (Nt >>> 26) | 0, Nt &= 67108863, 
                    n = Math.imul(U, rt), i = (i = Math.imul(U, nt)) + Math.imul(L, rt) | 0, o = Math.imul(L, nt), 
                    n = n + Math.imul(R, ot) | 0, i = (i = i + Math.imul(R, st) | 0) + Math.imul(j, ot) | 0, 
                    o = o + Math.imul(j, st) | 0, n = n + Math.imul(T, ut) | 0, i = (i = i + Math.imul(T, lt) | 0) + Math.imul(B, ut) | 0, 
                    o = o + Math.imul(B, lt) | 0, n = n + Math.imul(N, ht) | 0, i = (i = i + Math.imul(N, ft) | 0) + Math.imul(x, ht) | 0, 
                    o = o + Math.imul(x, ft) | 0;
                    var xt = (l + (n = n + Math.imul(k, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(k, mt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(S, mt) | 0) + (i >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, 
                    n = Math.imul(U, ot), i = (i = Math.imul(U, st)) + Math.imul(L, ot) | 0, o = Math.imul(L, st), 
                    n = n + Math.imul(R, ut) | 0, i = (i = i + Math.imul(R, lt) | 0) + Math.imul(j, ut) | 0, 
                    o = o + Math.imul(j, lt) | 0, n = n + Math.imul(T, ht) | 0, i = (i = i + Math.imul(T, ft) | 0) + Math.imul(B, ht) | 0, 
                    o = o + Math.imul(B, ft) | 0;
                    var It = (l + (n = n + Math.imul(N, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(N, mt) | 0) + Math.imul(x, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(x, mt) | 0) + (i >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, 
                    n = Math.imul(U, ut), i = (i = Math.imul(U, lt)) + Math.imul(L, ut) | 0, o = Math.imul(L, lt), 
                    n = n + Math.imul(R, ht) | 0, i = (i = i + Math.imul(R, ft) | 0) + Math.imul(j, ht) | 0, 
                    o = o + Math.imul(j, ft) | 0;
                    var Tt = (l + (n = n + Math.imul(T, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(T, mt) | 0) + Math.imul(B, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(B, mt) | 0) + (i >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, 
                    n = Math.imul(U, ht), i = (i = Math.imul(U, ft)) + Math.imul(L, ht) | 0, o = Math.imul(L, ft);
                    var Bt = (l + (n = n + Math.imul(R, pt) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, mt) | 0) + Math.imul(j, pt) | 0)) << 13) | 0;
                    l = ((o = o + Math.imul(j, mt) | 0) + (i >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863;
                    var Ct = (l + (n = Math.imul(U, pt)) | 0) + ((8191 & (i = (i = Math.imul(U, mt)) + Math.imul(L, pt) | 0)) << 13) | 0;
                    return l = ((o = Math.imul(L, mt)) + (i >>> 13) | 0) + (Ct >>> 26) | 0, Ct &= 67108863, 
                    u[0] = gt, u[1] = yt, u[2] = vt, u[3] = bt, u[4] = wt, u[5] = At, u[6] = _t, u[7] = Et, 
                    u[8] = Mt, u[9] = Pt, u[10] = kt, u[11] = St, u[12] = Ot, u[13] = Nt, u[14] = xt, 
                    u[15] = It, u[16] = Tt, u[17] = Bt, u[18] = Ct, 0 !== l && (u[19] = l, r.length++), 
                    r;
                };
                function y(t, e, r) {
                    r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
                    for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                        var s = i;
                        i = 0;
                        for (var a = 67108863 & n, u = Math.min(o, e.length - 1), l = Math.max(0, o - t.length + 1); l <= u; l++) {
                            var c = o - l, h = (0 | t.words[c]) * (0 | e.words[l]), f = 67108863 & h;
                            a = 67108863 & (f = f + a | 0), i += (s = (s = s + (h / 67108864 | 0) | 0) + (f >>> 26) | 0) >>> 26, 
                            s &= 67108863;
                        }
                        r.words[o] = a, n = s, s = i;
                    }
                    return 0 !== n ? r.words[o] = n : r.length--, r._strip();
                }
                function v(t, e, r) {
                    return y(t, e, r);
                }
                function b(t, e) {
                    this.x = t, this.y = e;
                }
                Math.imul || (g = m), o.prototype.mulTo = function(t, e) {
                    var r = this.length + t.length;
                    return 10 === this.length && 10 === t.length ? g(this, t, e) : r < 63 ? m(this, t, e) : r < 1024 ? y(this, t, e) : v(this, t, e);
                }, b.prototype.makeRBT = function(t) {
                    for (var e = new Array(t), r = o.prototype._countBits(t) - 1, n = 0; n < t; n++) e[n] = this.revBin(n, r, t);
                    return e;
                }, b.prototype.revBin = function(t, e, r) {
                    if (0 === t || t === r - 1) return t;
                    for (var n = 0, i = 0; i < e; i++) n |= (1 & t) << e - i - 1, t >>= 1;
                    return n;
                }, b.prototype.permute = function(t, e, r, n, i, o) {
                    for (var s = 0; s < o; s++) n[s] = e[t[s]], i[s] = r[t[s]];
                }, b.prototype.transform = function(t, e, r, n, i, o) {
                    this.permute(o, t, e, r, n, i);
                    for (var s = 1; s < i; s <<= 1) for (var a = s << 1, u = Math.cos(2 * Math.PI / a), l = Math.sin(2 * Math.PI / a), c = 0; c < i; c += a) for (var h = u, f = l, d = 0; d < s; d++) {
                        var p = r[c + d], m = n[c + d], g = r[c + d + s], y = n[c + d + s], v = h * g - f * y;
                        y = h * y + f * g, g = v, r[c + d] = p + g, n[c + d] = m + y, r[c + d + s] = p - g, 
                        n[c + d + s] = m - y, d !== a && (v = u * h - l * f, f = u * f + l * h, h = v);
                    }
                }, b.prototype.guessLen13b = function(t, e) {
                    var r = 1 | Math.max(e, t), n = 1 & r, i = 0;
                    for (r = r / 2 | 0; r; r >>>= 1) i++;
                    return 1 << i + 1 + n;
                }, b.prototype.conjugate = function(t, e, r) {
                    if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {
                        var i = t[n];
                        t[n] = t[r - n - 1], t[r - n - 1] = i, i = e[n], e[n] = -e[r - n - 1], e[r - n - 1] = -i;
                    }
                }, b.prototype.normalize13b = function(t, e) {
                    for (var r = 0, n = 0; n < e / 2; n++) {
                        var i = 8192 * Math.round(t[2 * n + 1] / e) + Math.round(t[2 * n] / e) + r;
                        t[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
                    }
                    return t;
                }, b.prototype.convert13b = function(t, e, r, i) {
                    for (var o = 0, s = 0; s < e; s++) o += 0 | t[s], r[2 * s] = 8191 & o, o >>>= 13, 
                    r[2 * s + 1] = 8191 & o, o >>>= 13;
                    for (s = 2 * e; s < i; ++s) r[s] = 0;
                    n(0 === o), n(0 == (-8192 & o));
                }, b.prototype.stub = function(t) {
                    for (var e = new Array(t), r = 0; r < t; r++) e[r] = 0;
                    return e;
                }, b.prototype.mulp = function(t, e, r) {
                    var n = 2 * this.guessLen13b(t.length, e.length), i = this.makeRBT(n), o = this.stub(n), s = new Array(n), a = new Array(n), u = new Array(n), l = new Array(n), c = new Array(n), h = new Array(n), f = r.words;
                    f.length = n, this.convert13b(t.words, t.length, s, n), this.convert13b(e.words, e.length, l, n), 
                    this.transform(s, o, a, u, n, i), this.transform(l, o, c, h, n, i);
                    for (var d = 0; d < n; d++) {
                        var p = a[d] * c[d] - u[d] * h[d];
                        u[d] = a[d] * h[d] + u[d] * c[d], a[d] = p;
                    }
                    return this.conjugate(a, u, n), this.transform(a, u, f, o, n, i), this.conjugate(f, o, n), 
                    this.normalize13b(f, n), r.negative = t.negative ^ e.negative, r.length = t.length + e.length, 
                    r._strip();
                }, o.prototype.mul = function(t) {
                    var e = new o(null);
                    return e.words = new Array(this.length + t.length), this.mulTo(t, e);
                }, o.prototype.mulf = function(t) {
                    var e = new o(null);
                    return e.words = new Array(this.length + t.length), v(this, t, e);
                }, o.prototype.imul = function(t) {
                    return this.clone().mulTo(t, this);
                }, o.prototype.imuln = function(t) {
                    var e = t < 0;
                    e && (t = -t), n("number" == typeof t), n(t < 67108864);
                    for (var r = 0, i = 0; i < this.length; i++) {
                        var o = (0 | this.words[i]) * t, s = (67108863 & o) + (67108863 & r);
                        r >>= 26, r += o / 67108864 | 0, r += s >>> 26, this.words[i] = 67108863 & s;
                    }
                    return 0 !== r && (this.words[i] = r, this.length++), e ? this.ineg() : this;
                }, o.prototype.muln = function(t) {
                    return this.clone().imuln(t);
                }, o.prototype.sqr = function() {
                    return this.mul(this);
                }, o.prototype.isqr = function() {
                    return this.imul(this.clone());
                }, o.prototype.pow = function(t) {
                    var e = function(t) {
                        for (var e = new Array(t.bitLength()), r = 0; r < e.length; r++) {
                            var n = r / 26 | 0, i = r % 26;
                            e[r] = t.words[n] >>> i & 1;
                        }
                        return e;
                    }(t);
                    if (0 === e.length) return new o(1);
                    for (var r = this, n = 0; n < e.length && 0 === e[n]; n++, r = r.sqr()) ;
                    if (++n < e.length) for (var i = r.sqr(); n < e.length; n++, i = i.sqr()) 0 !== e[n] && (r = r.mul(i));
                    return r;
                }, o.prototype.iushln = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e, r = t % 26, i = (t - r) / 26, o = 67108863 >>> 26 - r << 26 - r;
                    if (0 !== r) {
                        var s = 0;
                        for (e = 0; e < this.length; e++) {
                            var a = this.words[e] & o, u = (0 | this.words[e]) - a << r;
                            this.words[e] = u | s, s = a >>> 26 - r;
                        }
                        s && (this.words[e] = s, this.length++);
                    }
                    if (0 !== i) {
                        for (e = this.length - 1; e >= 0; e--) this.words[e + i] = this.words[e];
                        for (e = 0; e < i; e++) this.words[e] = 0;
                        this.length += i;
                    }
                    return this._strip();
                }, o.prototype.ishln = function(t) {
                    return n(0 === this.negative), this.iushln(t);
                }, o.prototype.iushrn = function(t, e, r) {
                    var i;
                    n("number" == typeof t && t >= 0), i = e ? (e - e % 26) / 26 : 0;
                    var o = t % 26, s = Math.min((t - o) / 26, this.length), a = 67108863 ^ 67108863 >>> o << o, u = r;
                    if (i -= s, i = Math.max(0, i), u) {
                        for (var l = 0; l < s; l++) u.words[l] = this.words[l];
                        u.length = s;
                    }
                    if (0 === s) ; else if (this.length > s) for (this.length -= s, l = 0; l < this.length; l++) this.words[l] = this.words[l + s]; else this.words[0] = 0, 
                    this.length = 1;
                    var c = 0;
                    for (l = this.length - 1; l >= 0 && (0 !== c || l >= i); l--) {
                        var h = 0 | this.words[l];
                        this.words[l] = c << 26 - o | h >>> o, c = h & a;
                    }
                    return u && 0 !== c && (u.words[u.length++] = c), 0 === this.length && (this.words[0] = 0, 
                    this.length = 1), this._strip();
                }, o.prototype.ishrn = function(t, e, r) {
                    return n(0 === this.negative), this.iushrn(t, e, r);
                }, o.prototype.shln = function(t) {
                    return this.clone().ishln(t);
                }, o.prototype.ushln = function(t) {
                    return this.clone().iushln(t);
                }, o.prototype.shrn = function(t) {
                    return this.clone().ishrn(t);
                }, o.prototype.ushrn = function(t) {
                    return this.clone().iushrn(t);
                }, o.prototype.testn = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e = t % 26, r = (t - e) / 26, i = 1 << e;
                    return !(this.length <= r) && !!(this.words[r] & i);
                }, o.prototype.imaskn = function(t) {
                    n("number" == typeof t && t >= 0);
                    var e = t % 26, r = (t - e) / 26;
                    if (n(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
                    if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
                        var i = 67108863 ^ 67108863 >>> e << e;
                        this.words[this.length - 1] &= i;
                    }
                    return this._strip();
                }, o.prototype.maskn = function(t) {
                    return this.clone().imaskn(t);
                }, o.prototype.iaddn = function(t) {
                    return n("number" == typeof t), n(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t ? (this.words[0] = t - (0 | this.words[0]), 
                    this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, 
                    this) : this._iaddn(t);
                }, o.prototype._iaddn = function(t) {
                    this.words[0] += t;
                    for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) this.words[e] -= 67108864, 
                    e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
                    return this.length = Math.max(this.length, e + 1), this;
                }, o.prototype.isubn = function(t) {
                    if (n("number" == typeof t), n(t < 67108864), t < 0) return this.iaddn(-t);
                    if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, 
                    this;
                    if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], 
                    this.negative = 1; else for (var e = 0; e < this.length && this.words[e] < 0; e++) this.words[e] += 67108864, 
                    this.words[e + 1] -= 1;
                    return this._strip();
                }, o.prototype.addn = function(t) {
                    return this.clone().iaddn(t);
                }, o.prototype.subn = function(t) {
                    return this.clone().isubn(t);
                }, o.prototype.iabs = function() {
                    return this.negative = 0, this;
                }, o.prototype.abs = function() {
                    return this.clone().iabs();
                }, o.prototype._ishlnsubmul = function(t, e, r) {
                    var i, o, s = t.length + r;
                    this._expand(s);
                    var a = 0;
                    for (i = 0; i < t.length; i++) {
                        o = (0 | this.words[i + r]) + a;
                        var u = (0 | t.words[i]) * e;
                        a = ((o -= 67108863 & u) >> 26) - (u / 67108864 | 0), this.words[i + r] = 67108863 & o;
                    }
                    for (;i < this.length - r; i++) a = (o = (0 | this.words[i + r]) + a) >> 26, this.words[i + r] = 67108863 & o;
                    if (0 === a) return this._strip();
                    for (n(-1 === a), a = 0, i = 0; i < this.length; i++) a = (o = -(0 | this.words[i]) + a) >> 26, 
                    this.words[i] = 67108863 & o;
                    return this.negative = 1, this._strip();
                }, o.prototype._wordDiv = function(t, e) {
                    var r = (this.length, t.length), n = this.clone(), i = t, s = 0 | i.words[i.length - 1];
                    0 !== (r = 26 - this._countBits(s)) && (i = i.ushln(r), n.iushln(r), s = 0 | i.words[i.length - 1]);
                    var a, u = n.length - i.length;
                    if ("mod" !== e) {
                        (a = new o(null)).length = u + 1, a.words = new Array(a.length);
                        for (var l = 0; l < a.length; l++) a.words[l] = 0;
                    }
                    var c = n.clone()._ishlnsubmul(i, 1, u);
                    0 === c.negative && (n = c, a && (a.words[u] = 1));
                    for (var h = u - 1; h >= 0; h--) {
                        var f = 67108864 * (0 | n.words[i.length + h]) + (0 | n.words[i.length + h - 1]);
                        for (f = Math.min(f / s | 0, 67108863), n._ishlnsubmul(i, f, h); 0 !== n.negative; ) f--, 
                        n.negative = 0, n._ishlnsubmul(i, 1, h), n.isZero() || (n.negative ^= 1);
                        a && (a.words[h] = f);
                    }
                    return a && a._strip(), n._strip(), "div" !== e && 0 !== r && n.iushrn(r), {
                        div: a || null,
                        mod: n
                    };
                }, o.prototype.divmod = function(t, e, r) {
                    return n(!t.isZero()), this.isZero() ? {
                        div: new o(0),
                        mod: new o(0)
                    } : 0 !== this.negative && 0 === t.negative ? (a = this.neg().divmod(t, e), "mod" !== e && (i = a.div.neg()), 
                    "div" !== e && (s = a.mod.neg(), r && 0 !== s.negative && s.iadd(t)), {
                        div: i,
                        mod: s
                    }) : 0 === this.negative && 0 !== t.negative ? (a = this.divmod(t.neg(), e), "mod" !== e && (i = a.div.neg()), 
                    {
                        div: i,
                        mod: a.mod
                    }) : 0 != (this.negative & t.negative) ? (a = this.neg().divmod(t.neg(), e), "div" !== e && (s = a.mod.neg(), 
                    r && 0 !== s.negative && s.isub(t)), {
                        div: a.div,
                        mod: s
                    }) : t.length > this.length || this.cmp(t) < 0 ? {
                        div: new o(0),
                        mod: this
                    } : 1 === t.length ? "div" === e ? {
                        div: this.divn(t.words[0]),
                        mod: null
                    } : "mod" === e ? {
                        div: null,
                        mod: new o(this.modrn(t.words[0]))
                    } : {
                        div: this.divn(t.words[0]),
                        mod: new o(this.modrn(t.words[0]))
                    } : this._wordDiv(t, e);
                    var i, s, a;
                }, o.prototype.div = function(t) {
                    return this.divmod(t, "div", !1).div;
                }, o.prototype.mod = function(t) {
                    return this.divmod(t, "mod", !1).mod;
                }, o.prototype.umod = function(t) {
                    return this.divmod(t, "mod", !0).mod;
                }, o.prototype.divRound = function(t) {
                    var e = this.divmod(t);
                    if (e.mod.isZero()) return e.div;
                    var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod, n = t.ushrn(1), i = t.andln(1), o = r.cmp(n);
                    return o < 0 || 1 === i && 0 === o ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
                }, o.prototype.modrn = function(t) {
                    var e = t < 0;
                    e && (t = -t), n(t <= 67108863);
                    for (var r = (1 << 26) % t, i = 0, o = this.length - 1; o >= 0; o--) i = (r * i + (0 | this.words[o])) % t;
                    return e ? -i : i;
                }, o.prototype.modn = function(t) {
                    return this.modrn(t);
                }, o.prototype.idivn = function(t) {
                    var e = t < 0;
                    e && (t = -t), n(t <= 67108863);
                    for (var r = 0, i = this.length - 1; i >= 0; i--) {
                        var o = (0 | this.words[i]) + 67108864 * r;
                        this.words[i] = o / t | 0, r = o % t;
                    }
                    return this._strip(), e ? this.ineg() : this;
                }, o.prototype.divn = function(t) {
                    return this.clone().idivn(t);
                }, o.prototype.egcd = function(t) {
                    n(0 === t.negative), n(!t.isZero());
                    var e = this, r = t.clone();
                    e = 0 !== e.negative ? e.umod(t) : e.clone();
                    for (var i = new o(1), s = new o(0), a = new o(0), u = new o(1), l = 0; e.isEven() && r.isEven(); ) e.iushrn(1), 
                    r.iushrn(1), ++l;
                    for (var c = r.clone(), h = e.clone(); !e.isZero(); ) {
                        for (var f = 0, d = 1; 0 == (e.words[0] & d) && f < 26; ++f, d <<= 1) ;
                        if (f > 0) for (e.iushrn(f); f-- > 0; ) (i.isOdd() || s.isOdd()) && (i.iadd(c), 
                        s.isub(h)), i.iushrn(1), s.iushrn(1);
                        for (var p = 0, m = 1; 0 == (r.words[0] & m) && p < 26; ++p, m <<= 1) ;
                        if (p > 0) for (r.iushrn(p); p-- > 0; ) (a.isOdd() || u.isOdd()) && (a.iadd(c), 
                        u.isub(h)), a.iushrn(1), u.iushrn(1);
                        e.cmp(r) >= 0 ? (e.isub(r), i.isub(a), s.isub(u)) : (r.isub(e), a.isub(i), u.isub(s));
                    }
                    return {
                        a,
                        b: u,
                        gcd: r.iushln(l)
                    };
                }, o.prototype._invmp = function(t) {
                    n(0 === t.negative), n(!t.isZero());
                    var e = this, r = t.clone();
                    e = 0 !== e.negative ? e.umod(t) : e.clone();
                    for (var i, s = new o(1), a = new o(0), u = r.clone(); e.cmpn(1) > 0 && r.cmpn(1) > 0; ) {
                        for (var l = 0, c = 1; 0 == (e.words[0] & c) && l < 26; ++l, c <<= 1) ;
                        if (l > 0) for (e.iushrn(l); l-- > 0; ) s.isOdd() && s.iadd(u), s.iushrn(1);
                        for (var h = 0, f = 1; 0 == (r.words[0] & f) && h < 26; ++h, f <<= 1) ;
                        if (h > 0) for (r.iushrn(h); h-- > 0; ) a.isOdd() && a.iadd(u), a.iushrn(1);
                        e.cmp(r) >= 0 ? (e.isub(r), s.isub(a)) : (r.isub(e), a.isub(s));
                    }
                    return (i = 0 === e.cmpn(1) ? s : a).cmpn(0) < 0 && i.iadd(t), i;
                }, o.prototype.gcd = function(t) {
                    if (this.isZero()) return t.abs();
                    if (t.isZero()) return this.abs();
                    var e = this.clone(), r = t.clone();
                    e.negative = 0, r.negative = 0;
                    for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
                    for (;;) {
                        for (;e.isEven(); ) e.iushrn(1);
                        for (;r.isEven(); ) r.iushrn(1);
                        var i = e.cmp(r);
                        if (i < 0) {
                            var o = e;
                            e = r, r = o;
                        } else if (0 === i || 0 === r.cmpn(1)) break;
                        e.isub(r);
                    }
                    return r.iushln(n);
                }, o.prototype.invm = function(t) {
                    return this.egcd(t).a.umod(t);
                }, o.prototype.isEven = function() {
                    return 0 == (1 & this.words[0]);
                }, o.prototype.isOdd = function() {
                    return 1 == (1 & this.words[0]);
                }, o.prototype.andln = function(t) {
                    return this.words[0] & t;
                }, o.prototype.bincn = function(t) {
                    n("number" == typeof t);
                    var e = t % 26, r = (t - e) / 26, i = 1 << e;
                    if (this.length <= r) return this._expand(r + 1), this.words[r] |= i, this;
                    for (var o = i, s = r; 0 !== o && s < this.length; s++) {
                        var a = 0 | this.words[s];
                        o = (a += o) >>> 26, a &= 67108863, this.words[s] = a;
                    }
                    return 0 !== o && (this.words[s] = o, this.length++), this;
                }, o.prototype.isZero = function() {
                    return 1 === this.length && 0 === this.words[0];
                }, o.prototype.cmpn = function(t) {
                    var e, r = t < 0;
                    if (0 !== this.negative && !r) return -1;
                    if (0 === this.negative && r) return 1;
                    if (this._strip(), this.length > 1) e = 1; else {
                        r && (t = -t), n(t <= 67108863, "Number is too big");
                        var i = 0 | this.words[0];
                        e = i === t ? 0 : i < t ? -1 : 1;
                    }
                    return 0 !== this.negative ? 0 | -e : e;
                }, o.prototype.cmp = function(t) {
                    if (0 !== this.negative && 0 === t.negative) return -1;
                    if (0 === this.negative && 0 !== t.negative) return 1;
                    var e = this.ucmp(t);
                    return 0 !== this.negative ? 0 | -e : e;
                }, o.prototype.ucmp = function(t) {
                    if (this.length > t.length) return 1;
                    if (this.length < t.length) return -1;
                    for (var e = 0, r = this.length - 1; r >= 0; r--) {
                        var n = 0 | this.words[r], i = 0 | t.words[r];
                        if (n !== i) {
                            n < i ? e = -1 : n > i && (e = 1);
                            break;
                        }
                    }
                    return e;
                }, o.prototype.gtn = function(t) {
                    return 1 === this.cmpn(t);
                }, o.prototype.gt = function(t) {
                    return 1 === this.cmp(t);
                }, o.prototype.gten = function(t) {
                    return this.cmpn(t) >= 0;
                }, o.prototype.gte = function(t) {
                    return this.cmp(t) >= 0;
                }, o.prototype.ltn = function(t) {
                    return -1 === this.cmpn(t);
                }, o.prototype.lt = function(t) {
                    return -1 === this.cmp(t);
                }, o.prototype.lten = function(t) {
                    return this.cmpn(t) <= 0;
                }, o.prototype.lte = function(t) {
                    return this.cmp(t) <= 0;
                }, o.prototype.eqn = function(t) {
                    return 0 === this.cmpn(t);
                }, o.prototype.eq = function(t) {
                    return 0 === this.cmp(t);
                }, o.red = function(t) {
                    return new k(t);
                }, o.prototype.toRed = function(t) {
                    return n(!this.red, "Already a number in reduction context"), n(0 === this.negative, "red works only with positives"), 
                    t.convertTo(this)._forceRed(t);
                }, o.prototype.fromRed = function() {
                    return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
                }, o.prototype._forceRed = function(t) {
                    return this.red = t, this;
                }, o.prototype.forceRed = function(t) {
                    return n(!this.red, "Already a number in reduction context"), this._forceRed(t);
                }, o.prototype.redAdd = function(t) {
                    return n(this.red, "redAdd works only with red numbers"), this.red.add(this, t);
                }, o.prototype.redIAdd = function(t) {
                    return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, t);
                }, o.prototype.redSub = function(t) {
                    return n(this.red, "redSub works only with red numbers"), this.red.sub(this, t);
                }, o.prototype.redISub = function(t) {
                    return n(this.red, "redISub works only with red numbers"), this.red.isub(this, t);
                }, o.prototype.redShl = function(t) {
                    return n(this.red, "redShl works only with red numbers"), this.red.shl(this, t);
                }, o.prototype.redMul = function(t) {
                    return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), 
                    this.red.mul(this, t);
                }, o.prototype.redIMul = function(t) {
                    return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), 
                    this.red.imul(this, t);
                }, o.prototype.redSqr = function() {
                    return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), 
                    this.red.sqr(this);
                }, o.prototype.redISqr = function() {
                    return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), 
                    this.red.isqr(this);
                }, o.prototype.redSqrt = function() {
                    return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), 
                    this.red.sqrt(this);
                }, o.prototype.redInvm = function() {
                    return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), 
                    this.red.invm(this);
                }, o.prototype.redNeg = function() {
                    return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), 
                    this.red.neg(this);
                }, o.prototype.redPow = function(t) {
                    return n(this.red && !t.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, t);
                };
                var w = {
                    k256: null,
                    p224: null,
                    p192: null,
                    p25519: null
                };
                function A(t, e) {
                    this.name = t, this.p = new o(e, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), 
                    this.tmp = this._tmp();
                }
                function _() {
                    A.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                }
                function E() {
                    A.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                }
                function M() {
                    A.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                }
                function P() {
                    A.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                }
                function k(t) {
                    if ("string" == typeof t) {
                        var e = o._prime(t);
                        this.m = e.p, this.prime = e;
                    } else n(t.gtn(1), "modulus must be greater than 1"), this.m = t, this.prime = null;
                }
                function S(t) {
                    k.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), 
                    this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), 
                    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), 
                    this.minv = this.r.sub(this.minv);
                }
                A.prototype._tmp = function() {
                    var t = new o(null);
                    return t.words = new Array(Math.ceil(this.n / 13)), t;
                }, A.prototype.ireduce = function(t) {
                    var e, r = t;
                    do {
                        this.split(r, this.tmp), e = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
                    } while (e > this.n);
                    var n = e < this.n ? -1 : r.ucmp(this.p);
                    return 0 === n ? (r.words[0] = 0, r.length = 1) : n > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), 
                    r;
                }, A.prototype.split = function(t, e) {
                    t.iushrn(this.n, 0, e);
                }, A.prototype.imulK = function(t) {
                    return t.imul(this.k);
                }, i(_, A), _.prototype.split = function(t, e) {
                    for (var r = 4194303, n = Math.min(t.length, 9), i = 0; i < n; i++) e.words[i] = t.words[i];
                    if (e.length = n, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
                    var o = t.words[9];
                    for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
                        var s = 0 | t.words[i];
                        t.words[i - 10] = (s & r) << 4 | o >>> 22, o = s;
                    }
                    o >>>= 22, t.words[i - 10] = o, 0 === o && t.length > 10 ? t.length -= 10 : t.length -= 9;
                }, _.prototype.imulK = function(t) {
                    t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
                    for (var e = 0, r = 0; r < t.length; r++) {
                        var n = 0 | t.words[r];
                        e += 977 * n, t.words[r] = 67108863 & e, e = 64 * n + (e / 67108864 | 0);
                    }
                    return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), 
                    t;
                }, i(E, A), i(M, A), i(P, A), P.prototype.imulK = function(t) {
                    for (var e = 0, r = 0; r < t.length; r++) {
                        var n = 19 * (0 | t.words[r]) + e, i = 67108863 & n;
                        n >>>= 26, t.words[r] = i, e = n;
                    }
                    return 0 !== e && (t.words[t.length++] = e), t;
                }, o._prime = function(t) {
                    if (w[t]) return w[t];
                    var e;
                    if ("k256" === t) e = new _; else if ("p224" === t) e = new E; else if ("p192" === t) e = new M; else {
                        if ("p25519" !== t) throw new Error("Unknown prime " + t);
                        e = new P;
                    }
                    return w[t] = e, e;
                }, k.prototype._verify1 = function(t) {
                    n(0 === t.negative, "red works only with positives"), n(t.red, "red works only with red numbers");
                }, k.prototype._verify2 = function(t, e) {
                    n(0 == (t.negative | e.negative), "red works only with positives"), n(t.red && t.red === e.red, "red works only with red numbers");
                }, k.prototype.imod = function(t) {
                    return this.prime ? this.prime.ireduce(t)._forceRed(this) : (c(t, t.umod(this.m)._forceRed(this)), 
                    t);
                }, k.prototype.neg = function(t) {
                    return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
                }, k.prototype.add = function(t, e) {
                    this._verify2(t, e);
                    var r = t.add(e);
                    return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                }, k.prototype.iadd = function(t, e) {
                    this._verify2(t, e);
                    var r = t.iadd(e);
                    return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                }, k.prototype.sub = function(t, e) {
                    this._verify2(t, e);
                    var r = t.sub(e);
                    return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                }, k.prototype.isub = function(t, e) {
                    this._verify2(t, e);
                    var r = t.isub(e);
                    return r.cmpn(0) < 0 && r.iadd(this.m), r;
                }, k.prototype.shl = function(t, e) {
                    return this._verify1(t), this.imod(t.ushln(e));
                }, k.prototype.imul = function(t, e) {
                    return this._verify2(t, e), this.imod(t.imul(e));
                }, k.prototype.mul = function(t, e) {
                    return this._verify2(t, e), this.imod(t.mul(e));
                }, k.prototype.isqr = function(t) {
                    return this.imul(t, t.clone());
                }, k.prototype.sqr = function(t) {
                    return this.mul(t, t);
                }, k.prototype.sqrt = function(t) {
                    if (t.isZero()) return t.clone();
                    var e = this.m.andln(3);
                    if (n(e % 2 == 1), 3 === e) {
                        var r = this.m.add(new o(1)).iushrn(2);
                        return this.pow(t, r);
                    }
                    for (var i = this.m.subn(1), s = 0; !i.isZero() && 0 === i.andln(1); ) s++, i.iushrn(1);
                    n(!i.isZero());
                    var a = new o(1).toRed(this), u = a.redNeg(), l = this.m.subn(1).iushrn(1), c = this.m.bitLength();
                    for (c = new o(2 * c * c).toRed(this); 0 !== this.pow(c, l).cmp(u); ) c.redIAdd(u);
                    for (var h = this.pow(c, i), f = this.pow(t, i.addn(1).iushrn(1)), d = this.pow(t, i), p = s; 0 !== d.cmp(a); ) {
                        for (var m = d, g = 0; 0 !== m.cmp(a); g++) m = m.redSqr();
                        n(g < p);
                        var y = this.pow(h, new o(1).iushln(p - g - 1));
                        f = f.redMul(y), h = y.redSqr(), d = d.redMul(h), p = g;
                    }
                    return f;
                }, k.prototype.invm = function(t) {
                    var e = t._invmp(this.m);
                    return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
                }, k.prototype.pow = function(t, e) {
                    if (e.isZero()) return new o(1).toRed(this);
                    if (0 === e.cmpn(1)) return t.clone();
                    var r = new Array(16);
                    r[0] = new o(1).toRed(this), r[1] = t;
                    for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
                    var i = r[0], s = 0, a = 0, u = e.bitLength() % 26;
                    for (0 === u && (u = 26), n = e.length - 1; n >= 0; n--) {
                        for (var l = e.words[n], c = u - 1; c >= 0; c--) {
                            var h = l >> c & 1;
                            i !== r[0] && (i = this.sqr(i)), 0 !== h || 0 !== s ? (s <<= 1, s |= h, (4 === ++a || 0 === n && 0 === c) && (i = this.mul(i, r[s]), 
                            a = 0, s = 0)) : a = 0;
                        }
                        u = 26;
                    }
                    return i;
                }, k.prototype.convertTo = function(t) {
                    var e = t.umod(this.m);
                    return e === t ? e.clone() : e;
                }, k.prototype.convertFrom = function(t) {
                    var e = t.clone();
                    return e.red = null, e;
                }, o.mont = function(t) {
                    return new S(t);
                }, i(S, k), S.prototype.convertTo = function(t) {
                    return this.imod(t.ushln(this.shift));
                }, S.prototype.convertFrom = function(t) {
                    var e = this.imod(t.mul(this.rinv));
                    return e.red = null, e;
                }, S.prototype.imul = function(t, e) {
                    if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
                    var r = t.imul(e), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), o = i;
                    return i.cmp(this.m) >= 0 ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), 
                    o._forceRed(this);
                }, S.prototype.mul = function(t, e) {
                    if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
                    var r = t.mul(e), n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i = r.isub(n).iushrn(this.shift), s = i;
                    return i.cmp(this.m) >= 0 ? s = i.isub(this.m) : i.cmpn(0) < 0 && (s = i.iadd(this.m)), 
                    s._forceRed(this);
                }, S.prototype.invm = function(t) {
                    return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
                };
            }(t = r.nmd(t), this);
        },
        5559: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            const n = r(655), i = r(9494);
            global.atob || (global.atob = i.atob), n.__exportStar(r(9411), e), r(5254);
        },
        9411: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.handlePolicySettled = e.handlePolicyClaimed = e.handlePolicyUnderClaimApplying = e.handleNewPolicyMinted = e.handleMarketAdded = e.handleNewLPMinted = e.handleLPExpired = e.handleLPTransfer = void 0;
            const n = r(6599), i = r(8903);
            e.handleLPTransfer = async function(t) {
                const e = t.args.to, r = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.tokenId.toString())), o = await n.LiquidityCertificate.get(r);
                null != o && o.owner != e.toString() && (o.owner = e.toString(), await o.save());
            }, e.handleLPExpired = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.certificateId.toString())), r = await n.LiquidityCertificate.get(e);
                if (null == r) throw new Error("Certificate does not exist");
                r.isValid = !1, await r.save();
            }, e.handleNewLPMinted = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.certificateId.toString())), r = n.LiquidityCertificate.create({
                    id: e,
                    protocol: t.args.protocol,
                    owner: t.args.owner,
                    liquidity: t.args.liquidity.toBigInt(),
                    certificateId: t.args.certificateId.toBigInt(),
                    enteredEpochIndex: t.args.enteredEpochIndex.toBigInt(),
                    exitedEpochIndex: BigInt(0),
                    rewardDebtEpochIndex: t.args.enteredEpochIndex.toBigInt(),
                    SPSLocked: BigInt(0),
                    isValid: !0
                });
                await r.save();
            }, e.handleMarketAdded = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.args.metaDefender.toString() + t.args.marketName.toString())), r = n.Market.create({
                    id: e,
                    protocol: t.args.metaDefender,
                    liquidityCertificate: t.args.liquidityCertificate,
                    policy: t.args.policy,
                    epochManage: t.args.epochManage,
                    marketName: t.args.marketName,
                    marketDescription: t.args.marketDescription,
                    marketPaymentToken: t.args.marketPaymentToken,
                    marketProtectionType: t.args.marketProtectionType,
                    network: t.args.network,
                    isValid: !0
                });
                await r.save();
            }, e.handleNewPolicyMinted = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.policyId.toString())), r = n.Policy.create({
                    id: e,
                    epochManage: t.args.epochManage,
                    protocol: t.args.protocol,
                    beneficiary: t.args.beneficiary,
                    policyId: t.args.policyId.toBigInt(),
                    timestamp: t.args.timestamp.toBigInt(),
                    coverage: t.args.coverage.toBigInt(),
                    fee: t.args.fee.toBigInt(),
                    duration: t.args.duration.toBigInt(),
                    standardRisk: t.args.standardRisk.toBigInt(),
                    enteredEpochIndex: t.args.enteredEpochIndex.toBigInt(),
                    SPS: t.args.SPS.toBigInt(),
                    isClaimed: !1,
                    isClaimApplying: !1,
                    isSettled: !1
                });
                await r.save();
            }, e.handlePolicyUnderClaimApplying = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.policyId.toString())), r = await n.Policy.get(e);
                if (null == r) throw new Error("Policy does not exist");
                r.isClaimApplying = !0, await r.save();
            }, e.handlePolicyClaimed = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.policyId.toString())), r = await n.Policy.get(e);
                if (null == r) throw new Error("Policy does not exist");
                r.isClaimed = !0, await r.save();
            }, e.handlePolicySettled = async function(t) {
                const e = i.utils.keccak256(i.utils.toUtf8Bytes(t.address.toString() + t.args.policyId.toString())), r = await n.Policy.get(e);
                if (null == r) throw new Error("Policy does not exist");
                r.isSettled = !0, await r.save();
            };
        },
        6599: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            r(655).__exportStar(r(3331), e);
        },
        3655: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.LiquidityCertificate = void 0;
            const n = r(655).__importDefault(r(9491));
            e.LiquidityCertificate = class {
                constructor(t) {
                    this.id = t;
                }
                get _name() {
                    return "LiquidityCertificate";
                }
                async save() {
                    let t = this.id;
                    (0, n.default)(null !== t, "Cannot save LiquidityCertificate entity without an ID"), 
                    await store.set("LiquidityCertificate", t.toString(), this);
                }
                static async remove(t) {
                    (0, n.default)(null !== t, "Cannot remove LiquidityCertificate entity without an ID"), 
                    await store.remove("LiquidityCertificate", t.toString());
                }
                static async get(t) {
                    (0, n.default)(null != t, "Cannot get LiquidityCertificate entity without an ID");
                    const e = await store.get("LiquidityCertificate", t.toString());
                    return e ? this.create(e) : void 0;
                }
                static create(t) {
                    (0, n.default)("string" == typeof t.id, "id must be provided");
                    let e = new this(t.id);
                    return Object.assign(e, t), e;
                }
            };
        },
        5785: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.Market = void 0;
            const n = r(655).__importDefault(r(9491));
            e.Market = class {
                constructor(t) {
                    this.id = t;
                }
                get _name() {
                    return "Market";
                }
                async save() {
                    let t = this.id;
                    (0, n.default)(null !== t, "Cannot save Market entity without an ID"), await store.set("Market", t.toString(), this);
                }
                static async remove(t) {
                    (0, n.default)(null !== t, "Cannot remove Market entity without an ID"), await store.remove("Market", t.toString());
                }
                static async get(t) {
                    (0, n.default)(null != t, "Cannot get Market entity without an ID");
                    const e = await store.get("Market", t.toString());
                    return e ? this.create(e) : void 0;
                }
                static create(t) {
                    (0, n.default)("string" == typeof t.id, "id must be provided");
                    let e = new this(t.id);
                    return Object.assign(e, t), e;
                }
            };
        },
        7757: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.Policy = void 0;
            const n = r(655).__importDefault(r(9491));
            e.Policy = class {
                constructor(t) {
                    this.id = t;
                }
                get _name() {
                    return "Policy";
                }
                async save() {
                    let t = this.id;
                    (0, n.default)(null !== t, "Cannot save Policy entity without an ID"), await store.set("Policy", t.toString(), this);
                }
                static async remove(t) {
                    (0, n.default)(null !== t, "Cannot remove Policy entity without an ID"), await store.remove("Policy", t.toString());
                }
                static async get(t) {
                    (0, n.default)(null != t, "Cannot get Policy entity without an ID");
                    const e = await store.get("Policy", t.toString());
                    return e ? this.create(e) : void 0;
                }
                static create(t) {
                    (0, n.default)("string" == typeof t.id, "id must be provided");
                    let e = new this(t.id);
                    return Object.assign(e, t), e;
                }
            };
        },
        3331: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.Market = e.LiquidityCertificate = e.Policy = void 0;
            var n = r(7757);
            Object.defineProperty(e, "Policy", {
                enumerable: !0,
                get: function() {
                    return n.Policy;
                }
            });
            var i = r(3655);
            Object.defineProperty(e, "LiquidityCertificate", {
                enumerable: !0,
                get: function() {
                    return i.LiquidityCertificate;
                }
            });
            var o = r(5785);
            Object.defineProperty(e, "Market", {
                enumerable: !0,
                get: function() {
                    return o.Market;
                }
            });
        },
        9491: t => {
            "use strict";
            t.exports = require("assert");
        },
        4300: t => {
            "use strict";
            t.exports = require("buffer");
        },
        3837: t => {
            "use strict";
            t.exports = require("util");
        },
        3203: t => {
            t.exports = function(t) {
                return t && t.__esModule ? t : {
                    default: t
                };
            }, t.exports.__esModule = !0, t.exports.default = t.exports;
        },
        3068: (t, e, r) => {
            "use strict";
            r(1083), r(3341);
        },
        3861: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return n.packageInfo;
                }
            }), r(4549);
            var n = r(1313);
        },
        9718: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.default = void 0;
            var n = r(8540), i = r(2587), o = r(7978), s = [ n.packageInfo, i.packageInfo, o.packageInfo ];
            e.default = s;
        },
        7856: (t, e, r) => {
            "use strict";
            var n = r(3203), i = r(4575), o = n(r(9718)), s = r(1313);
            (0, i.detectPackage)(s.packageInfo, null, o.default);
        },
        5254: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), r(7856);
            var n = r(3861);
            Object.keys(n).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (t in e && e[t] === n[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return n[t];
                    }
                }));
            }));
        },
        1313: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/api-augment",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        5544: (t, e, r) => {
            "use strict";
            r(8500);
        },
        258: (t, e, r) => {
            "use strict";
            r(6835);
        },
        238: (t, e, r) => {
            "use strict";
            r(4156);
        },
        4549: (t, e, r) => {
            "use strict";
            r(3068), r(5544), r(258), r(238), r(3832), r(2058), r(4567), r(8953);
        },
        3832: (t, e, r) => {
            "use strict";
            r(6629);
        },
        2058: (t, e, r) => {
            "use strict";
            r(5898);
        },
        4567: (t, e, r) => {
            "use strict";
            r(1722);
        },
        8953: (t, e, r) => {
            "use strict";
            r(4514);
        },
        8540: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/api-base",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        1722: () => {},
        8500: () => {},
        6835: () => {},
        4156: () => {},
        6629: () => {},
        4514: () => {},
        8136: (t, e, r) => {
            "use strict";
            r(4942);
        },
        4942: (t, e, r) => {
            "use strict";
            r(4462);
        },
        147: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return n.packageInfo;
                }
            }), r(8136);
            var n = r(538);
        },
        8065: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.default = void 0;
            var n = r(7239), i = r(2587), o = [ n.packageInfo, i.packageInfo ];
            e.default = o;
        },
        3005: (t, e, r) => {
            "use strict";
            var n = r(3203), i = r(4575), o = n(r(8065)), s = r(538);
            (0, i.detectPackage)(s.packageInfo, null, o.default);
        },
        1083: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), r(3005);
            var n = r(147);
            Object.keys(n).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (t in e && e[t] === n[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return n[t];
                    }
                }));
            }));
        },
        538: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/rpc-augment",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        7239: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/rpc-core",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        4462: () => {},
        6298: (t, e, r) => {
            "use strict";
            r(9780), r(9991);
        },
        5711: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return n.packageInfo;
                }
            }), r(6298);
            var n = r(6043);
        },
        6874: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.default = void 0;
            var n = r(2587), i = r(7978), o = [ n.packageInfo, i.packageInfo ];
            e.default = o;
        },
        3028: (t, e, r) => {
            "use strict";
            var n = r(3203), i = r(4575), o = n(r(6874)), s = r(6043);
            (0, i.detectPackage)(s.packageInfo, null, o.default);
        },
        3341: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), r(3028);
            var n = r(5711);
            Object.keys(n).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (t in e && e[t] === n[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return n[t];
                    }
                }));
            }));
        },
        9991: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = r(8222);
            Object.keys(n).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (t in e && e[t] === n[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return n[t];
                    }
                }));
            }));
        },
        4062: (t, e, r) => {
            "use strict";
            r(3127);
        },
        5800: (t, e, r) => {
            "use strict";
            r(3127);
        },
        4841: (t, e, r) => {
            "use strict";
            r(3127);
        },
        8222: (t, e, r) => {
            "use strict";
            r(4841), r(5800), r(4062);
        },
        6043: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/types-augment",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        9780: (t, e, r) => {
            "use strict";
            r(59);
        },
        59: (t, e, r) => {
            "use strict";
            r(5720);
        },
        5898: (t, e, r) => {
            "use strict";
            r(5720);
        },
        7978: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/types-codec",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        3127: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.__TYPES_LOOKUP = void 0;
            e.__TYPES_LOOKUP = "augmented";
        },
        2587: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/types",
                path: __dirname,
                type: "cjs",
                version: "9.10.3"
            };
            e.packageInfo = r;
        },
        5720: () => {},
        5928: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayChunk = function(t, e) {
                const r = Math.ceil(t.length / e);
                if (1 === r) return [ t ];
                const n = Array(r);
                for (let i = 0; i < r; i++) {
                    const r = i * e;
                    n[i] = t.slice(r, r + e);
                }
                return n;
            };
        },
        9221: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayFilter = function(t) {
                let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                return t.filter((t => void 0 !== t && (e || null !== t)));
            };
        },
        8616: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayFlatten = function(t) {
                if (0 === t.length) return [];
                if (1 === t.length) return t[0];
                let e = 0;
                for (let r = 0; r < t.length; r++) e += t[r].length;
                const r = new Array(e);
                let n = -1;
                for (let e = 0; e < t.length; e++) {
                    const i = t[e];
                    for (let t = 0; t < i.length; t++) r[++n] = i[t];
                }
                return r;
            };
        },
        2461: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "arrayChunk", {
                enumerable: !0,
                get: function() {
                    return n.arrayChunk;
                }
            }), Object.defineProperty(e, "arrayFilter", {
                enumerable: !0,
                get: function() {
                    return i.arrayFilter;
                }
            }), Object.defineProperty(e, "arrayFlatten", {
                enumerable: !0,
                get: function() {
                    return o.arrayFlatten;
                }
            }), Object.defineProperty(e, "arrayRange", {
                enumerable: !0,
                get: function() {
                    return s.arrayRange;
                }
            }), Object.defineProperty(e, "arrayShuffle", {
                enumerable: !0,
                get: function() {
                    return a.arrayShuffle;
                }
            }), Object.defineProperty(e, "arrayUnzip", {
                enumerable: !0,
                get: function() {
                    return u.arrayUnzip;
                }
            }), Object.defineProperty(e, "arrayZip", {
                enumerable: !0,
                get: function() {
                    return l.arrayZip;
                }
            });
            var n = r(5928), i = r(9221), o = r(8616), s = r(4140), a = r(8244), u = r(874), l = r(7249);
        },
        4140: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayRange = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                if (t <= 0) throw new Error("Expected non-zero, positive number as a range size");
                const r = new Array(t);
                for (let n = 0; n < t; n++) r[n] = n + e;
                return r;
            };
        },
        8244: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayShuffle = function(t) {
                const e = t.slice();
                let r = e.length;
                if (1 === r) return e;
                for (;0 !== r; ) {
                    const t = ~~(Math.random() * r);
                    r--, [e[r], e[t]] = [ e[t], e[r] ];
                }
                return e;
            };
        },
        874: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayUnzip = function(t) {
                const e = new Array(t.length), r = new Array(t.length);
                for (let n = 0; n < t.length; n++) [e[n], r[n]] = t[n];
                return [ e, r ];
            };
        },
        7249: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.arrayZip = function(t, e) {
                const r = new Array(t.length);
                for (let n = 0; n < t.length; n++) r[n] = [ t[n], e[n] ];
                return r;
            };
        },
        4032: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.assert = i, e.assertReturn = function(t, e) {
                return i(null != t, e), t;
            }, e.assertUnreachable = function(t) {
                throw new Error(`This codepath should be unreachable. Unhandled input: ${t}`);
            };
            var n = r(4526);
            function i(t, e) {
                if (!t) throw new Error((0, n.isFunction)(e) ? e() : e);
            }
        },
        5405: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e._sqrt2pow53n = e._9n = e._8n = e._7n = e._6n = e._5n = e._4n = e._3n = e._2pow53n = e._2n = e._1n = e._1Qn = e._1Mn = e._1Bn = e._10n = e._100n = e._1000n = e._0n = void 0;
            var n = r(6038);
            const i = (0, n.BigInt)(0);
            e._0n = i;
            const o = (0, n.BigInt)(1);
            e._1n = o;
            const s = (0, n.BigInt)(2);
            e._2n = s;
            const a = (0, n.BigInt)(3);
            e._3n = a;
            const u = (0, n.BigInt)(4);
            e._4n = u;
            const l = (0, n.BigInt)(5);
            e._5n = l;
            const c = (0, n.BigInt)(6);
            e._6n = c;
            const h = (0, n.BigInt)(7);
            e._7n = h;
            const f = (0, n.BigInt)(8);
            e._8n = f;
            const d = (0, n.BigInt)(9);
            e._9n = d;
            const p = (0, n.BigInt)(10);
            e._10n = p;
            const m = (0, n.BigInt)(100);
            e._100n = m;
            const g = (0, n.BigInt)(1e3);
            e._1000n = g;
            const y = (0, n.BigInt)(1e6);
            e._1Mn = y;
            const v = (0, n.BigInt)(1e9);
            e._1Bn = v;
            const b = v * v;
            e._1Qn = b;
            const w = (0, n.BigInt)(Number.MAX_SAFE_INTEGER);
            e._2pow53n = w;
            const A = (0, n.BigInt)(94906265);
            e._sqrt2pow53n = A;
        },
        2077: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.createCmp = function(t) {
                return function() {
                    for (var e = arguments.length, r = new Array(e), n = 0; n < e; n++) r[n] = arguments[n];
                    if (0 === r.length) throw new Error("Must provide one or more arguments");
                    let i = r[0];
                    for (let e = 1; e < r.length; e++) t(r[e], i) && (i = r[e]);
                    return i;
                };
            };
        },
        3873: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = {
                nSqrt: !0,
                nToBigInt: !0,
                nMax: !0,
                nMin: !0,
                nToHex: !0,
                nToU8a: !0
            };
            Object.defineProperty(e, "nMax", {
                enumerable: !0,
                get: function() {
                    return a.nMax;
                }
            }), Object.defineProperty(e, "nMin", {
                enumerable: !0,
                get: function() {
                    return a.nMin;
                }
            }), Object.defineProperty(e, "nSqrt", {
                enumerable: !0,
                get: function() {
                    return o.nSqrt;
                }
            }), Object.defineProperty(e, "nToBigInt", {
                enumerable: !0,
                get: function() {
                    return s.nToBigInt;
                }
            }), Object.defineProperty(e, "nToHex", {
                enumerable: !0,
                get: function() {
                    return u.nToHex;
                }
            }), Object.defineProperty(e, "nToU8a", {
                enumerable: !0,
                get: function() {
                    return l.nToU8a;
                }
            });
            var i = r(5405);
            Object.keys(i).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === i[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return i[t];
                    }
                }));
            }));
            var o = r(8387), s = r(872), a = r(4078), u = r(2767), l = r(3158);
        },
        4078: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.nMin = e.nMax = void 0;
            var n = r(2077);
            const i = (0, n.createCmp)(((t, e) => t > e));
            e.nMax = i;
            const o = (0, n.createCmp)(((t, e) => t < e));
            e.nMin = o;
        },
        8387: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.nSqrt = function(t) {
                const e = (0, o.nToBigInt)(t);
                if (e < i._0n) throw new Error("square root of negative numbers is not supported");
                if (e <= i._2pow53n) return (0, n.BigInt)(~~Math.sqrt(Number(e)));
                let r = i._sqrt2pow53n;
                for (;;) {
                    const t = e / r + r >> i._1n;
                    if (r === t || r === t - i._1n) return r;
                    r = t;
                }
            };
            var n = r(6038), i = r(5405), o = r(872);
        },
        872: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.nToBigInt = function(t) {
                return "bigint" == typeof t ? t : t ? (0, s.isHex)(t) ? (0, i.hexToBigInt)(t.toString()) : (0, 
                o.isBn)(t) ? (0, n.BigInt)(t.toString()) : (0, a.isToBigInt)(t) ? t.toBigInt() : (0, 
                u.isToBn)(t) ? (0, n.BigInt)(t.toBn().toString()) : (0, n.BigInt)(t) : (0, n.BigInt)(0);
            };
            var n = r(6038), i = r(4889), o = r(3999), s = r(4286), a = r(5226), u = r(9033);
        },
        2767: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.nToHex = function(t) {
                let {bitLength: e, isLe: r = !1, isNegative: o = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                return (0, n.u8aToHex)((0, i.nToU8a)(t || 0, {
                    bitLength: e,
                    isLe: r,
                    isNegative: o
                }));
            };
            var n = r(9409), i = r(3158);
        },
        3158: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.nToU8a = function(t) {
                let {bitLength: e = -1, isLe: r = !0, isNegative: n = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const u = (0, o.nToBigInt)(t);
                if (u === i._0n) return -1 === e ? new Uint8Array(1) : new Uint8Array(Math.ceil((e || 0) / 8));
                const l = function(t, e, r) {
                    const n = [];
                    r && (t = (t + i._1n) * -i._1n);
                    for (;t !== i._0n; ) {
                        const i = t % s, o = Number(r ? i ^ a : i);
                        e ? n.push(o) : n.unshift(o), t = (t - i) / s;
                    }
                    return Uint8Array.from(n);
                }(u, r, n);
                if (-1 === e) return l;
                const c = Math.ceil((e || 0) / 8), h = new Uint8Array(c);
                n && h.fill(255);
                return h.set(l, r ? 0 : c - l.length), h;
            };
            var n = r(6038), i = r(5405), o = r(872);
            const s = (0, n.BigInt)(256), a = (0, n.BigInt)(255);
        },
        6230: (t, e, r) => {
            "use strict";
            var n = r(3203);
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "BN", {
                enumerable: !0,
                get: function() {
                    return i.default;
                }
            });
            var i = n(r(3785));
        },
        4787: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.BN_ZERO = e.BN_TWO = e.BN_THREE = e.BN_THOUSAND = e.BN_TEN = e.BN_SQRT_MAX_INTEGER = e.BN_SIX = e.BN_SEVEN = e.BN_QUINTILL = e.BN_ONE = e.BN_NINE = e.BN_MILLION = e.BN_MAX_INTEGER = e.BN_HUNDRED = e.BN_FOUR = e.BN_FIVE = e.BN_EIGHT = e.BN_BILLION = void 0;
            var n = r(6230);
            const i = new n.BN(0);
            e.BN_ZERO = i;
            const o = new n.BN(1);
            e.BN_ONE = o;
            const s = new n.BN(2);
            e.BN_TWO = s;
            const a = new n.BN(3);
            e.BN_THREE = a;
            const u = new n.BN(4);
            e.BN_FOUR = u;
            const l = new n.BN(5);
            e.BN_FIVE = l;
            const c = new n.BN(6);
            e.BN_SIX = c;
            const h = new n.BN(7);
            e.BN_SEVEN = h;
            const f = new n.BN(8);
            e.BN_EIGHT = f;
            const d = new n.BN(9);
            e.BN_NINE = d;
            const p = new n.BN(10);
            e.BN_TEN = p;
            const m = new n.BN(100);
            e.BN_HUNDRED = m;
            const g = new n.BN(1e3);
            e.BN_THOUSAND = g;
            const y = new n.BN(1e6);
            e.BN_MILLION = y;
            const v = new n.BN(1e9);
            e.BN_BILLION = v;
            const b = v.mul(v);
            e.BN_QUINTILL = b;
            const w = new n.BN(Number.MAX_SAFE_INTEGER);
            e.BN_MAX_INTEGER = w;
            const A = new n.BN(94906265);
            e.BN_SQRT_MAX_INTEGER = A;
        },
        8190: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "bnFromHex", {
                enumerable: !0,
                get: function() {
                    return n.hexToBn;
                }
            });
            var n = r(6812);
        },
        3968: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = {
                BN: !0,
                bnFromHex: !0,
                bnMax: !0,
                bnMin: !0,
                bnSqrt: !0,
                bnToBn: !0,
                bnToHex: !0,
                bnToU8a: !0
            };
            Object.defineProperty(e, "BN", {
                enumerable: !0,
                get: function() {
                    return o.BN;
                }
            }), Object.defineProperty(e, "bnFromHex", {
                enumerable: !0,
                get: function() {
                    return s.bnFromHex;
                }
            }), Object.defineProperty(e, "bnMax", {
                enumerable: !0,
                get: function() {
                    return a.bnMax;
                }
            }), Object.defineProperty(e, "bnMin", {
                enumerable: !0,
                get: function() {
                    return a.bnMin;
                }
            }), Object.defineProperty(e, "bnSqrt", {
                enumerable: !0,
                get: function() {
                    return u.bnSqrt;
                }
            }), Object.defineProperty(e, "bnToBn", {
                enumerable: !0,
                get: function() {
                    return l.bnToBn;
                }
            }), Object.defineProperty(e, "bnToHex", {
                enumerable: !0,
                get: function() {
                    return c.bnToHex;
                }
            }), Object.defineProperty(e, "bnToU8a", {
                enumerable: !0,
                get: function() {
                    return h.bnToU8a;
                }
            });
            var i = r(4787);
            Object.keys(i).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === i[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return i[t];
                    }
                }));
            }));
            var o = r(6230), s = r(8190), a = r(289), u = r(8558), l = r(481), c = r(237), h = r(5459);
        },
        289: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.bnMin = e.bnMax = void 0;
            var n = r(2077);
            const i = (0, n.createCmp)(((t, e) => t.gt(e)));
            e.bnMax = i;
            const o = (0, n.createCmp)(((t, e) => t.lt(e)));
            e.bnMin = o;
        },
        8558: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.bnSqrt = function(t) {
                const e = (0, o.bnToBn)(t);
                if (e.isNeg()) throw new Error("square root of negative numbers is not supported");
                if (e.lte(i.BN_MAX_INTEGER)) return new n.BN(~~Math.sqrt(e.toNumber()));
                let r = i.BN_SQRT_MAX_INTEGER.clone();
                for (;;) {
                    const t = e.div(r).iadd(r).ishrn(1);
                    if (r.eq(t) || r.eq(t.sub(i.BN_ONE))) return r;
                    r = t;
                }
            };
            var n = r(6230), i = r(4787), o = r(481);
        },
        481: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.bnToBn = function(t) {
                return t ? u.BN.isBN(t) ? t : (0, o.isHex)(t) ? (0, n.hexToBn)(t.toString()) : (0, 
                i.isBigInt)(t) ? new u.BN(t.toString()) : (0, a.isToBn)(t) ? t.toBn() : (0, s.isToBigInt)(t) ? new u.BN(t.toBigInt().toString()) : new u.BN(t) : new u.BN(0);
            };
            var n = r(6812), i = r(9261), o = r(4286), s = r(5226), a = r(9033), u = r(6230);
        },
        237: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.bnToHex = function(t) {
                let {bitLength: e = -1, isLe: r = !1, isNegative: o = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                return (0, n.u8aToHex)((0, i.bnToU8a)(t, {
                    bitLength: e,
                    isLe: r,
                    isNegative: o
                }));
            };
            var n = r(9409), i = r(5459);
        },
        5459: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.bnToU8a = function(t) {
                let {bitLength: e = -1, isLe: r = !0, isNegative: o = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i;
                const s = (0, n.bnToBn)(t), a = -1 === e ? Math.ceil(s.bitLength() / 8) : Math.ceil((e || 0) / 8);
                if (!t) return -1 === e ? new Uint8Array(1) : new Uint8Array(a);
                const u = new Uint8Array(a), l = o ? s.toTwos(8 * a) : s;
                return u.set(l.toArray(r ? "le" : "be", a), 0), u;
            };
            var n = r(481);
            const i = {
                bitLength: -1,
                isLe: !0,
                isNegative: !1
            };
        },
        2870: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "bufferToU8a", {
                enumerable: !0,
                get: function() {
                    return n.bufferToU8a;
                }
            });
            var n = r(9575);
        },
        9575: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.bufferToU8a = function(t) {
                return new Uint8Array(t || []);
            };
        },
        8573: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            });
            var n = {
                packageInfo: !0
            };
            Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return i.packageInfo;
                }
            });
            var i = r(879), o = r(2461);
            Object.keys(o).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === o[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return o[t];
                    }
                }));
            }));
            var s = r(4032);
            Object.keys(s).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === s[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return s[t];
                    }
                }));
            }));
            var a = r(3873);
            Object.keys(a).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === a[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return a[t];
                    }
                }));
            }));
            var u = r(3968);
            Object.keys(u).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === u[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return u[t];
                    }
                }));
            }));
            var l = r(2870);
            Object.keys(l).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === l[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return l[t];
                    }
                }));
            }));
            var c = r(3526);
            Object.keys(c).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === c[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return c[t];
                    }
                }));
            }));
            var h = r(6205);
            Object.keys(h).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === h[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return h[t];
                    }
                }));
            }));
            var f = r(5023);
            Object.keys(f).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === f[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return f[t];
                    }
                }));
            }));
            var d = r(9959);
            Object.keys(d).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === d[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return d[t];
                    }
                }));
            }));
            var p = r(3393);
            Object.keys(p).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === p[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return p[t];
                    }
                }));
            }));
            var m = r(7704);
            Object.keys(m).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === m[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return m[t];
                    }
                }));
            }));
            var g = r(9247);
            Object.keys(g).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === g[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return g[t];
                    }
                }));
            }));
            var y = r(7598);
            Object.keys(y).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === y[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return y[t];
                    }
                }));
            }));
            var v = r(619);
            Object.keys(v).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === v[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return v[t];
                    }
                }));
            }));
            var b = r(3296);
            Object.keys(b).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === b[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return b[t];
                    }
                }));
            }));
            var w = r(7358);
            Object.keys(w).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === w[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return w[t];
                    }
                }));
            }));
            var A = r(3904);
            Object.keys(A).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === A[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return A[t];
                    }
                }));
            }));
            var _ = r(7777);
            Object.keys(_).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === _[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return _[t];
                    }
                }));
            }));
            var E = r(2881);
            Object.keys(E).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === E[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return E[t];
                    }
                }));
            }));
            var M = r(1301);
            Object.keys(M).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === M[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return M[t];
                    }
                }));
            }));
            var P = r(906);
            Object.keys(P).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === P[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return P[t];
                    }
                }));
            }));
            var k = r(9409);
            Object.keys(k).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === k[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return k[t];
                    }
                }));
            }));
            var S = r(883);
            Object.keys(S).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (Object.prototype.hasOwnProperty.call(n, t) || t in e && e[t] === S[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return S[t];
                    }
                }));
            }));
        },
        9954: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.compactAddLength = function(t) {
                return (0, n.u8aConcatStrict)([ (0, i.compactToU8a)(t.length), t ]);
            };
            var n = r(9409), i = r(3057);
        },
        5723: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.compactFromU8a = function(t) {
                const e = (0, i.u8aToU8a)(t);
                switch (3 & e[0]) {
                  case 0:
                    return [ 1, new n.BN(e[0] >>> 2) ];

                  case 1:
                    return [ 2, new n.BN(e[0] + (e[1] << 8) >>> 2) ];

                  case 2:
                    return [ 4, new n.BN(e[0] + (e[1] << 8) + (e[2] << 16) + 16777216 * e[3] >>> 2) ];

                  default:
                    {
                        const t = 5 + (e[0] >>> 2);
                        switch (t) {
                          case 5:
                            return [ 5, new n.BN(e[1] + (e[2] << 8) + (e[3] << 16) + 16777216 * e[4]) ];

                          case 6:
                            return [ 6, new n.BN(e[1] + (e[2] << 8) + (e[3] << 16) + 16777216 * (e[4] + (e[5] << 8))) ];

                          case 7:
                            return [ 7, new n.BN(e[1] + (e[2] << 8) + (e[3] << 16) + 16777216 * (e[4] + (e[5] << 8) + (e[6] << 16))) ];

                          default:
                            return [ t, (0, i.u8aToBn)(e.subarray(1, t)) ];
                        }
                    }
                }
            }, e.compactFromU8aLim = function(t) {
                switch (3 & t[0]) {
                  case 0:
                    return [ 1, t[0] >>> 2 ];

                  case 1:
                    return [ 2, t[0] + (t[1] << 8) >>> 2 ];

                  case 2:
                    return [ 4, t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] >>> 2 ];

                  default:
                    switch (5 + (t[0] >>> 2)) {
                      case 5:
                        return [ 5, t[1] + (t[2] << 8) + (t[3] << 16) + 16777216 * t[4] ];

                      case 6:
                        return [ 6, t[1] + (t[2] << 8) + (t[3] << 16) + 16777216 * (t[4] + (t[5] << 8)) ];

                      case 7:
                        return [ 7, t[1] + (t[2] << 8) + (t[3] << 16) + 16777216 * (t[4] + (t[5] << 8) + (t[6] << 16)) ];

                      default:
                        throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
                    }
                }
            };
            var n = r(3968), i = r(9409);
        },
        3526: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "compactAddLength", {
                enumerable: !0,
                get: function() {
                    return n.compactAddLength;
                }
            }), Object.defineProperty(e, "compactFromU8a", {
                enumerable: !0,
                get: function() {
                    return o.compactFromU8a;
                }
            }), Object.defineProperty(e, "compactFromU8aLim", {
                enumerable: !0,
                get: function() {
                    return o.compactFromU8aLim;
                }
            }), Object.defineProperty(e, "compactStripLength", {
                enumerable: !0,
                get: function() {
                    return i.compactStripLength;
                }
            }), Object.defineProperty(e, "compactToU8a", {
                enumerable: !0,
                get: function() {
                    return s.compactToU8a;
                }
            });
            var n = r(9954), i = r(8171), o = r(5723), s = r(3057);
        },
        8171: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.compactStripLength = function(t) {
                const [e, r] = (0, n.compactFromU8a)(t), i = e + r.toNumber();
                return [ i, t.subarray(e, i) ];
            };
            var n = r(5723);
        },
        3057: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.compactToU8a = function(t) {
                const e = (0, n.bnToBn)(t);
                if (e.lte(o)) return new Uint8Array([ e.toNumber() << 2 ]);
                if (e.lte(s)) return (0, n.bnToU8a)(e.shln(2).iadd(n.BN_ONE), u);
                if (e.lte(a)) return (0, n.bnToU8a)(e.shln(2).iadd(n.BN_TWO), l);
                const r = (0, n.bnToU8a)(e);
                let c = r.length;
                for (;0 === r[c - 1]; ) c--;
                if (c < 4) throw new Error("Invalid length, previous checks match anything less than 2^30");
                return (0, i.u8aConcatStrict)([ new Uint8Array([ 3 + (c - 4 << 2) ]), r.subarray(0, c) ]);
            };
            var n = r(3968), i = r(9409);
            const o = n.BN_TWO.pow(new n.BN(6)).isub(n.BN_ONE), s = n.BN_TWO.pow(new n.BN(14)).isub(n.BN_ONE), a = n.BN_TWO.pow(new n.BN(30)).isub(n.BN_ONE), u = {
                bitLength: 16
            }, l = {
                bitLength: 32
            };
        },
        2420: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.default = void 0;
            var n = r(7679), i = r(7327), o = [ n.packageInfo, i.packageInfo ];
            e.default = o;
        },
        6347: (t, e, r) => {
            "use strict";
            var n = r(3203)(r(2420)), i = r(879);
            (0, r(883).detectPackage)(i.packageInfo, null, n.default);
        },
        6205: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.extractTime = a;
            const r = 6e4, n = 60 * r, i = 24 * n, o = {
                days: 0,
                hours: 0,
                milliseconds: 0,
                minutes: 0,
                seconds: 0
            };
            function s(t, e) {
                return {
                    days: (t.days || 0) + e.days,
                    hours: (t.hours || 0) + e.hours,
                    milliseconds: (t.milliseconds || 0) + e.milliseconds,
                    minutes: (t.minutes || 0) + e.minutes,
                    seconds: (t.seconds || 0) + e.seconds
                };
            }
            function a(t) {
                return t ? t < 1e3 ? s({
                    milliseconds: t
                }, o) : function(t) {
                    const e = t / 1e3;
                    if (e < 60) {
                        const r = ~~e;
                        return s({
                            seconds: r
                        }, a(t - 1e3 * r));
                    }
                    const o = e / 60;
                    if (o < 60) {
                        const e = ~~o;
                        return s({
                            minutes: e
                        }, a(t - e * r));
                    }
                    const u = o / 60;
                    if (u < 24) {
                        const e = ~~u;
                        return s({
                            hours: e
                        }, a(t - e * n));
                    }
                    const l = ~~(u / 24);
                    return s({
                        days: l
                    }, a(t - l * i));
                }(t) : o;
            }
        },
        5023: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "floatToU8a", {
                enumerable: !0,
                get: function() {
                    return n.floatToU8a;
                }
            });
            var n = r(586);
        },
        586: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.floatToU8a = function() {
                let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, {bitLength: e = 32, isLe: r = !0} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (32 !== e && 64 !== e) throw new Error("Invalid bitLength provided, expected 32 or 64");
                const n = new Uint8Array(e / 8), i = new DataView(n.buffer, n.byteOffset);
                32 === e ? i.setFloat32(0, Number(t), r) : i.setFloat64(0, Number(t), r);
                return n;
            };
        },
        2006: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.formatBalance = void 0;
            var n = r(481), i = r(8891), o = r(9511), s = r(4788), a = r(9894);
            const u = a.SI[a.SI_MID].text;
            let l = 0, c = u;
            const h = function(t) {
                let {decimals: e = l, forceUnit: r, locale: u = "en", withAll: c = !1, withSi: h = !0, withSiFull: f = !1, withUnit: d = !0, withZero: p = !0} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, m = (0, 
                n.bnToBn)(t).toString();
                if (0 === m.length || "0" === m) return "0";
                let g = "";
                m[0].startsWith("-") && (g = "-", m = m.substring(1));
                const y = (0, a.calcSi)(m, e, r), v = m.length - (e + y.power), b = v <= 0 ? "0" : m.substring(0, v);
                let w = m.padStart(v < 0 ? e : 1, "0").substring(v < 0 ? 0 : v).padEnd(c ? Math.max(e, 4) : 4, "0").substring(0, c ? Math.max(4, e + y.power) : 4);
                if (!p) {
                    let t = w.length - 1;
                    do {
                        "0" === w[t] && t--;
                    } while ("0" === w[t]);
                    w = w.substring(0, t + 1);
                }
                const A = (0, i.isBoolean)(d) ? a.SI[a.SI_MID].text : d, _ = h || f ? "-" === y.value ? d ? ` ${A}` : "" : ` ${f ? `${y.text}${d ? " " : ""}` : y.value}${d ? A : ""}` : "", {decimal: E, thousand: M} = (0, 
                s.getSeparator)(u);
                return `${g}${(0, o.formatDecimal)(b, M)}${w && `${E}${w}`}${_}`;
            };
            e.formatBalance = h, h.calcSi = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l;
                return (0, a.calcSi)(t, e);
            }, h.findSi = a.findSi, h.getDefaults = () => ({
                decimals: l,
                unit: c
            }), h.getOptions = function() {
                let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l;
                return a.SI.filter((e => {
                    let {power: r} = e;
                    return !(r < 0) || t + r >= 0;
                }));
            }, h.setDefaults = t => {
                let {decimals: e, unit: r} = t;
                l = void 0 === e ? l : Array.isArray(e) ? e[0] : e, c = void 0 === r ? c : Array.isArray(r) ? r[0] : r, 
                a.SI[a.SI_MID].text = c;
            };
        },
        5493: (t, e) => {
            "use strict";
            function r(t) {
                return t.toString().padStart(2, "0");
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.formatDate = function(t) {
                const e = t.getFullYear().toString(), n = r(t.getMonth() + 1), i = r(t.getDate()), o = r(t.getHours()), s = r(t.getMinutes()), a = r(t.getSeconds());
                return `${e}-${n}-${i} ${o}:${s}:${a}`;
            };
        },
        9511: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.formatDecimal = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ",";
                const n = t[0].startsWith("-"), i = n ? t.substring(1).match(r) : t.match(r);
                return i ? `${n ? "-" : ""}${i.join(e)}` : t;
            };
            const r = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
        },
        5716: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.formatElapsed = function(t, e) {
                const r = t && t.getTime() || 0, i = e instanceof Date ? e.getTime() : (0, n.bnToBn)(e).toNumber();
                return r && i ? function(t) {
                    if (t < 15) return `${t.toFixed(1)}s`;
                    if (t < 60) return (0 | t) + "s";
                    if (t < 3600) return (t / 60 | 0) + "m";
                    return (t / 3600 | 0) + "h";
                }(Math.max(Math.abs(r - i), 0) / 1e3) : "0.0s";
            };
            var n = r(481);
        },
        8942: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.formatNumber = function(t) {
                let {locale: e = "en"} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const {thousand: r} = (0, o.getSeparator)(e);
                return (0, i.formatDecimal)((0, n.bnToBn)(t).toString(), r);
            };
            var n = r(481), i = r(9511), o = r(4788);
        },
        4788: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.getSeparator = function(t) {
                return {
                    decimal: .1.toLocaleString(t).substring(1, 2),
                    thousand: 1e3.toLocaleString(t).substring(1, 2)
                };
            };
        },
        9959: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "calcSi", {
                enumerable: !0,
                get: function() {
                    return u.calcSi;
                }
            }), Object.defineProperty(e, "findSi", {
                enumerable: !0,
                get: function() {
                    return u.findSi;
                }
            }), Object.defineProperty(e, "formatBalance", {
                enumerable: !0,
                get: function() {
                    return n.formatBalance;
                }
            }), Object.defineProperty(e, "formatDate", {
                enumerable: !0,
                get: function() {
                    return i.formatDate;
                }
            }), Object.defineProperty(e, "formatDecimal", {
                enumerable: !0,
                get: function() {
                    return o.formatDecimal;
                }
            }), Object.defineProperty(e, "formatElapsed", {
                enumerable: !0,
                get: function() {
                    return s.formatElapsed;
                }
            }), Object.defineProperty(e, "formatNumber", {
                enumerable: !0,
                get: function() {
                    return a.formatNumber;
                }
            });
            var n = r(2006), i = r(5493), o = r(9511), s = r(5716), a = r(8942), u = r(9894);
        },
        9894: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.SI_MID = e.SI = void 0, e.calcSi = function(t, e, o) {
                if (o) return i(o);
                const s = r - 1 + Math.ceil((t.length - e) / 3);
                return n[s] || n[s < 0 ? 0 : n.length - 1];
            }, e.findSi = i;
            const r = 8;
            e.SI_MID = r;
            const n = [ {
                power: -24,
                text: "yocto",
                value: "y"
            }, {
                power: -21,
                text: "zepto",
                value: "z"
            }, {
                power: -18,
                text: "atto",
                value: "a"
            }, {
                power: -15,
                text: "femto",
                value: "f"
            }, {
                power: -12,
                text: "pico",
                value: "p"
            }, {
                power: -9,
                text: "nano",
                value: "n"
            }, {
                power: -6,
                text: "micro",
                value: "µ"
            }, {
                power: -3,
                text: "milli",
                value: "m"
            }, {
                power: 0,
                text: "Unit",
                value: "-"
            }, {
                power: 3,
                text: "Kilo",
                value: "k"
            }, {
                power: 6,
                text: "Mill",
                value: "M"
            }, {
                power: 9,
                text: "Bill",
                value: "B"
            }, {
                power: 12,
                text: "Tril",
                value: "T"
            }, {
                power: 15,
                text: "Peta",
                value: "P"
            }, {
                power: 18,
                text: "Exa",
                value: "E"
            }, {
                power: 21,
                text: "Zeta",
                value: "Z"
            }, {
                power: 24,
                text: "Yotta",
                value: "Y"
            } ];
            function i(t) {
                for (let e = 0; e < n.length; e++) if (n[e].value === t) return n[e];
                return n[r];
            }
            e.SI = n;
        },
        3393: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hasWasm = e.hasProcess = e.hasEsm = e.hasDirname = e.hasCjs = e.hasBuffer = e.hasBigInt = void 0;
            var n = r(6038), i = r(9249);
            const o = "function" == typeof n.BigInt && "function" == typeof n.BigInt.asIntN;
            e.hasBigInt = o;
            e.hasCjs = true;
            const s = "undefined" != typeof __dirname;
            e.hasDirname = s;
            e.hasEsm = false;
            const a = "undefined" != typeof WebAssembly;
            e.hasWasm = a;
            const u = "function" == typeof i.xglobal.Buffer && "function" == typeof i.xglobal.Buffer.isBuffer;
            e.hasBuffer = u;
            const l = "object" == typeof i.xglobal.process;
            e.hasProcess = l;
        },
        631: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexAddPrefix = function(t) {
                return t && (0, n.hexHasPrefix)(t) ? t : `0x${t && t.length % 2 == 1 ? "0" : ""}${t || ""}`;
            };
            var n = r(2198);
        },
        5267: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexFixLength = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1, r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                const o = Math.ceil(e / 4), s = o + 2;
                return (0, n.hexAddPrefix)(-1 === e || t.length === s || !r && t.length < s ? (0, 
                i.hexStripPrefix)(t) : t.length > s ? (0, i.hexStripPrefix)(t).slice(-1 * o) : `${"0".repeat(o)}${(0, 
                i.hexStripPrefix)(t)}`.slice(-1 * o));
            };
            var n = r(631), i = r(9357);
        },
        2198: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexHasPrefix = function(t) {
                return !!t && (0, n.isHex)(t, -1);
            };
            var n = r(4286);
        },
        7704: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "hexAddPrefix", {
                enumerable: !0,
                get: function() {
                    return n.hexAddPrefix;
                }
            }), Object.defineProperty(e, "hexFixLength", {
                enumerable: !0,
                get: function() {
                    return i.hexFixLength;
                }
            }), Object.defineProperty(e, "hexHasPrefix", {
                enumerable: !0,
                get: function() {
                    return o.hexHasPrefix;
                }
            }), Object.defineProperty(e, "hexStripPrefix", {
                enumerable: !0,
                get: function() {
                    return s.hexStripPrefix;
                }
            }), Object.defineProperty(e, "hexToBigInt", {
                enumerable: !0,
                get: function() {
                    return a.hexToBigInt;
                }
            }), Object.defineProperty(e, "hexToBn", {
                enumerable: !0,
                get: function() {
                    return u.hexToBn;
                }
            }), Object.defineProperty(e, "hexToNumber", {
                enumerable: !0,
                get: function() {
                    return l.hexToNumber;
                }
            }), Object.defineProperty(e, "hexToString", {
                enumerable: !0,
                get: function() {
                    return c.hexToString;
                }
            }), Object.defineProperty(e, "hexToU8a", {
                enumerable: !0,
                get: function() {
                    return h.hexToU8a;
                }
            });
            var n = r(631), i = r(5267), o = r(2198), s = r(9357), a = r(4889), u = r(6812), l = r(2926), c = r(2508), h = r(3181);
        },
        9357: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexStripPrefix = function(t) {
                if (!t || "0x" === t) return "";
                if (n.REGEX_HEX_PREFIXED.test(t)) return t.substring(2);
                if (n.REGEX_HEX_NOPREFIX.test(t)) return t;
                throw new Error(`Expected hex value to convert, found '${t}'`);
            };
            var n = r(4286);
        },
        4889: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexToBigInt = function(t) {
                let {isLe: e = !1, isNegative: r = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                return t && "0x" !== t ? (0, i.u8aToBigInt)((0, o.hexToU8a)(t), {
                    isLe: e,
                    isNegative: r
                }) : (0, n.BigInt)(0);
            };
            var n = r(6038), i = r(7471), o = r(3181);
        },
        6812: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexToBn = function(t) {
                let {isLe: e = !1, isNegative: r = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (!t || "0x" === t) return new n.BN(0);
                const o = (0, i.hexStripPrefix)(t), s = new n.BN(o, 16, e ? "le" : "be");
                return r ? s.fromTwos(4 * o.length) : s;
            };
            var n = r(6230), i = r(9357);
        },
        2926: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexToNumber = function(t) {
                return t ? (0, n.hexToBn)(t).toNumber() : NaN;
            };
            var n = r(6812);
        },
        2508: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexToString = function(t) {
                return (0, n.u8aToString)((0, i.hexToU8a)(t));
            };
            var n = r(3507), i = r(3181);
        },
        3181: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.hexToU8a = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
                if (!t) return new Uint8Array;
                let r = t.startsWith("0x") ? 2 : 0;
                const n = Math.ceil((t.length - r) / 2), o = Math.ceil(-1 === e ? n : e / 8), s = new Uint8Array(o);
                for (let e = o > n ? o - n : 0; e < o; e++, r += 2) s[e] = i[t.charCodeAt(r) << 8 | t.charCodeAt(r + 1)];
                return s;
            };
            const r = "0123456789abcdef", n = new Uint8Array(256), i = new Uint8Array(65536);
            for (let t = 0; t < 16; t++) n[0 | r[t].charCodeAt(0)] = 0 | t, t > 9 && (n[0 | r[t].toUpperCase().charCodeAt(0)] = 0 | t);
            for (let t = 0; t < 256; t++) {
                const e = t << 8;
                for (let r = 0; r < 256; r++) i[e | r] = n[t] << 4 | n[r];
            }
        },
        4575: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), r(6347);
            var n = r(8573);
            Object.keys(n).forEach((function(t) {
                "default" !== t && "__esModule" !== t && (t in e && e[t] === n[t] || Object.defineProperty(e, t, {
                    enumerable: !0,
                    get: function() {
                        return n[t];
                    }
                }));
            }));
        },
        7550: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isArray = function(t) {
                return Array.isArray(t);
            };
        },
        4790: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isAscii = function(t) {
                return (0, o.isString)(t) ? (0, i.isHex)(t) ? s((0, n.u8aToU8a)(t)) : function(t) {
                    const e = 0 | t.length;
                    for (let r = 0; r < e; r++) {
                        const e = t.charCodeAt(r);
                        if (e < 32 || e > 126) return !1;
                    }
                    return !0;
                }(t) : !!t && s(t);
            };
            var n = r(9130), i = r(4286), o = r(6927);
            function s(t) {
                const e = 0 | t.length;
                for (let r = 0; r < e; r++) {
                    const e = 0 | t[r];
                    if (e < 32 || e > 126) return !1;
                }
                return !0;
            }
        },
        9261: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isBigInt = function(t) {
                return "bigint" == typeof t;
            };
        },
        3999: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isBn = function(t) {
                return n.BN.isBN(t);
            };
            var n = r(6230);
        },
        8891: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isBoolean = function(t) {
                return "boolean" == typeof t;
            };
        },
        9203: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isBuffer = function(t) {
                return i.hasBuffer && (0, o.isFunction)(t && t.readDoubleLE) && n.xglobal.Buffer.isBuffer(t);
            };
            var n = r(9249), i = r(3393), o = r(4526);
        },
        5568: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isChildClass = function(t, e) {
                return !(!(0, n.isClass)(e) || !(0, n.isClass)(t)) && (t === e || t.isPrototypeOf(e));
            };
            var n = r(194);
        },
        194: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isClass = void 0;
            const n = (0, r(2775).isOnFunction)("isPrototypeOf", "hasOwnProperty");
            e.isClass = n;
        },
        1694: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isCodec = function(t) {
                return i(t) && o(t.registry);
            };
            var n = r(2775);
            const i = (0, n.isOnObject)("toHex", "toU8a"), o = (0, n.isOnObject)("get");
        },
        90: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isCompact = void 0;
            const n = (0, r(2775).isOnObject)("toBigInt", "toBn", "toNumber", "unwrap");
            e.isCompact = n;
        },
        8594: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isError = function(t) {
                return (t && t.constructor) === Error || t instanceof Error;
            };
        },
        4526: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isFunction = function(t) {
                return "function" == typeof t;
            };
        },
        2775: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isOn = function() {
                for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++) e[r] = arguments[r];
                return t => ((0, i.isObject)(t) || (0, n.isFunction)(t)) && e.every((e => (0, n.isFunction)(t[e])));
            }, e.isOnFunction = function() {
                for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++) e[r] = arguments[r];
                return t => (0, n.isFunction)(t) && e.every((e => (0, n.isFunction)(t[e])));
            }, e.isOnObject = function() {
                for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++) e[r] = arguments[r];
                return t => (0, i.isObject)(t) && e.every((e => (0, n.isFunction)(t[e])));
            };
            var n = r(4526), i = r(3925);
        },
        4286: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.REGEX_HEX_PREFIXED = e.REGEX_HEX_NOPREFIX = void 0, e.isHex = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1, n = arguments.length > 2 ? arguments[2] : void 0;
                return "string" == typeof t && ("0x" === t || r.test(t)) && (-1 === e ? n || t.length % 2 == 0 : t.length === 2 + Math.ceil(e / 4));
            };
            const r = /^0x[\da-fA-F]+$/;
            e.REGEX_HEX_PREFIXED = r;
            e.REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
        },
        9247: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "isArray", {
                enumerable: !0,
                get: function() {
                    return n.isArray;
                }
            }), Object.defineProperty(e, "isAscii", {
                enumerable: !0,
                get: function() {
                    return i.isAscii;
                }
            }), Object.defineProperty(e, "isBigInt", {
                enumerable: !0,
                get: function() {
                    return o.isBigInt;
                }
            }), Object.defineProperty(e, "isBn", {
                enumerable: !0,
                get: function() {
                    return s.isBn;
                }
            }), Object.defineProperty(e, "isBoolean", {
                enumerable: !0,
                get: function() {
                    return u.isBoolean;
                }
            }), Object.defineProperty(e, "isBuffer", {
                enumerable: !0,
                get: function() {
                    return a.isBuffer;
                }
            }), Object.defineProperty(e, "isChildClass", {
                enumerable: !0,
                get: function() {
                    return l.isChildClass;
                }
            }), Object.defineProperty(e, "isClass", {
                enumerable: !0,
                get: function() {
                    return c.isClass;
                }
            }), Object.defineProperty(e, "isCodec", {
                enumerable: !0,
                get: function() {
                    return h.isCodec;
                }
            }), Object.defineProperty(e, "isCompact", {
                enumerable: !0,
                get: function() {
                    return f.isCompact;
                }
            }), Object.defineProperty(e, "isError", {
                enumerable: !0,
                get: function() {
                    return d.isError;
                }
            }), Object.defineProperty(e, "isFunction", {
                enumerable: !0,
                get: function() {
                    return p.isFunction;
                }
            }), Object.defineProperty(e, "isHex", {
                enumerable: !0,
                get: function() {
                    return m.isHex;
                }
            }), Object.defineProperty(e, "isInstanceOf", {
                enumerable: !0,
                get: function() {
                    return g.isInstanceOf;
                }
            }), Object.defineProperty(e, "isIp", {
                enumerable: !0,
                get: function() {
                    return y.isIp;
                }
            }), Object.defineProperty(e, "isJsonObject", {
                enumerable: !0,
                get: function() {
                    return v.isJsonObject;
                }
            }), Object.defineProperty(e, "isNull", {
                enumerable: !0,
                get: function() {
                    return b.isNull;
                }
            }), Object.defineProperty(e, "isNumber", {
                enumerable: !0,
                get: function() {
                    return w.isNumber;
                }
            }), Object.defineProperty(e, "isObject", {
                enumerable: !0,
                get: function() {
                    return A.isObject;
                }
            }), Object.defineProperty(e, "isObservable", {
                enumerable: !0,
                get: function() {
                    return _.isObservable;
                }
            }), Object.defineProperty(e, "isPromise", {
                enumerable: !0,
                get: function() {
                    return E.isPromise;
                }
            }), Object.defineProperty(e, "isString", {
                enumerable: !0,
                get: function() {
                    return M.isString;
                }
            }), Object.defineProperty(e, "isTestChain", {
                enumerable: !0,
                get: function() {
                    return P.isTestChain;
                }
            }), Object.defineProperty(e, "isToBigInt", {
                enumerable: !0,
                get: function() {
                    return k.isToBigInt;
                }
            }), Object.defineProperty(e, "isToBn", {
                enumerable: !0,
                get: function() {
                    return S.isToBn;
                }
            }), Object.defineProperty(e, "isU8a", {
                enumerable: !0,
                get: function() {
                    return O.isU8a;
                }
            }), Object.defineProperty(e, "isUndefined", {
                enumerable: !0,
                get: function() {
                    return N.isUndefined;
                }
            }), Object.defineProperty(e, "isUtf8", {
                enumerable: !0,
                get: function() {
                    return x.isUtf8;
                }
            }), Object.defineProperty(e, "isWasm", {
                enumerable: !0,
                get: function() {
                    return I.isWasm;
                }
            });
            var n = r(7550), i = r(4790), o = r(9261), s = r(3999), a = r(9203), u = r(8891), l = r(5568), c = r(194), h = r(1694), f = r(90), d = r(8594), p = r(4526), m = r(4286), g = r(1241), y = r(1971), v = r(5822), b = r(5609), w = r(6972), A = r(3925), _ = r(6793), E = r(1365), M = r(6927), P = r(7480), k = r(5226), S = r(9033), O = r(4451), N = r(5371), x = r(7719), I = r(1917);
        },
        1241: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isInstanceOf = function(t, e) {
                return (t && t.constructor) === e || t instanceof e;
            };
        },
        1971: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isIp = function(t, e) {
                switch (e) {
                  case "v4":
                    return s.test(t);

                  case "v6":
                    return a.test(t);

                  default:
                    return o.test(t);
                }
            };
            const r = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}", n = "[a-fA-F\\d]{1,4}", i = `\n(?:\n(?:${n}:){7}(?:${n}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${n}:){6}(?:${r}|:${n}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${n}:){5}(?::${r}|(?::${n}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${n}:){4}(?:(?::${n}){0,1}:${r}|(?::${n}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${n}:){3}(?:(?::${n}){0,2}:${r}|(?::${n}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${n}:){2}(?:(?::${n}){0,3}:${r}|(?::${n}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${n}:){1}(?:(?::${n}){0,4}:${r}|(?::${n}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${n}){0,5}:${r}|(?::${n}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim(), o = new RegExp(`(?:^${r}$)|(?:^${i}$)`), s = new RegExp(`^${r}$`), a = new RegExp(`^${i}$`);
        },
        5822: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isJsonObject = function(t) {
                const e = "string" != typeof t ? (0, n.stringify)(t) : t;
                try {
                    const t = JSON.parse(e);
                    return "object" == typeof t && null !== t;
                } catch (t) {
                    return !1;
                }
            };
            var n = r(906);
        },
        5609: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isNull = function(t) {
                return null === t;
            };
        },
        6972: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isNumber = function(t) {
                return "number" == typeof t;
            };
        },
        3925: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isObject = function(t) {
                return !!t && "object" == typeof t;
            };
        },
        6793: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isObservable = void 0;
            const n = (0, r(2775).isOn)("next");
            e.isObservable = n;
        },
        1365: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isPromise = void 0;
            const n = (0, r(2775).isOnObject)("catch", "then");
            e.isPromise = n;
        },
        6927: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isString = function(t) {
                return "string" == typeof t || t instanceof String;
            };
        },
        7480: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isTestChain = function(t) {
                if (!t) return !1;
                return !!r.test(t.toString());
            };
            const r = /(Development|Local Testnet)$/;
        },
        5226: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isToBigInt = void 0;
            const n = (0, r(2775).isOn)("toBigInt");
            e.isToBigInt = n;
        },
        9033: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isToBn = void 0;
            const n = (0, r(2775).isOn)("toBn");
            e.isToBn = n;
        },
        4451: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isU8a = function(t) {
                return (t && t.constructor) === Uint8Array || t instanceof Uint8Array;
            };
        },
        5371: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isUndefined = function(t) {
                return void 0 === t;
            };
        },
        7719: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isUtf8 = function(t) {
                if (!t) return (0, i.isString)(t);
                const e = (0, n.u8aToU8a)(t), r = e.length;
                let o = 0;
                for (;o < r; ) if (e[o] <= 127) o += 1; else if (e[o] >= 194 && e[o] <= 223) {
                    if (!(o + 1 < r)) return !1;
                    if (e[o + 1] < 128 || e[o + 1] > 191) return !1;
                    o += 2;
                } else if (224 === e[o]) {
                    if (!(o + 2 < r)) return !1;
                    if (e[o + 1] < 160 || e[o + 1] > 191) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    o += 3;
                } else if (e[o] >= 225 && e[o] <= 236) {
                    if (!(o + 2 < r)) return !1;
                    if (e[o + 1] < 128 || e[o + 1] > 191) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    o += 3;
                } else if (237 === e[o]) {
                    if (!(o + 2 < r)) return !1;
                    if (e[o + 1] < 128 || e[o + 1] > 159) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    o += 3;
                } else if (e[o] >= 238 && e[o] <= 239) {
                    if (!(o + 2 < r)) return !1;
                    if (e[o + 1] < 128 || e[o + 1] > 191) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    o += 3;
                } else if (240 === e[o]) {
                    if (!(o + 3 < r)) return !1;
                    if (e[o + 1] < 144 || e[o + 1] > 191) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    if (e[o + 3] < 128 || e[o + 3] > 191) return !1;
                    o += 4;
                } else if (e[o] >= 241 && e[o] <= 243) {
                    if (!(o + 3 < r)) return !1;
                    if (e[o + 1] < 128 || e[o + 1] > 191) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    if (e[o + 3] < 128 || e[o + 3] > 191) return !1;
                    o += 4;
                } else {
                    if (244 !== e[o]) return !1;
                    if (!(o + 3 < r)) return !1;
                    if (e[o + 1] < 128 || e[o + 1] > 143) return !1;
                    if (e[o + 2] < 128 || e[o + 2] > 191) return !1;
                    if (e[o + 3] < 128 || e[o + 3] > 191) return !1;
                    o += 4;
                }
                return !0;
            };
            var n = r(9130), i = r(6927);
        },
        1917: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.isWasm = function(t) {
                return (0, i.isU8a)(t) && (0, n.u8aEq)(t.subarray(0, 4), o);
            };
            var n = r(9426), i = r(4451);
            const o = new Uint8Array([ 0, 97, 115, 109 ]);
        },
        7598: (t, e) => {
            "use strict";
            function r(t, e, r, n) {
                let i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                const o = n ? n(e, i) : e.toString();
                let s;
                Object.defineProperty(t, o, {
                    configurable: !0,
                    enumerable: !0,
                    get: function() {
                        if (void 0 === s) {
                            s = r(e, i, this);
                            try {
                                Object.defineProperty(this, o, {
                                    value: s
                                });
                            } catch {}
                        }
                        return s;
                    }
                });
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.lazyMethod = r, e.lazyMethods = function(t, e, n, i) {
                for (let o = 0; o < e.length; o++) r(t, e[o], n, i, o);
                return t;
            };
        },
        619: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.logger = function(t) {
                const e = `${t.toUpperCase()}:`.padStart(16), [r, i] = function(t) {
                    const e = (f.hasProcess ? n.xglobal.process : {}).env || {}, r = parseInt(e.DEBUG_MAX || "-1", 10);
                    return [ b((e.DEBUG || "").toLowerCase().split(","), t), isNaN(r) ? -1 : r ];
                }(t.toLowerCase());
                return {
                    debug: r ? function() {
                        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                        return m("debug", e, r, i);
                    } : g,
                    error: function() {
                        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                        return m("error", e, r);
                    },
                    log: function() {
                        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                        return m("log", e, r);
                    },
                    noop: g,
                    warn: function() {
                        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];
                        return m("warn", e, r);
                    }
                };
            }, e.loggerFormat = p;
            var n = r(9249), i = r(5493), o = r(3999), s = r(9203), a = r(4526), u = r(3925), l = r(4451), c = r(859), h = r(9130), f = r(3393);
            const d = {
                debug: "log",
                error: "error",
                log: "log",
                warn: "warn"
            };
            function p(t) {
                return Array.isArray(t) ? t.map(p) : (0, o.isBn)(t) ? t.toString() : (0, l.isU8a)(t) || (0, 
                s.isBuffer)(t) ? (0, c.u8aToHex)((0, h.u8aToU8a)(t)) : function(t) {
                    if (t && (0, u.isObject)(t) && t.constructor === Object) {
                        const e = {};
                        for (const r of Object.keys(t)) e[r] = p(t[r]);
                        return e;
                    }
                    return t;
                }(t);
            }
            function m(t, e, r) {
                let n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : -1;
                if (1 === r.length && (0, a.isFunction)(r[0])) {
                    const i = r[0]();
                    return m(t, e, Array.isArray(i) ? i : [ i ], n);
                }
                var o;
                console[d[t]]((0, i.formatDate)(new Date), e, ...r.map(p).map((o = n, t => {
                    if (o <= 0) return t;
                    const e = `${t}`;
                    return e.length < o ? t : `${e.substring(0, o)} ...`;
                })));
            }
            function g() {}
            function y(t, e) {
                return !!t && ("*" === t || e === t || t.endsWith("*") && e.startsWith(t.slice(0, -1)));
            }
            function v(t, e) {
                return !!t && t.startsWith("-") && (e === t.slice(1) || t.endsWith("*") && e.startsWith(t.slice(1, -1)));
            }
            function b(t, e) {
                let r = !1;
                for (const n of t) y(n, e) ? r = !0 : v(n, e) && (r = !1);
                return r;
            }
        },
        3296: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.memoize = function(t) {
                let {getInstanceId: e = i} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const r = {}, o = function() {
                    for (var i = arguments.length, o = new Array(i), s = 0; s < i; s++) o[s] = arguments[s];
                    const a = (0, n.stringify)(o), u = e();
                    return r[u] || (r[u] = {}), void 0 === r[u][a] && (r[u][a] = t(...o)), r[u][a];
                };
                return o.unmemoize = function() {
                    for (var t = arguments.length, i = new Array(t), o = 0; o < t; o++) i[o] = arguments[o];
                    const s = (0, n.stringify)(i), a = e();
                    r[a] && void 0 !== r[a][s] && delete r[a][s];
                }, o;
            };
            var n = r(906);
            function i() {
                return "none";
            }
        },
        7358: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.nextTick = function(t, e) {
                setTimeout((() => {
                    Promise.resolve().then((() => {
                        t();
                    })).catch((t => {
                        e ? e(t) : console.error(t);
                    }));
                }), 0);
            };
        },
        3904: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "numberToHex", {
                enumerable: !0,
                get: function() {
                    return n.numberToHex;
                }
            }), Object.defineProperty(e, "numberToU8a", {
                enumerable: !0,
                get: function() {
                    return i.numberToU8a;
                }
            });
            var n = r(6280), i = r(4252);
        },
        6280: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.numberToHex = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
                const r = (!t || Number.isNaN(t) ? 0 : t).toString(16);
                return (0, n.hexFixLength)(r.length % 2 ? `0${r}` : r, e, !0);
            };
            var n = r(5267);
        },
        4252: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.numberToU8a = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
                return (0, n.hexToU8a)((0, i.numberToHex)(t, e));
            };
            var n = r(3181), i = r(6280);
        },
        4474: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectClear = function(t) {
                const e = Object.keys(t);
                for (let r = 0; r < e.length; r++) delete t[e[r]];
                return t;
            };
        },
        9591: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectCopy = function(t) {
                return (0, n.objectSpread)({}, t);
            };
            var n = r(7963);
        },
        7416: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectEntries = function(t) {
                return Object.entries(t);
            };
        },
        7777: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "objectClear", {
                enumerable: !0,
                get: function() {
                    return n.objectClear;
                }
            }), Object.defineProperty(e, "objectCopy", {
                enumerable: !0,
                get: function() {
                    return i.objectCopy;
                }
            }), Object.defineProperty(e, "objectEntries", {
                enumerable: !0,
                get: function() {
                    return o.objectEntries;
                }
            }), Object.defineProperty(e, "objectKeys", {
                enumerable: !0,
                get: function() {
                    return s.objectKeys;
                }
            }), Object.defineProperty(e, "objectProperties", {
                enumerable: !0,
                get: function() {
                    return a.objectProperties;
                }
            }), Object.defineProperty(e, "objectProperty", {
                enumerable: !0,
                get: function() {
                    return a.objectProperty;
                }
            }), Object.defineProperty(e, "objectSpread", {
                enumerable: !0,
                get: function() {
                    return u.objectSpread;
                }
            }), Object.defineProperty(e, "objectValues", {
                enumerable: !0,
                get: function() {
                    return l.objectValues;
                }
            });
            var n = r(4474), i = r(9591), o = r(7416), s = r(6906), a = r(1899), u = r(7963), l = r(6152);
        },
        6906: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectKeys = function(t) {
                return Object.keys(t);
            };
        },
        1899: (t, e) => {
            "use strict";
            function r(t, e, r, n) {
                let i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                const o = n ? n(e, i) : e;
                o in t || Object.defineProperty(t, o, {
                    enumerable: !0,
                    get: function() {
                        return r(e, i, this);
                    }
                });
            }
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectProperties = function(t, e, n, i) {
                for (let o = 0; o < e.length; o++) r(t, e[o], n, i, o);
            }, e.objectProperty = r;
        },
        7963: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectSpread = function(t) {
                for (let e = 0; e < (arguments.length <= 1 ? 0 : arguments.length - 1); e++) {
                    const r = e + 1 < 1 || arguments.length <= e + 1 ? void 0 : arguments[e + 1];
                    if (r) if ("function" == typeof r.entries) for (const [e, n] of r.entries()) t[e] = n; else Object.assign(t, r);
                }
                return t;
            };
        },
        6152: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.objectValues = function(t) {
                return Object.values(t);
            };
        },
        879: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/util",
                path: __dirname,
                type: "cjs",
                version: "10.4.2"
            };
            e.packageInfo = r;
        },
        2881: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.promisify = function(t, e) {
                for (var r = arguments.length, n = new Array(r > 2 ? r - 2 : 0), i = 2; i < r; i++) n[i - 2] = arguments[i];
                return new Promise(((r, i) => {
                    e.apply(t, n.concat(((t, e) => {
                        t ? i(t) : r(e);
                    })));
                }));
            };
        },
        6141: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.stringPascalCase = e.stringCamelCase = e.CC_TO_UP = e.CC_TO_LO = void 0;
            const r = new Array(256);
            e.CC_TO_UP = r;
            const n = new Array(256);
            e.CC_TO_LO = n;
            for (let t = 0; t < r.length; t++) n[t] = String.fromCharCode(t).toLowerCase(), 
            r[t] = String.fromCharCode(t).toUpperCase();
            function i(t) {
                return t.slice(0, t.length - 1).toLowerCase() + r[t.charCodeAt(t.length - 1)];
            }
            function o(t) {
                return e => {
                    const r = e.replace(/[-_., ]+/g, " ").trim().split(" "), n = r.length;
                    let o = "";
                    for (let e = 0; e < n; e++) {
                        const n = r[e];
                        o += t(/^[\dA-Z]+$/.test(n) ? n.toLowerCase() : n.replace(/^[\dA-Z]{2,}[^a-z]/, i), e);
                    }
                    return o;
                };
            }
            const s = o(((t, e) => (e ? r[t.charCodeAt(0)] : n[t.charCodeAt(0)]) + t.slice(1)));
            e.stringCamelCase = s;
            const a = o((t => r[t.charCodeAt(0)] + t.slice(1)));
            e.stringPascalCase = a;
        },
        1301: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "stringCamelCase", {
                enumerable: !0,
                get: function() {
                    return n.stringCamelCase;
                }
            }), Object.defineProperty(e, "stringLowerFirst", {
                enumerable: !0,
                get: function() {
                    return i.stringLowerFirst;
                }
            }), Object.defineProperty(e, "stringPascalCase", {
                enumerable: !0,
                get: function() {
                    return n.stringPascalCase;
                }
            }), Object.defineProperty(e, "stringShorten", {
                enumerable: !0,
                get: function() {
                    return o.stringShorten;
                }
            }), Object.defineProperty(e, "stringToHex", {
                enumerable: !0,
                get: function() {
                    return s.stringToHex;
                }
            }), Object.defineProperty(e, "stringToU8a", {
                enumerable: !0,
                get: function() {
                    return a.stringToU8a;
                }
            }), Object.defineProperty(e, "stringUpperFirst", {
                enumerable: !0,
                get: function() {
                    return i.stringUpperFirst;
                }
            });
            var n = r(6141), i = r(8984), o = r(2743), s = r(3267), a = r(9429);
        },
        8984: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.stringUpperFirst = e.stringLowerFirst = void 0;
            var n = r(6141);
            function i(t) {
                return e => e ? t[e.charCodeAt(0)] + e.slice(1) : "";
            }
            const o = i(n.CC_TO_LO);
            e.stringLowerFirst = o;
            const s = i(n.CC_TO_UP);
            e.stringUpperFirst = s;
        },
        2743: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.stringShorten = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 6;
                return t.length <= 2 + 2 * e ? t.toString() : `${t.substring(0, e)}…${t.slice(-e)}`;
            };
        },
        3267: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.stringToHex = function(t) {
                return (0, n.u8aToHex)((0, i.stringToU8a)(t));
            };
            var n = r(859), i = r(9429);
        },
        9429: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.stringToU8a = function(t) {
                return t ? n.encode(t.toString()) : new Uint8Array;
            };
            const n = new (r(7327).TextEncoder);
        },
        906: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.stringify = function(t, e) {
                return JSON.stringify(t, i, e);
            };
            var n = r(9261);
            function i(t, e) {
                return (0, n.isBigInt)(e) ? e.toString() : e;
            }
        },
        8359: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aCmp = function(t, e) {
                const r = (0, n.u8aToU8a)(t), i = (0, n.u8aToU8a)(e);
                let o = 0;
                for (;;) {
                    const t = o >= r.length, e = o >= i.length;
                    if (t && e) return 0;
                    if (t) return -1;
                    if (e) return 1;
                    if (r[o] !== i[o]) return r[o] > i[o] ? 1 : -1;
                    o++;
                }
            };
            var n = r(9130);
        },
        4640: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aConcat = function() {
                const t = new Array(arguments.length);
                let e = 0;
                for (let r = 0; r < arguments.length; r++) t[r] = (0, n.u8aToU8a)(r < 0 || arguments.length <= r ? void 0 : arguments[r]), 
                e += t[r].length;
                return i(t, e);
            }, e.u8aConcatStrict = i;
            var n = r(9130);
            function i(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r = 0;
                if (!e) for (let r = 0; r < t.length; r++) e += t[r].length;
                const n = new Uint8Array(e);
                for (let e = 0; e < t.length; e++) n.set(t[e], r), r += t[e].length;
                return n;
            }
        },
        1361: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aEmpty = function(t) {
                const e = 0 | t.length;
                for (let r = 0; r < e; r++) if (0 | t[r]) return !1;
                return !0;
            };
        },
        9426: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aEq = function(t, e) {
                const r = (0, n.u8aToU8a)(t), i = (0, n.u8aToU8a)(e);
                if (r.length === i.length) {
                    const t = new DataView(r.buffer, r.byteOffset), e = new DataView(i.buffer, i.byteOffset), n = r.length % 4 | 0, o = r.length - n | 0;
                    for (let r = 0; r < o; r += 4) if (t.getUint32(r) !== e.getUint32(r)) return !1;
                    for (let t = o; t < r.length; t++) if (r[t] !== i[t]) return !1;
                    return !0;
                }
                return !1;
            };
            var n = r(9130);
        },
        2095: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aFixLength = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1, r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                const n = Math.ceil(e / 8);
                if (-1 === e || t.length === n) return t;
                if (t.length > n) return t.subarray(0, n);
                const i = new Uint8Array(n);
                return i.set(t, r ? 0 : n - t.length), i;
            };
        },
        9409: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), Object.defineProperty(e, "U8A_WRAP_ETHEREUM", {
                enumerable: !0,
                get: function() {
                    return y.U8A_WRAP_ETHEREUM;
                }
            }), Object.defineProperty(e, "U8A_WRAP_POSTFIX", {
                enumerable: !0,
                get: function() {
                    return y.U8A_WRAP_POSTFIX;
                }
            }), Object.defineProperty(e, "U8A_WRAP_PREFIX", {
                enumerable: !0,
                get: function() {
                    return y.U8A_WRAP_PREFIX;
                }
            }), Object.defineProperty(e, "u8aCmp", {
                enumerable: !0,
                get: function() {
                    return n.u8aCmp;
                }
            }), Object.defineProperty(e, "u8aConcat", {
                enumerable: !0,
                get: function() {
                    return i.u8aConcat;
                }
            }), Object.defineProperty(e, "u8aConcatStrict", {
                enumerable: !0,
                get: function() {
                    return i.u8aConcatStrict;
                }
            }), Object.defineProperty(e, "u8aEmpty", {
                enumerable: !0,
                get: function() {
                    return o.u8aEmpty;
                }
            }), Object.defineProperty(e, "u8aEq", {
                enumerable: !0,
                get: function() {
                    return s.u8aEq;
                }
            }), Object.defineProperty(e, "u8aFixLength", {
                enumerable: !0,
                get: function() {
                    return a.u8aFixLength;
                }
            }), Object.defineProperty(e, "u8aIsWrapped", {
                enumerable: !0,
                get: function() {
                    return y.u8aIsWrapped;
                }
            }), Object.defineProperty(e, "u8aSorted", {
                enumerable: !0,
                get: function() {
                    return l.u8aSorted;
                }
            }), Object.defineProperty(e, "u8aToBigInt", {
                enumerable: !0,
                get: function() {
                    return c.u8aToBigInt;
                }
            }), Object.defineProperty(e, "u8aToBn", {
                enumerable: !0,
                get: function() {
                    return h.u8aToBn;
                }
            }), Object.defineProperty(e, "u8aToBuffer", {
                enumerable: !0,
                get: function() {
                    return f.u8aToBuffer;
                }
            }), Object.defineProperty(e, "u8aToFloat", {
                enumerable: !0,
                get: function() {
                    return u.u8aToFloat;
                }
            }), Object.defineProperty(e, "u8aToHex", {
                enumerable: !0,
                get: function() {
                    return d.u8aToHex;
                }
            }), Object.defineProperty(e, "u8aToNumber", {
                enumerable: !0,
                get: function() {
                    return p.u8aToNumber;
                }
            }), Object.defineProperty(e, "u8aToString", {
                enumerable: !0,
                get: function() {
                    return m.u8aToString;
                }
            }), Object.defineProperty(e, "u8aToU8a", {
                enumerable: !0,
                get: function() {
                    return g.u8aToU8a;
                }
            }), Object.defineProperty(e, "u8aUnwrapBytes", {
                enumerable: !0,
                get: function() {
                    return y.u8aUnwrapBytes;
                }
            }), Object.defineProperty(e, "u8aWrapBytes", {
                enumerable: !0,
                get: function() {
                    return y.u8aWrapBytes;
                }
            });
            var n = r(8359), i = r(4640), o = r(1361), s = r(9426), a = r(2095), u = r(5427), l = r(8550), c = r(7471), h = r(2872), f = r(2256), d = r(859), p = r(9602), m = r(3507), g = r(9130), y = r(2506);
        },
        8550: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aSorted = function(t) {
                return t.sort(n.u8aCmp);
            };
            var n = r(8359);
        },
        7471: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToBigInt = function(t) {
                let {isLe: e = !0, isNegative: r = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (!t || !t.length) return (0, n.BigInt)(0);
                const a = e ? t : t.reverse(), u = new DataView(a.buffer, a.byteOffset), l = a.length % 2;
                let c = (0, n.BigInt)(0);
                if (r) {
                    for (let t = a.length - 2; t >= l; t -= 2) c = c * s + (0, n.BigInt)(65535 ^ u.getUint16(t, !0));
                    l && (c = c * o + (0, n.BigInt)(255 ^ u.getUint8(0)));
                } else {
                    for (let t = a.length - 2; t >= l; t -= 2) c = c * s + (0, n.BigInt)(u.getUint16(t, !0));
                    l && (c = c * o + (0, n.BigInt)(u.getUint8(0)));
                }
                return r ? c * -i._1n - i._1n : c;
            };
            var n = r(6038), i = r(5405);
            const o = (0, n.BigInt)(256), s = (0, n.BigInt)(65536);
        },
        2872: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToBn = function(t) {
                let {isLe: e = !0, isNegative: r = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const i = t.length;
                if (i <= 6) {
                    if (r) {
                        let r = 0;
                        if (e) switch (i) {
                          case 0:
                            return new n.BN(0);

                          case 1:
                            r = 255 ^ t[0];
                            break;

                          case 2:
                            r = t[0] + (t[1] << 8) ^ 65535;
                            break;

                          case 3:
                            r = t[0] + (t[1] << 8) + (t[2] << 16) ^ 16777215;
                            break;

                          case 4:
                            r = t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] ^ 4294967295;
                            break;

                          case 5:
                            r = (t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] ^ 4294967295) + 4294967296 * (255 ^ t[4]);
                            break;

                          default:
                            r = (t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] ^ 4294967295) + 4294967296 * (t[4] + (t[5] << 8) ^ 65535);
                        } else for (let e = 0; e < i; e++) r = 256 * r + (255 ^ t[e]);
                        return i ? new n.BN(-1 * r - 1) : new n.BN(0);
                    }
                    if (!e) {
                        let e = 0;
                        for (let r = 0; r < i; r++) e = 256 * e + t[r];
                        return new n.BN(e);
                    }
                    switch (i) {
                      case 0:
                        return new n.BN(0);

                      case 1:
                        return new n.BN(t[0]);

                      case 2:
                        return new n.BN(t[0] + (t[1] << 8));

                      case 3:
                        return new n.BN(t[0] + (t[1] << 8) + (t[2] << 16));

                      case 4:
                        return new n.BN(t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3]);

                      case 5:
                        return new n.BN(t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * (t[3] + (t[4] << 8)));

                      default:
                        return new n.BN(t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * (t[3] + (t[4] << 8) + (t[5] << 16)));
                    }
                }
                return r ? new n.BN(t, e ? "le" : "be").fromTwos(8 * t.length) : new n.BN(t, e ? "le" : "be");
            };
            var n = r(6230);
        },
        2256: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToBuffer = function(t) {
                return Buffer.from(t || []);
            };
        },
        5427: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToFloat = function(t) {
                let {bitLength: e = 32, isLe: r = !0} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                if (32 !== e && 64 !== e) throw new Error("Invalid bitLength provided, expected 32 or 64");
                if (t.length < e / 8) throw new Error(`Invalid input buffer provided, expected at least ${e / 8} bytes, found ${t.length}`);
                const n = new DataView(t.buffer, t.byteOffset);
                return 32 === e ? n.getFloat32(0, r) : n.getFloat64(0, r);
            };
        },
        859: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToHex = function(t) {
                let e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1;
                const r = arguments.length > 2 && void 0 !== arguments[2] && !arguments[2] ? "" : "0x";
                if (!t || !t.length) return r;
                if (e > 0) {
                    const n = Math.ceil(e / 8);
                    if (t.length > n) return `${i(t.subarray(0, n / 2), r)}…${i(t.subarray(t.length - n / 2), "")}`;
                }
                return i(t, r);
            };
            const r = new Array(256), n = new Array(65536);
            for (let t = 0; t < 256; t++) r[t] = t.toString(16).padStart(2, "0");
            for (let t = 0; t < 256; t++) {
                const e = t << 8;
                for (let i = 0; i < 256; i++) n[e | i] = r[t] + r[i];
            }
            function i(t, e) {
                const i = t.length % 2 | 0, o = t.length - i | 0;
                for (let r = 0; r < o; r += 2) e += n[t[r] << 8 | t[r + 1]];
                return i && (e += r[0 | t[o]]), e;
            }
        },
        9602: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToNumber = function(t) {
                let {isNegative: e = !1} = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                const r = t.length;
                if (e) {
                    let e = 0;
                    switch (r) {
                      case 0:
                        return 0;

                      case 1:
                        e = 255 ^ t[0];
                        break;

                      case 2:
                        e = t[0] + (t[1] << 8) ^ 65535;
                        break;

                      case 3:
                        e = t[0] + (t[1] << 8) + (t[2] << 16) ^ 16777215;
                        break;

                      case 4:
                        e = t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] ^ 4294967295;
                        break;

                      case 5:
                        e = (t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] ^ 4294967295) + 4294967296 * (255 ^ t[4]);
                        break;

                      case 6:
                        e = (t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3] ^ 4294967295) + 4294967296 * (t[4] + (t[5] << 8) ^ 65535);
                        break;

                      default:
                        throw new Error("Value more than 48-bits cannot be reliably converted");
                    }
                    return -1 * e - 1;
                }
                switch (r) {
                  case 0:
                    return 0;

                  case 1:
                    return t[0];

                  case 2:
                    return t[0] + (t[1] << 8);

                  case 3:
                    return t[0] + (t[1] << 8) + (t[2] << 16);

                  case 4:
                    return t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * t[3];

                  case 5:
                    return t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * (t[3] + (t[4] << 8));

                  case 6:
                    return t[0] + (t[1] << 8) + (t[2] << 16) + 16777216 * (t[3] + (t[4] << 8) + (t[5] << 16));

                  default:
                    throw new Error("Value more than 48-bits cannot be reliably converted");
                }
            };
        },
        3507: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToString = function(t) {
                return t ? n.decode(t) : "";
            };
            const n = new (r(7679).TextDecoder)("utf-8");
        },
        9130: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.u8aToU8a = function(t) {
                return (0, s.isU8a)(t) ? (0, i.isBuffer)(t) ? new Uint8Array(t) : t : (0, o.isHex)(t) ? (0, 
                n.hexToU8a)(t) : Array.isArray(t) ? new Uint8Array(t) : (0, a.stringToU8a)(t);
            };
            var n = r(3181), i = r(9203), o = r(4286), s = r(4451), a = r(9429);
        },
        2506: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.U8A_WRAP_PREFIX = e.U8A_WRAP_POSTFIX = e.U8A_WRAP_ETHEREUM = void 0, e.u8aIsWrapped = c, 
            e.u8aUnwrapBytes = function(t) {
                const e = (0, o.u8aToU8a)(t);
                return c(e, !1) ? e.subarray(a.length, e.length - u.length) : e;
            }, e.u8aWrapBytes = function(t) {
                const e = (0, o.u8aToU8a)(t);
                return c(e, !0) ? e : (0, n.u8aConcatStrict)([ a, e, u ]);
            };
            var n = r(4640), i = r(9426), o = r(9130);
            const s = (0, o.u8aToU8a)("Ethereum Signed Message:\n");
            e.U8A_WRAP_ETHEREUM = s;
            const a = (0, o.u8aToU8a)("<Bytes>");
            e.U8A_WRAP_PREFIX = a;
            const u = (0, o.u8aToU8a)("</Bytes>");
            e.U8A_WRAP_POSTFIX = u;
            const l = a.length + u.length;
            function c(t, e) {
                return t.length >= l && (0, i.u8aEq)(t.subarray(0, a.length), a) && (0, i.u8aEq)(t.slice(-u.length), u) || e && t.length >= s.length && (0, 
                i.u8aEq)(t.subarray(0, s.length), s);
            }
        },
        883: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.detectPackage = function(t, e) {
                let {name: r, path: i, type: o, version: c} = t, h = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];
                if (!r.startsWith("@polkadot")) throw new Error(`Invalid package descriptor ${r}`);
                const f = function(t) {
                    const e = n.xglobal;
                    e.__polkadotjs || (e.__polkadotjs = {});
                    e.__polkadotjs[t] || (e.__polkadotjs[t] = []);
                    return e.__polkadotjs[t];
                }(r);
                if (f.push({
                    path: u(i, e),
                    type: o,
                    version: c
                }), 1 !== f.length) l(`${r} has multiple versions, ensure that there is only one installed.`, f, a); else {
                    const t = h.filter((t => t && t.version !== c));
                    t.length && l(`${r} requires direct dependencies exactly matching version ${c}.`, t, s);
                }
            };
            var n = r(9249), i = r(4526);
            const o = "Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:";
            function s(t, e) {
                let {name: r} = e;
                return [ t, r ];
            }
            function a(t, e) {
                let r, {path: n, type: i} = e;
                if (n && n.length >= 5) {
                    const t = n.indexOf("node_modules");
                    r = -1 === t ? n : n.substring(t);
                } else r = "<unknown>";
                return [ `${`${i || ""}`.padStart(3)} ${t}`, r ];
            }
            function u(t, e) {
                if (t) return t;
                if ((0, i.isFunction)(e)) try {
                    return e() || "";
                } catch (t) {
                    return "";
                }
                return e || "";
            }
            function l(t, e, r) {
                console.warn(`${t}\n${o}\n${function(t, e) {
                    let r = 0;
                    for (let e = 0; e < t.length; e++) r = Math.max(r, t[e].version.length);
                    return t.map((t => `\t${e(t.version.padEnd(r), t).join("\t")}`)).join("\n");
                }(e, r)}`);
            }
        },
        6038: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.BigInt = void 0, Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return i.packageInfo;
                }
            });
            var n = r(9249), i = r(3647);
            const o = "function" == typeof n.xglobal.BigInt && "function" == typeof n.xglobal.BigInt.asIntN ? n.xglobal.BigInt : () => Number.NaN;
            e.BigInt = o;
        },
        3647: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/x-bigint",
                path: __dirname,
                type: "cjs",
                version: "10.4.2"
            };
            e.packageInfo = r;
        },
        9249: (t, e, r) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.exposeGlobal = function(t, e) {
                void 0 === i[t] && (i[t] = e);
            }, e.extractGlobal = function(t, e) {
                return void 0 === i[t] ? e : i[t];
            }, Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return n.packageInfo;
                }
            }), e.xglobal = void 0;
            var n = r(7904);
            const i = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : Function("return this");
            e.xglobal = i;
        },
        7904: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/x-global",
                path: __dirname,
                type: "cjs",
                version: "10.4.2"
            };
            e.packageInfo = r;
        },
        7679: (t, e, r) => {
            "use strict";
            var n = r(3203);
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.TextDecoder = void 0, Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return s.packageInfo;
                }
            });
            var i = n(r(3837)), o = r(9249), s = r(7092);
            const a = (0, o.extractGlobal)("TextDecoder", i.default.TextDecoder);
            e.TextDecoder = a;
        },
        7092: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/x-textdecoder",
                path: __dirname,
                type: "cjs",
                version: "10.4.2"
            };
            e.packageInfo = r;
        },
        7327: (t, e, r) => {
            "use strict";
            var n = r(3203);
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.TextEncoder = void 0, Object.defineProperty(e, "packageInfo", {
                enumerable: !0,
                get: function() {
                    return s.packageInfo;
                }
            });
            var i = n(r(3837)), o = r(9249), s = r(5465);
            const a = (0, o.extractGlobal)("TextEncoder", class {
                #t;
                constructor() {
                    this.#t = new i.default.TextEncoder;
                }
                encode(t) {
                    return Uint8Array.from(this.#t.encode(t));
                }
            });
            e.TextEncoder = a;
        },
        5465: (t, e) => {
            "use strict";
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.packageInfo = void 0;
            const r = {
                name: "@polkadot/x-textencoder",
                path: __dirname,
                type: "cjs",
                version: "10.4.2"
            };
            e.packageInfo = r;
        }
    }, e = {};
    function r(n) {
        var i = e[n];
        if (void 0 !== i) return i.exports;
        var o = e[n] = {
            id: n,
            loaded: !1,
            exports: {}
        };
        return t[n].call(o.exports, o, o.exports, r), o.loaded = !0, o.exports;
    }
    r.amdO = {}, r.n = t => {
        var e = t && t.__esModule ? () => t.default : () => t;
        return r.d(e, {
            a: e
        }), e;
    }, r.d = (t, e) => {
        for (var n in e) r.o(e, n) && !r.o(t, n) && Object.defineProperty(t, n, {
            enumerable: !0,
            get: e[n]
        });
    }, r.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), r.r = t => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(t, "__esModule", {
            value: !0
        });
    }, r.nmd = t => (t.paths = [], t.children || (t.children = []), t);
    var n = r(5559), i = exports;
    for (var o in n) i[o] = n[o];
    n.__esModule && Object.defineProperty(i, "__esModule", {
        value: !0
    });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,